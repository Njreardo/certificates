/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch;
var azureCommon = require("azure-common");
var storage = require("azure-storage");
var http = require("http");
var BlobUtilities = storage.BlobUtilities;
var connectionStringParser = azureCommon.ConnectionStringParser;
var flows = require("streamline/lib/util/flows");
var os = require("os");
var fs = require("fs");
var path = require("path");
var crypto = require("crypto");
var getStorageSettings = storage.StorageServiceClient.getStorageSettings;
var util = require("util");
var utils = require("./utils");
var profile = require("./profile");
var validation = require("./validation");
var ExponentialRetryPolicyFilter = storage.ExponentialRetryPolicyFilter;
var __ = require("underscore");
var $ = utils.getLocaleString;
var cli = null;
var logger = null;
var progress = null;
var restFunnel = null;
var operationTimeout = null;
var SPACE_PARAMETER = "  ";
var StorageUtil = {
};
StorageUtil.ENV_CONNECTIONSTRING_NAME = "AZURE_STORAGE_CONNECTION_STRING";
StorageUtil.ENV_SDK_ACCOUNT_NAME = "AZURE_STORAGE_ACCOUNT";
StorageUtil.ENV_SDK_ACCOUNT_KEY = "AZURE_STORAGE_ACCESS_KEY";
StorageUtil.CONCURRENTCY_CONFIG_KEY_NAME = "azure_storage_concurrency";
StorageUtil.OPERATION_TIMEOUT_CONFIG_KEY_NAME = "azure_storage_timeout";
StorageUtil.AccountTypeForCreating = {
  LRS: "Standard_LRS",
  ZRS: "Standard_ZRS",
  GRS: "Standard_GRS",
  RAGRS: "Standard_RAGRS",
  PLRS: "Premium_LRS"
};
StorageUtil.AccountTypeForChanging = {
  LRS: "Standard_LRS",
  GRS: "Standard_GRS",
  RAGRS: "Standard_RAGRS"
};
StorageUtil.OperationType = {
  Blob: "blob",
  Queue: "queue",
  Table: "table",
  File: "file"
};
StorageUtil.AccessType = {
  Container: "container",
  Blob: "blob",
  Queue: "queue",
  Table: "table"
};
StorageUtil.ContainerPermission = {
  Read: "r",
  Write: "w",
  Delete: "d",
  List: "l"
};
StorageUtil.BlobPermission = {
  Read: "r",
  Write: "w",
  Delete: "d"
};
StorageUtil.TablePermission = {
  Query: "r",
  Add: "a",
  Update: "u",
  Delete: "d"
};
StorageUtil.QueuePermission = {
  Read: "r",
  Add: "a",
  Update: "u",
  Process: "p"
};
StorageUtil.ListContinuationTokenArgIndex = {
  Container: 1,
  Blob: 2,
  Share: 1,
  File: 2,
  Queue: 1,
  Table: 1
};
StorageUtil.PolicyOperation = {
  Create: 1,
  Set: 2,
  Delete: 3
};
StorageUtil.MaxPolicyCount = 5;
StorageUtil.init = function(azureCli) {
  cli = azureCli;
  logger = cli.output;
  var cfg = utils.readConfig();
  var restConcurrency = getRestConcurrency(cfg);
  http.globalAgent.maxSockets = restConcurrency;
  restFunnel = flows.funnel(restConcurrency);
  operationTimeout = getRestOperationTimeout(cfg);
};
StorageUtil.StorageOperation = function(type, operation) {
  this.type = type;
  this.operation = operation;
};
StorageUtil.getBlobService = function(connection) {
  var serviceSettings = getStorageServiceSettings(connection);
  var service = null;
  if ((serviceSettings === null)) {
    service = storage.createBlobService();
  }
   else if (serviceSettings._usePathStyleUri) {
    service = storage.createBlobService(connection);
  }
   else if (serviceSettings._sasToken) {
    service = storage.createBlobServiceWithSas(serviceSettings._blobEndpoint.primaryHost, serviceSettings._sasToken);
  }
   else {
    service = storage.createBlobService(serviceSettings._name, serviceSettings._key, serviceSettings._blobEndpoint.primaryHost);
  }
  
  
  ;
  return service.withFilter(new ExponentialRetryPolicyFilter());
};
StorageUtil.getTableService = function(connection) {
  var serviceSettings = getStorageServiceSettings(connection);
  var service = null;
  if ((serviceSettings === null)) {
    service = storage.createTableService();
  }
   else if (serviceSettings._usePathStyleUri) {
    service = storage.createTableService(connection);
  }
   else if (serviceSettings._sasToken) {
    service = storage.createTableServiceWithSas(serviceSettings._tableEndpoint.primaryHost, serviceSettings._sasToken);
  }
   else {
    service = storage.createTableService(serviceSettings._name, serviceSettings._key, serviceSettings._tableEndpoint.primaryHost);
  }
  
  
  ;
  return service.withFilter(new ExponentialRetryPolicyFilter());
};
StorageUtil.getQueueService = function(connection) {
  var serviceSettings = getStorageServiceSettings(connection);
  var service = null;
  if ((serviceSettings === null)) {
    service = storage.createQueueService();
  }
   else if (serviceSettings._usePathStyleUri) {
    service = storage.createQueueService(connection);
  }
   else if (serviceSettings._sasToken) {
    service = storage.createQueueServiceWithSas(serviceSettings._queueEndpoint.primaryHost, serviceSettings._sasToken);
  }
   else {
    service = storage.createQueueService(serviceSettings._name, serviceSettings._key, serviceSettings._queueEndpoint.primaryHost);
  }
  
  
  ;
  return service.withFilter(new ExponentialRetryPolicyFilter());
};
StorageUtil.getFileService = function(connectionString) {
  var serviceSettings = getStorageServiceSettings(connectionString);
  var service = null;
  if ((serviceSettings === null)) {
    service = storage.createFileService();
  }
   else if (serviceSettings._usePathStyleUri) {
    service = storage.createFileService(connection);
  }
   else {
    service = storage.createFileService(serviceSettings._name, serviceSettings._key, serviceSettings._fileEndpoint.primaryHost);
  }
  
  ;
  return service.withFilter(new ExponentialRetryPolicyFilter());
};
StorageUtil.performStorageOperation = function StorageUtil_performStorageOperation__1(storageOperation, _) {
  var service, operation, definedParameterCount, operationArgs, result, __arguments = arguments;
  var __frame = {
    name: "StorageUtil_performStorageOperation__1",
    line: 287
  };
  return __func(_, this, arguments, StorageUtil_performStorageOperation__1, 1, __frame, function __$StorageUtil_performStorageOperation__1() {
    if (!storageOperation) {
      return _(null);
    }
    ;
    service = storageOperation.service;
    if (!service) {
      return _(new Error("Service client can't be null"));
    }
    ;
    operation = (storageOperation.operation || "");
    if ((!service[operation] || !isFunction(service[operation]))) {
      return _(("Invalid operation " + operation));
    }
    ;
    definedParameterCount = 2;
    operationArgs = Array.prototype.slice.call(__arguments).slice(definedParameterCount, __arguments.length);
    result = null;
    return (function ___(__then) {
      (function ___(_) {
        __tryCatch(_, function __$StorageUtil_performStorageOperation__1() {
          return restFunnel(__cb(_, __frame, 19, 4, __then, true), function __1(_) {
            var __frame = {
              name: "__1",
              line: 306
            };
            return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
              return service[operation].apply_(__cb(_, __frame, 2, 34, function ___(__0, __1) {
                result = __1;
                _();
              }, true), service, operationArgs);
            });
          });
        });
      })(function ___(e, __result) {
        __catch(function __$StorageUtil_performStorageOperation__1() {
          if (e) {
            StorageUtil.endProgress();
            return _(e);
          }
           else {
            _(null, __result);
          }
          ;
        }, _);
      });
    })(function ___() {
      __tryCatch(_, function __$StorageUtil_performStorageOperation__1() {
        return _(null, result);
      });
    });
  });
};
StorageUtil.startProgress = function(tips) {
  if ((progress !== null)) {
    StorageUtil.endProgress();
  }
  ;
  progress = cli.interaction.progress(tips);
};
StorageUtil.endProgress = function() {
  if ((progress !== null)) {
    progress.end();
  }
  ;
  progress = null;
};
StorageUtil.setOperationTimeout = function(options) {
  if (((((options.timeoutintervalInMs === undefined) && (operationTimeout !== null)) && !isNaN(operationTimeout)) && (operationTimeout > 0))) {
    options.timeoutIntervalInMs = operationTimeout;
  }
  ;
};
StorageUtil.stringToContainerAccessLevel = function(str) {
  var accessType = BlobUtilities.BlobContainerPublicAccessType;
  var accessLevel = accessType.OFF;
  if (str) {
    str = str.toLowerCase();
    switch (str) {
    case "blob":
      accessLevel = accessType.BLOB;
      break;
    case "container":
      accessLevel = accessType.CONTAINER;
      break;
    case "off":
      accessLevel = accessType.OFF;
      break;
      default:
      if (str) {
        throw new Error(util.format("Invalid container public access level %s", str));
      }
      ;
      break;
    };
  }
  ;
  return accessLevel;
};
StorageUtil.convertFileNameToBlobName = function(name) {
  return name.replace(/\\/gim, "/");
};
StorageUtil.containerAccessLevelToString = function(accessType) {
  var publicAccessType = BlobUtilities.BlobContainerPublicAccessType;
  var str = "Off";
  switch (accessType) {
  case publicAccessType.BLOB:
    str = "Blob";
    break;
  case publicAccessType.CONTAINER:
    str = "Container";
    break;
  case publicAccessType.OFF:
    str = "Off";
    break;
    default:
    if (accessType) {
      throw new Error(util.format("Invalid Container public access type %s", accessType));
    }
    ;
    break;
  };
  return str;
};
StorageUtil.parseKvParameter = function(str) {
  if (str) {
    return connectionStringParser.parse(str);
  }
  ;
};
StorageUtil.isNotFoundException = function(e) {
  return ((e.code === "NotFound") || (e.code === "ResourceNotFound"));
};
StorageUtil.isBlobExistsException = function(e) {
  return (e.code === "BlobAlreadyExists");
};
StorageUtil.isFileNotFoundException = function(e) {
  return (e.code === "ENOENT");
};
StorageUtil.recursiveMkdir = function(root, specifiedPath) {
  if (utils.isWindows()) {
    specifiedPath = specifiedPath.replace(/\//g, "\\");
  }
  ;
  var dirs = specifiedPath.split(path.sep);
  var dirPath = (root || "");
  var dirName = "";
  for (var i = 0; (i < dirs.length); i++) {
    dirName = utils.escapeFilePath(dirs[i]);
    dirPath = path.join(dirPath, dirName);
    if (!StorageUtil.doesPathExist(dirPath)) {
      fs.mkdirSync(dirPath);
    }
    ;
  };
  return dirPath;
};
StorageUtil.doesPathExist = function(dirPath) {
  var existFunc = (fs.existsSync || path.existsSync);
  if (path) {
    return existFunc(dirPath);
  }
  ;
  return true;
};
StorageUtil.getStructureFromBlobName = function(blobName) {
  var structure = {
    fileName: undefined,
    dirName: undefined
  };
  if ((blobName[(blobName.length - 1)] === "/")) {
    var lastIndex = blobName.lastIndexOf("/", (blobName.length - 2));
    structure.fileName = blobName.substr((lastIndex + 1));
    structure.dirName = blobName.substr(0, lastIndex);
  }
   else {
    structure.fileName = path.basename(blobName);
    structure.dirName = path.dirname(blobName);
  }
  ;
  return structure;
};
StorageUtil.calculateFileMd5 = function(path, cb) {
  var stream = fs.createReadStream(path);
  var digest = crypto.createHash("md5");
  stream.on("data", function(d) {
    digest.update(d);
  });
  stream.on("end", function() {
    var md5 = digest.digest("base64");
    cb(null, md5);
  });
};
StorageUtil.formatBlobProperties = function(properties, target) {
  if (!properties) {
    return
  };
  var propertyNames = ["contentType","contentEncoding","contentLanguage","cacheControl",];
  var getPropertyIndex = function(key) {
    for (var i = 0; (i < propertyNames.length); i++) {
      if ((propertyNames[i].toLowerCase() == key.toLowerCase())) {
        return i;
      }
      ;
    };
    return -1;
  };
  var index = -1;
  for (var item in properties) {
    index = getPropertyIndex(item);
    if ((index == -1)) {
      throw new Error(util.format($("Invalid value: %s. Options are: %s"), item, propertyNames));
    }
    ;
    target[propertyNames[index]] = properties[item];
    if ((item.toLowerCase() === "contenttype")) {
      target["contentType"] = properties[item];
    }
    ;
  };
};
StorageUtil.listWithContinuation = function(listFunc, storageServiceObject, continuationTokenIndexInArg) {
  var allItems = {
  };
  function listCallback(error, result) {
    if (error) {
      throw error
    };
    if ((result.entries instanceof Array)) {
      if (!((allItems instanceof Array))) {
        allItems = [];
      }
      ;
      allItems = allItems.concat(result.entries);
    }
     else {
      for (var property in result.entries) {
        if (result.entries.hasOwnProperty(property)) {
          if (!allItems[property]) {
            allItems[property] = [];
          }
          ;
          allItems[property] = allItems[property].concat(result.entries[property]);
        }
        ;
      };
    }
    ;
    if (result.continuationToken) {
      callArguments[continuationTokenIndexInArg] = result.continuationToken;
      listFunc.apply(storageServiceObject, callArguments);
    }
     else {
      callback(error, allItems);
      allItems = null;
    }
    ;
  };
  var callback = arguments[(arguments.length - 1)];
  var callArguments = Array.prototype.slice.call(arguments).slice(3, (arguments.length - 1));
  callArguments.push(listCallback);
  listFunc.apply(storageServiceObject, callArguments);
};
StorageUtil.getServiceClient = function(getServiceClientFunc, options) {
  var isNameDefined = (options.accountName !== undefined);
  var isKeyDefined = (options.accountKey !== undefined);
  var isSasDefined = (options.sas !== undefined);
  var isConnectionStringDefined = (options.connectionString !== undefined);
  var isAccountDefined = (isNameDefined || isKeyDefined);
  var isUserDefined = (isAccountDefined || isSasDefined);
  if ((isConnectionStringDefined && isUserDefined)) {
    throw new Error($("Please only define one of them: 1. --connection-string. 2 --account-name and --account-key. 3. --account-name and --sas"));
  }
   else {
    var serviceClient = null;
    if (isConnectionStringDefined) {
      serviceClient = getServiceClientFunc(options.connectionString);
    }
     else if (isUserDefined) {
      if (isNameDefined) {
        if ((isKeyDefined && isSasDefined)) {
          throw new Error($("Please only define --account-key or --sas when --account-name is defined"));
        }
         else if (isKeyDefined) {
          var connString = util.format("DefaultEndpointsProtocol=https;AccountName=%s;AccountKey=%s", options.accountName, options.accountKey);
          serviceClient = getServiceClientFunc(connString);
        }
         else {
          serviceClient = getServiceClientFunc(options);
        }
        
        ;
      }
       else {
        throw new Error($("Please set --account-name and --account-key or --account-name and --sas"));
      }
      ;
    }
     else {
      serviceClient = getServiceClientFunc();
    }
    
    ;
    if ((options.verbose === true)) {
      serviceClient.logger.level = azureCommon.Logger.LogLevels.DEBUG;
    }
    ;
    return serviceClient;
  }
  ;
};
StorageUtil.getSpeedPrinter = function(summary) {
  var clearBuffer = new Buffer(79, "utf8");
  clearBuffer.fill(" ");
  clearBuffer = clearBuffer.toString();
  var done = false;
  return function(newline) {
    if ((logger.format().json || done)) {
      return
    };
    var tips = util.format($("Percentage: %s%% (%s/%s) Average Speed: %s Elapsed Time: %s "), summary.getCompletePercent(), summary.getCompleteSize(), summary.getTotalSize(), summary.getAverageSpeed(), summary.getElapsedSeconds());
    fs.writeSync(1, (("\r" + clearBuffer) + "\r"));
    process.stdout.write(tips);
    if (newline) {
      process.stdout.write("\n");
      done = true;
    }
    ;
  };
};
StorageUtil.getStorageServiceSettings = getStorageServiceSettings;
StorageUtil.getStorageOperationDefaultOption = function() {
  var option = {
  };
  StorageUtil.setOperationTimeout(option);
  return option;
};
StorageUtil.validatePermissions = function(accessType, permissions) {
  switch (accessType) {
  case StorageUtil.AccessType.Container:
    validatePermisionsAndOrder(permissions, StorageUtil.ContainerPermission);
    break;
  case StorageUtil.AccessType.Blob:
    validatePermisionsAndOrder(permissions, StorageUtil.BlobPermission);
    break;
  case StorageUtil.AccessType.Table:
    validatePermisionsAndOrder(permissions, StorageUtil.TablePermission);
    break;
  case StorageUtil.AccessType.Queue:
    validatePermisionsAndOrder(permissions, StorageUtil.QueuePermission);
    break;
  };
};
StorageUtil.getSharedAccessPolicy = function(permissions, start, expiry, tableField, policyId) {
  var sharedAccessPolicy = {
  };
  if (policyId) {
    if (((permissions || expiry) || start)) {
      throw new Error($("Permissions, start and expiry cannot be specified with a stored policy"));
    }
    ;
    sharedAccessPolicy.Id = policyId;
  }
   else {
    if (utils.stringIsNullOrEmpty(permissions)) {
      throw new Error($("Permissions or policy ID is required"));
    }
    ;
    if (!expiry) {
      throw new Error($("Expiry or policy ID is required"));
    }
    ;
    if ((start && !__.isDate(start))) {
      throw new Error($("Start is not a valid date"));
    }
    ;
    if (!__.isDate(expiry)) {
      throw new Error($("Expiry is not a valid date"));
    }
    ;
    sharedAccessPolicy = {
      AccessPolicy: {
        Expiry: expiry
      }
    };
    var sharedAccessPermissions = removeRedundantPermission(permissions);
    sharedAccessPolicy.AccessPolicy.Permissions = sharedAccessPermissions;
    if (start) {
      if ((start.getTime() >= expiry.getTime())) {
        throw new Error($("The expiry time of the specified access policy should be greater than start time"));
      }
      ;
      sharedAccessPolicy.AccessPolicy.Start = start;
    }
    ;
  }
  ;
  if (tableField) {
    if ((tableField.startRk && !tableField.startPk)) {
      throw new Error($("Starting partition key must accompany starting row key"));
    }
    ;
    if ((tableField.endRk && !tableField.endPk)) {
      throw new Error($("Ending partition key must accompany ending row key"));
    }
    ;
    if (tableField.startPk) {
      sharedAccessPolicy.AccessPolicy.StartPk = tableField.startPk;
    }
    ;
    if (tableField.startRk) {
      sharedAccessPolicy.AccessPolicy.StartRk = tableField.startRk;
    }
    ;
    if (tableField.endPk) {
      sharedAccessPolicy.AccessPolicy.EndPk = tableField.endPk;
    }
    ;
    if (tableField.endRk) {
      sharedAccessPolicy.AccessPolicy.EndRk = tableField.endRk;
    }
    ;
  }
  ;
  return sharedAccessPolicy;
};
StorageUtil.opConcurrency = -1;
StorageUtil.threadsInOperation = 5;
StorageUtil.getStorageAccountOptions = function(options) {
  return {
    accountName: options.accountName,
    accountKey: options.accountKey,
    connectionString: options.connectionString,
    sas: options.sas
  };
};
StorageUtil.isValidRetention = function(value) {
  return (validation.isInt(value) && (parseInt(value, 10) >= 0));
};
StorageUtil.createPolicy = function StorageUtil_createPolicy__2(policySettings, _) {
  var __frame = {
    name: "StorageUtil_createPolicy__2",
    line: 765
  };
  return __func(_, this, arguments, StorageUtil_createPolicy__2, 1, __frame, function __$StorageUtil_createPolicy__2() {
    return operateOnPolicy(policySettings, StorageUtil.PolicyOperation.Create, __cb(_, __frame, 1, 9, _, true));
  });
};
StorageUtil.setPolicy = function StorageUtil_setPolicy__3(policySettings, _) {
  var __frame = {
    name: "StorageUtil_setPolicy__3",
    line: 774
  };
  return __func(_, this, arguments, StorageUtil_setPolicy__3, 1, __frame, function __$StorageUtil_setPolicy__3() {
    return operateOnPolicy(policySettings, StorageUtil.PolicyOperation.Set, __cb(_, __frame, 1, 9, _, true));
  });
};
StorageUtil.deletePolicy = function StorageUtil_deletePolicy__4(policySettings, _) {
  var __frame = {
    name: "StorageUtil_deletePolicy__4",
    line: 783
  };
  return __func(_, this, arguments, StorageUtil_deletePolicy__4, 1, __frame, function __$StorageUtil_deletePolicy__4() {
    return operateOnPolicy(policySettings, StorageUtil.PolicyOperation.Delete, __cb(_, __frame, 1, 9, _, true));
  });
};
StorageUtil.selectPolicy = function StorageUtil_selectPolicy__5(policySettings, _) {
  var policies, index, i;
  var __frame = {
    name: "StorageUtil_selectPolicy__5",
    line: 793
  };
  return __func(_, this, arguments, StorageUtil_selectPolicy__5, 1, __frame, function __$StorageUtil_selectPolicy__5() {
    policies = [];
    index = -1;
    StorageUtil.startProgress(policySettings.tips);
    return (function ___(__then) {
      (function ___(_) {
        __tryCatch(_, function __$StorageUtil_selectPolicy__5() {
          return (function ___(__then) {
            (function ___(_) {
              __tryCatch(_, function __$StorageUtil_selectPolicy__5() {
                return StorageUtil.performStorageOperation(policySettings.getAclOperation, __cb(_, __frame, 5, 27, function ___(__0, __1) {
                  policies = __1.signedIdentifiers;
                  for (i = 0; (i < policies.length); i++) {
                    normalizePolicy(policies[i], policySettings.accessType);
                    if ((policySettings.policyName && (policies[i].Id === policySettings.policyName))) {
                      index = i;
                      break;
                    }
                    ;
                  };
                  __then();
                }, true), policySettings.resourceName, policySettings.storageOptions);
              });
            })(function ___(e, __result) {
              __catch(function __$StorageUtil_selectPolicy__5() {
                if (e) {
                  return _(new Error((util.format($("%s\rReason: %s"), e.message, e.reason))));
                }
                 else {
                  _(null, __result);
                }
                ;
              }, _);
            });
          })(function ___() {
            __tryCatch(_, function __$StorageUtil_selectPolicy__5() {
              _(null, null, true);
            });
          });
        });
      })(function ___(__e, __r, __cont) {
        (function ___(__then) {
          __tryCatch(_, function __$StorageUtil_selectPolicy__5() {
            StorageUtil.endProgress();
            __then();
          });
        })(function ___() {
          __tryCatch(_, function ___() {
            if (__cont) {
              __then();
            } else {
              _(__e, __r);
            };
          });
        });
      });
    })(function ___() {
      __tryCatch(_, function __$StorageUtil_selectPolicy__5() {
        if ((policySettings.policyName && (index < 0))) {
          return _(new Error(util.format($("The policy %s doesn't exist"), policySettings.policyName)));
        }
        ;
        return _(null, (policySettings.policyName ? policies.slice(index, (index + 1)) : policies));
      });
    });
  });
};
StorageUtil.showPolicyResults = function(policies) {
  logger.table(policies, function(row, item) {
    row.cell($("Policy Name"), item.Id);
    row.cell($("Start"), (((item.AccessPolicy && item.AccessPolicy.Start)) ? item.AccessPolicy.Start : ""));
    row.cell($("Expiry"), (((item.AccessPolicy && item.AccessPolicy.Expiry)) ? item.AccessPolicy.Expiry : ""));
    row.cell($("Permissions"), (((item.AccessPolicy && item.AccessPolicy.Permissions)) ? item.AccessPolicy.Permissions : ""));
  });
};
function operateOnPolicy(policySettings, operation, _) {
  var policies, newPolicy;
  var __frame = {
    name: "operateOnPolicy",
    line: 839
  };
  return __func(_, this, arguments, operateOnPolicy, 2, __frame, function __$operateOnPolicy() {
    policies = [];
    StorageUtil.startProgress(policySettings.tips);
    return (function ___(__then) {
      (function ___(_) {
        __tryCatch(_, function __$operateOnPolicy() {
          return (function ___(__then) {
            (function ___(_) {
              __tryCatch(_, function __$operateOnPolicy() {
                return StorageUtil.performStorageOperation(policySettings.getAclOperation, __cb(_, __frame, 4, 27, function ___(__0, __1) {
                  policies = __1.signedIdentifiers;
                  newPolicy = generatePolicy(policySettings.policyName, policySettings.policyOptions.start, policySettings.policyOptions.expiry, policySettings.policyOptions.permissions);
                  modifyPolicySet(newPolicy, policies, policySettings.accessType, operation);
                  return (function __$operateOnPolicy(__then) {
                    if ((policySettings.accessType === StorageUtil.AccessType.Container)) {
                      return StorageUtil.performStorageOperation(policySettings.setAclOperation, __cb(_, __frame, 10, 18, __then, true), policySettings.resourceName, policies, null, policySettings.storageOptions);
                    }
                     else {
                      return (function __$operateOnPolicy(__then) {
                        if ((policySettings.accessType === StorageUtil.AccessType.Queue)) {
                          return StorageUtil.performStorageOperation(policySettings.setAclOperation, __cb(_, __frame, 12, 18, __then, true), policySettings.resourceName, policies, policySettings.storageOptions);
                        }
                         else {
                          return (function __$operateOnPolicy(__then) {
                            if ((policySettings.accessType === StorageUtil.AccessType.Table)) {
                              policySettings.storageOptions.signedIdentifiers = policies;
                              return StorageUtil.performStorageOperation(policySettings.setAclOperation, __cb(_, __frame, 15, 18, __then, true), policySettings.resourceName, policySettings.storageOptions);
                            }
                             else {
                              __then();
                            }
                            ;
                          })(__then);
                        }
                        ;
                      })(__then);
                    }
                    ;
                  })(__then);
                }, true), policySettings.resourceName, policySettings.storageOptions);
              });
            })(function ___(e, __result) {
              __catch(function __$operateOnPolicy() {
                if (e) {
                  return _(new Error((util.format($("%s\rReason: %s"), e.message, e.reason))));
                }
                 else {
                  _(null, __result);
                }
                ;
              }, _);
            });
          })(function ___() {
            __tryCatch(_, function __$operateOnPolicy() {
              _(null, null, true);
            });
          });
        });
      })(function ___(__e, __r, __cont) {
        (function ___(__then) {
          __tryCatch(_, function __$operateOnPolicy() {
            StorageUtil.endProgress();
            __then();
          });
        })(function ___() {
          __tryCatch(_, function ___() {
            if (__cont) {
              __then();
            } else {
              _(__e, __r);
            };
          });
        });
      });
    })(function ___() {
      __tryCatch(_, function __$operateOnPolicy() {
        return _(null, policies);
      });
    });
  });
};
function generatePolicy(policyName, start, expiry, permissions) {
  var policy = {
    Id: policyName,
    AccessPolicy: {
    }
  };
  policy.AccessPolicy.Start = (start ? (((start === SPACE_PARAMETER) ? SPACE_PARAMETER : validation.parseDateTime(start))) : "");
  policy.AccessPolicy.Expiry = (expiry ? (((expiry === SPACE_PARAMETER) ? SPACE_PARAMETER : validation.parseDateTime(expiry))) : "");
  if (((((start && expiry) && __.isDate(policy.AccessPolicy.Start)) && __.isDate(policy.AccessPolicy.Expiry)) && (policy.AccessPolicy.Start.getTime() >= policy.AccessPolicy.Expiry.getTime()))) {
    throw new Error($("The expiry time of the specified access policy should be greater than start time"));
  }
  ;
  if ((permissions === SPACE_PARAMETER)) {
    policy.AccessPolicy.Permissions = SPACE_PARAMETER;
  }
   else {
    var sharedAccessPermissions = removeRedundantPermission(permissions);
    if (!utils.stringIsNullOrEmpty(sharedAccessPermissions)) {
      policy.AccessPolicy.Permissions = sharedAccessPermissions;
    }
     else {
      policy.AccessPolicy.Permissions = " ";
    }
    ;
  }
  ;
  return policy;
};
function normalizePolicy(policy, accessType) {
  if (!policy.AccessPolicy) {
    policy.AccessPolicy = {
    };
  }
  ;
  if (!policy.AccessPolicy.Start) {
    policy.AccessPolicy.Start = "";
  }
  ;
  if (!policy.AccessPolicy.Expiry) {
    policy.AccessPolicy.Expiry = "";
  }
  ;
  if (!policy.AccessPolicy.Permission) {
    policy.AccessPolicy.Permissions = " ";
  }
   else {
    policy.AccessPolicy.Permissions = pickupValidPermission(policy.AccessPolicy.Permission, accessType);
  }
  ;
};
function modifyPolicySet(newPolicy, existingPolicies, accessType, operation) {
  var index = -1;
  for (var i = 0; (i < existingPolicies.length); i++) {
    normalizePolicy(existingPolicies[i], accessType);
    if ((existingPolicies[i].Id === newPolicy.Id)) {
      index = i;
    }
    ;
  };
  if ((operation === StorageUtil.PolicyOperation.Create)) {
    if ((index >= 0)) {
      throw new Error(util.format($("The policy %s already exists"), newPolicy.Id));
    }
     else if ((existingPolicies.length >= StorageUtil.MaxPolicyCount)) {
      throw new Error(util.format($("A maximum of %s access policies may be set"), StorageUtil.MaxPolicyCount));
    }
     else {
      existingPolicies.push(newPolicy);
    }
    
    ;
  }
   else if ((operation === StorageUtil.PolicyOperation.Set)) {
    if ((index >= 0)) {
      if (__.isDate(newPolicy.AccessPolicy.Start)) {
        existingPolicies[index].AccessPolicy.Start = newPolicy.AccessPolicy.Start;
      }
       else if ((newPolicy.AccessPolicy.Start === SPACE_PARAMETER)) {
        existingPolicies[index].AccessPolicy.Start = "";
      }
      
      ;
      if (__.isDate(newPolicy.AccessPolicy.Expiry)) {
        existingPolicies[index].AccessPolicy.Expiry = newPolicy.AccessPolicy.Expiry;
      }
       else if ((newPolicy.AccessPolicy.Expiry === SPACE_PARAMETER)) {
        existingPolicies[index].AccessPolicy.Expiry = "";
      }
      
      ;
      if ((newPolicy.AccessPolicy.Permissions === SPACE_PARAMETER)) {
        existingPolicies[index].AccessPolicy.Permissions = " ";
        existingPolicies[index].AccessPolicy.Permission = " ";
      }
       else if ((newPolicy.AccessPolicy.Permissions != " ")) {
        existingPolicies[index].AccessPolicy.Permissions = newPolicy.AccessPolicy.Permissions;
        existingPolicies[index].AccessPolicy.Permission = newPolicy.AccessPolicy.Permissions;
      }
      
      ;
    }
     else {
      throw new Error(util.format($("The policy %s doesn't exist"), newPolicy.Id));
    }
    ;
  }
   else if ((operation === StorageUtil.PolicyOperation.Delete)) {
    if ((index >= 0)) {
      existingPolicies.splice(index, 1);
    }
     else {
      throw new Error(util.format($("The policy %s doesn't exist"), newPolicy.Id));
    }
    ;
  }
  
  
  ;
};
function getEnumValues(enumObj) {
  var values = [];
  for (var prop in enumObj) {
    values.push(enumObj[prop]);
  };
  return values;
};
function pickupValidPermission(permissions, accessType) {
  var output = "";
  var input = permissions.toLowerCase();
  var values = [];
  if ((accessType === StorageUtil.AccessType.Container)) {
    values = getEnumValues(StorageUtil.ContainerPermission);
  }
   else if ((accessType === StorageUtil.AccessType.Table)) {
    values = getEnumValues(StorageUtil.TablePermission);
  }
   else if ((accessType === StorageUtil.AccessType.Queue)) {
    values = getEnumValues(StorageUtil.QueuePermission);
  }
  
  
  ;
  for (var index = 0; (index < values.length); index++) {
    if ((input.indexOf(values[index]) != -1)) {
      output += values[index];
    }
    ;
  };
  return output;
};
function removeRedundantPermission(permissions) {
  var sharedAccessPermissions = "";
  var length = (permissions ? permissions.length : 0);
  for (var index = 0; (index < length); index++) {
    var symbol = permissions[index].toLowerCase();
    if ((-1 == sharedAccessPermissions.indexOf(symbol))) {
      sharedAccessPermissions += symbol;
    }
    ;
  };
  return sharedAccessPermissions;
};
function validatePermisionsAndOrder(permissions, allowOps) {
  var getPermissionOrder = function(symbol, values) {
    for (var index = 0; (index < values.length); index++) {
      if ((symbol.toLowerCase() === values[index])) {
        return index;
      }
      ;
    };
    return -1;
  };
  if ((permissions === SPACE_PARAMETER)) {
    return;
  }
  ;
  var current = -1;
  var values = getEnumValues(allowOps);
  for (var index = 0; (index < permissions.length); index++) {
    var symbol = permissions[index];
    validation.isValidEnumValue(symbol, values);
    var order = getPermissionOrder(symbol, values);
    if ((order >= current)) {
      current = order;
    }
     else {
      throw new Error(util.format($("Permission designations must be in the fixed order of: %s"), values));
    }
    ;
  };
};
function isFunction(func) {
  return (typeof func === "function");
};
function getStorageServiceSettings(connection) {
  var connectionString;
  var template = "DefaultEndpointsProtocol=https;AccountName=%s;AccountKey=%s";
  if ((typeof connection === "string")) {
    connectionString = connection;
  }
   else if (connection) {
    var options = connection;
    if (options.connectionString) {
      connectionString = options.connectionString;
    }
     else {
      if ((options.accountName && options.accountKey)) {
        connectionString = util.format(template, options.accountName, options.accountKey);
      }
       else {
        var sas = (options.sas || options.sourceSas);
        if ((options.accountName && sas)) {
          return getStorageServiceSettingWithSAS(options.accountName, sas);
        }
        ;
      }
      ;
    }
    ;
  }
  
  ;
  if (!connectionString) {
    connectionString = process.env[StorageUtil.ENV_CONNECTIONSTRING_NAME];
  }
  ;
  if (!connectionString) {
    if ((!process.env[StorageUtil.ENV_SDK_ACCOUNT_NAME] || !process.env[StorageUtil.ENV_SDK_ACCOUNT_KEY])) {
      throw new Error($("Please set the storage account parameters or one of the following two environment variables to use storage command. 1.AZURE_STORAGE_CONNECTION_STRING, 2. AZURE_STORAGE_ACCOUNT and AZURE_STORAGE_ACCESS_KEY"));
    }
     else {
      connectionString = util.format(template, process.env[StorageUtil.ENV_SDK_ACCOUNT_NAME], process.env[StorageUtil.ENV_SDK_ACCOUNT_KEY]);
    }
    ;
  }
  ;
  return getStorageSettings(connectionString);
};
function getStorageServiceSettingWithSAS(accountName, sasToken) {
  var service = utils._createStorageClient(profile.current.getSubscription());
  var uri = service.baseUri;
  var protocol = uri.substring(0, (uri.indexOf("/") + 2));
  var endpoint = uri.substring(uri.indexOf("."), uri.length);
  var serviceSettings = {
  };
  serviceSettings._name = accountName;
  serviceSettings._sasToken = sasToken;
  serviceSettings._blobEndpoint = {
  };
  serviceSettings._blobEndpoint.primaryHost = ((((protocol + accountName) + ".") + StorageUtil.OperationType.Blob) + endpoint);
  serviceSettings._tableEndpoint = {
  };
  serviceSettings._tableEndpoint.primaryHost = ((((protocol + accountName) + ".") + StorageUtil.OperationType.Table) + endpoint);
  serviceSettings._queueEndpoint = {
  };
  serviceSettings._queueEndpoint.primaryHost = ((((protocol + accountName) + ".") + StorageUtil.OperationType.Queue) + endpoint);
  serviceSettings._fileEndpoint = {
  };
  serviceSettings._fileEndpoint.primaryHost = ((((protocol + accountName) + ".") + StorageUtil.OperationType.File) + endpoint);
  return serviceSettings;
};
function getRestOperationTimeout(cfg) {
  var radix = 10;
  var definedTimeout = parseInt(cfg[StorageUtil.OPERATION_TIMEOUT_CONFIG_KEY_NAME], radix);
  if ((isNaN(definedTimeout) || (definedTimeout <= 0))) {
    return null;
  }
   else {
    return definedTimeout;
  }
  ;
};
function getRestConcurrency(cfg) {
  var radix = 10;
  var definedConcurrency = parseInt(cfg[StorageUtil.CONCURRENTCY_CONFIG_KEY_NAME], radix);
  if ((isNaN(definedConcurrency) || (definedConcurrency === 0))) {
    return getDefaultRestConcurrency();
  }
   else {
    return definedConcurrency;
  }
  ;
};
function getDefaultRestConcurrency() {
  var cpuCount = os.cpus().length;
  var asyncTasksPerCoreMultiplier = 1;
  return (cpuCount * asyncTasksPerCoreMultiplier);
};
module.exports = StorageUtil;