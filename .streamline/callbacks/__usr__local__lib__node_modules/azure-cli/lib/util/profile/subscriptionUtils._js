/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/
"use strict";
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch;
var __ = require("underscore");
var util = require("util");
var AccessTokenCloudCredentials = require("../authentication/accessTokenCloudCredentials");
var utils = require("../utils");
function getSubscriptions(environment, username, password, _) {
  var accessToken, asmClient, asms, all, armClient, tenants, tenantAccessToken, i, tenantId, tenantSubscriptions;
  var __frame = {
    name: "getSubscriptions",
    line: 23
  };
  return __func(_, this, arguments, getSubscriptions, 3, __frame, function __$getSubscriptions() {
    return environment.acquireToken(username, password, "", __cb(_, __frame, 1, 32, function ___(__0, __1) {
      accessToken = __1;
      username = crossCheckUserNameWithToken(username, accessToken.userId);
      return (function __$getSubscriptions(__then) {
        if (!environment.isResourceManagerEndpointDefined()) {
          asmClient = environment.getAsmClient(new AccessTokenCloudCredentials(accessToken, "notUsed"));
          return asmClient.subscriptions.list(__cb(_, __frame, 6, 39, function ___(__0, __2) {
            asms = __2.subscriptions;
            if (asms) {
              asms.forEach(function(sub) {
                sub.username = username;
              });
            }
            ;
            return _(null, asms);
          }, true));
        }
         else {
          __then();
        }
        ;
      })(function __$getSubscriptions() {
        all = [];
        armClient = environment.getArmClient(createCredential(accessToken));
        return armClient.tenants.list(__cb(_, __frame, 18, 34, function ___(__0, __3) {
          tenants = __3;
          i = 0;
          var __10 = false;
          return (function ___(__break) {
            var __more;
            var __loop = __cb(_, __frame, 0, 0, function __$getSubscriptions() {
              __more = false;
              if (__10) {
                i++;
              }
               else {
                __10 = true;
              }
              ;
              var __9 = (i < tenants.tenantIds.length);
              if (__9) {
                tenantId = tenants.tenantIds[i].tenantId;
                tenantAccessToken = undefined;
                return (function ___(__then) {
                  (function ___(_) {
                    __tryCatch(_, function __$getSubscriptions() {
                      return environment.acquireToken(username, password, tenantId, __cb(_, __frame, 24, 38, function ___(__0, __4) {
                        tenantAccessToken = __4;
                        __then();
                      }, true));
                    });
                  })(function ___(e, __result) {
                    __catch(function __$getSubscriptions() {
                      if (e) {
                        if ((e.message && e.message.match(new RegExp(".*\"error_codes\":\\[50034|50000\\].*")))) {
                          console.log(util.format("Due to current limitation, we will skip retrieving subscriptions from the external tenant '%s'", tenantId));
                        }
                         else {
                          return _(e);
                        }
                        ;
                        __then();
                      }
                       else {
                        _(null, __result);
                      }
                      ;
                    }, _);
                  });
                })(function ___() {
                  __tryCatch(_, function __$getSubscriptions() {
                    return (function __$getSubscriptions(__then) {
                      if (tenantAccessToken) {
                        return getSubscriptionsInTenant(environment, username, tenantId, tenantAccessToken, __cb(_, __frame, 33, 32, function ___(__0, __5) {
                          tenantSubscriptions = __5;
                          all = all.concat(tenantSubscriptions);
                          __then();
                        }, true));
                      }
                       else {
                        __then();
                      }
                      ;
                    })(function __$getSubscriptions() {
                      while (__more) {
                        __loop();
                      };
                      __more = true;
                    });
                  });
                });
              }
               else {
                __break();
              }
              ;
            });
            do {
              __loop();
            } while (__more);
            __more = true;
          })(function __$getSubscriptions() {
            return _(null, all);
          });
        }, true));
      });
    }, true));
  });
};
function getSubscriptionsInTenant(environment, username, tenantId, accessToken, _) {
  var armClient, subscriptions;
  var __frame = {
    name: "getSubscriptionsInTenant",
    line: 63
  };
  return __func(_, this, arguments, getSubscriptionsInTenant, 4, __frame, function __$getSubscriptionsInTenant() {
    if (!environment.isResourceManagerEndpointDefined()) {
      return _(new Error("Resource Manager endpoint is needed to retrieve subsccriptions."));
    }
    ;
    armClient = environment.getArmClient(new AccessTokenCloudCredentials(accessToken, "notUsed"));
    return armClient.subscriptions.list(__cb(_, __frame, 7, 46, function ___(__0, __1) {
      subscriptions = __1.subscriptions;
      return _(null, subscriptions.map(function(s) {
        s.activeDirectoryTenantId = tenantId;
        s.username = username;
        return s;
      }));
    }, true));
  });
};
function crossCheckUserNameWithToken(usernameFromCommandline, userIdFromToken) {
  if (utils.ignoreCaseEquals(usernameFromCommandline, userIdFromToken)) {
    return userIdFromToken;
  }
   else {
    throw new Error(util.format("invalid user name %s", usernameFromCommandline));
  }
  ;
};
function createCredential(accessToken) {
  return new AccessTokenCloudCredentials(accessToken, "notUsed");
};
__.extend(exports, {
  getSubscriptions: getSubscriptions,
  getSubscriptionsInTenant: getSubscriptionsInTenant
});