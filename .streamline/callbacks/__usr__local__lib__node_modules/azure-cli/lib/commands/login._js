/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/
"use strict";
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch;
var __ = require("underscore");
var util = require("util");
var wrap = require("wordwrap").hard(0, 75);
var adalAuth = require("../util/authentication/adalAuth");
var tokenCache = adalAuth.tokenCache;
var profile = require("../util/profile");
var utils = require("../util/utils");
var $ = utils.getLocaleString;
exports.init = function(cli) {
  var log = cli.output;
  cli.command("login").description($("Log in to an Azure subscription using Active Directory. Currently, the user can login only via Microsoft organizational account")).option("-e --environment [environment]", $("Environment to authenticate against, must support active directory")).option("-u --user <username>", $("user name or service principal ID, will prompt if not given")).option("-p --password <password>", $("user password or service principal key, will prompt if not given")).option("--service-principal", $("If given, log in as a service principal rather than a user")).option("--tenant <tenant>", $("Tenant domain or ID to log into. Only used for service principal login")).option("-q --quiet", $("do not prompt for confirmation of PII storage")).execute(function __1(options, _) {
    var piiWarningText, environmentName, environment, supportedLoginTypeText, username, tenant, haveSeenBefore, password, progress, newSubscriptions;
    var __frame = {
      name: "__1",
      line: 42
    };
    return __func(_, this, arguments, __1, 1, __frame, function __$__1() {
      piiWarningText = wrap($(((((("If you choose to continue, Azure command-line interface will cache your " + "authentication information. Note that this sensitive information will be stored in ") + "plain text on the file system of your computer at %s. Ensure that you take suitable ") + "precautions to protect your computer from unauthorized access in order to minimize the ") + "risk of that information being disclosed.") + "\nDo you wish to continue: (y/n) ")));
      environmentName = (options.environment || "AzureCloud");
      environment = profile.current.getEnvironment(environmentName);
      if (!environment) {
        return _(new Error(util.format($("Unknown environment %s"), environmentName)));
      }
      ;
      if (!options.hasOwnProperty("password")) {
        options.password = undefined;
      }
      ;
      supportedLoginTypeText = $(("Please note that currently you can login only via Microsoft organizational account or service principal. " + "For instructions on how to set them up, please read http://aka.ms/Dhf67j."));
      log.warn(supportedLoginTypeText);
      return cli.interaction.promptIfNotGiven("Username: ", options.user, __cb(_, __frame, 23, 37, function ___(__0, __1) {
        username = __1;
        tenant = options.tenant;
        return (function __$__1(__then) {
          if (options.servicePrincipal) {
            return cli.interaction.promptIfNotGiven("Tenant: ", options.tenant, __cb(_, __frame, 27, 35, function ___(__0, __2) {
              tenant = __2;
              __then();
            }, true));
          }
           else {
            __then();
          }
          ;
        })(function __$__1() {
          return (function __$__1(__then) {
            if (!tokenCache.isSecureCache) {
              haveSeenBefore = __.values(profile.current.subscriptions).some(function(s) {
                return utils.ignoreCaseEquals(username, s.username);
              });
              return (function __$__1(__then) {
                if ((!options.quiet && !haveSeenBefore)) {
                  return cli.interaction.confirm(util.format(piiWarningText, profile.defaultProfileFile), __cb(_, __frame, 36, 31, function ___(__0, __4) {
                    var __3 = !__4;
                    return (function __$__1(__then) {
                      if (__3) {
                        log.info($("Login cancelled"));
                        return _(null);
                      }
                       else {
                        __then();
                      }
                      ;
                    })(__then);
                  }, true));
                }
                 else {
                  __then();
                }
                ;
              })(__then);
            }
             else {
              __then();
            }
            ;
          })(function __$__1() {
            return cli.interaction.promptPasswordOnceIfNotGiven("Password: ", options.password, __cb(_, __frame, 43, 37, function ___(__0, __5) {
              password = __5;
              progress = cli.interaction.progress($("Authenticating..."));
              return (function ___(__then) {
                (function ___(_) {
                  __tryCatch(_, function __$__1() {
                    return (function ___(__then) {
                      (function ___(_) {
                        __tryCatch(_, function __$__1() {
                          return adalAuth.logoutUser(username, __cb(_, __frame, 47, 17, function __$__1() {
                            return environment.addAccount(username, tenant, password, __cb(_, __frame, 48, 43, function ___(__0, __6) {
                              newSubscriptions = __6;
                              if ((newSubscriptions.length > 0)) {
                                newSubscriptions[0].isDefault = true;
                                newSubscriptions.forEach(function(s) {
                                  profile.current.addSubscription(s);
                                  log.info(util.format($("Added subscription %s"), s.name));
                                  if (s.isDefault) {
                                    log.info(util.format($("Setting subscription %s as default"), s.name));
                                  }
                                  ;
                                });
                                profile.current.save();
                              }
                               else {
                                log.info(util.format($("No subscriptions found for this account")));
                              }
                              ;
                              __then();
                            }, true));
                          }, true));
                        });
                      })(function ___(e, __result) {
                        __catch(function __$__1() {
                          if (e) {
                            progress.end();
                            return _((e));
                          }
                           else {
                            _(null, __result);
                          }
                          ;
                        }, _);
                      });
                    })(function ___() {
                      __tryCatch(_, function __$__1() {
                        _(null, null, true);
                      });
                    });
                  });
                })(function ___(__e, __r, __cont) {
                  (function ___(__then) {
                    __tryCatch(_, function __$__1() {
                      progress.end();
                      __then();
                    });
                  })(function ___() {
                    __tryCatch(_, function ___() {
                      if (__cont) {
                        __then();
                      } else {
                        _(__e, __r);
                      };
                    });
                  });
                });
              })(function ___() {
                __tryCatch(_, function __$__1() {
                  _();
                });
              });
            }, true));
          });
        });
      }, true));
    });
  });
  cli.command("logout [username]").description($("Log out from Azure subscription using Active Directory. Currently, the user can log out only via Microsoft organizational account")).option("-u --username <username>", $("Required. User name used to log out from Azure Active Directory.")).execute(function __2(username, options, _) {
    var __frame = {
      name: "__2",
      line: 116
    };
    return __func(_, this, arguments, __2, 2, __frame, function __$__2() {
      if (!username) {
        return _(null, cli.missingArgument("username"));
      }
      ;
      return profile.current.logoutUser(username, __cb(_, __frame, 4, 24, function ___(__0, __1) {
        return (function __$__2(__then) {
          if (__1) {
            profile.current.save();
            log.info($("You have logged out."));
            __then();
          }
           else {
            log.info(util.format($("You are not logged in as '%s'."), username));
            __then();
          }
          ;
        })(_);
      }, true));
    });
  });
};