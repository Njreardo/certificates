/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb;
var azure = require("azure");
var __ = require("underscore");
var fs = require("fs");
var utils = require("../../util/utils");
var profile = require("../../util/profile");
var urlParser = require("url");
var $ = utils.getLocaleString;
var UserInteractor = function(cli) {
  var self = this;
  this.cli = cli;
  this.log = cli.output;
  this.progress = null;
  function logErrorAndData(err, data) {
    self.cli.interaction.formatOutput(data, function(outputData) {
      self.log.error(err);
      self.cli.interaction.logEachData("HDInsight Cluster", outputData);
    });
  };
  this.logErrorAndData = logErrorAndData;
  this.checkpoint = function() {
  
  };
  function verifyCompat(creationObject, version) {
    if (((!creationObject || !creationObject.version) || !__.isNumber(creationObject.version))) {
      return false;
    }
    ;
    if ((creationObject.version > version)) {
      return false;
    }
    ;
    if ((parseInt(creationObject.version, 10) === parseInt(version, 10))) {
      return true;
    }
    ;
    return false;
  };
  this.verifyCompat = verifyCompat;
  function logError(err) {
    self.cli.interaction.formatOutput(err, function() {
      self.log.error(err);
    });
  };
  this.logError = logError;
  function logData(msg, data) {
    self.cli.interaction.formatOutput(data, function(outputData) {
      self.cli.interaction.logEachData(msg, outputData);
    });
  };
  this.logData = logData;
  function logList(list) {
    self.cli.interaction.formatOutput(list, function(outputData) {
      if ((outputData.length === 0)) {
        self.log.info("No HDInsight clusters exist");
      }
       else {
        self.log.table(list, function(row, item) {
          row.cell("Name", item.Name);
          row.cell("Location", item.Location);
          row.cell("State", item.State);
        });
      }
      ;
    });
  };
  this.logList = logList;
  function promptIfNotGiven(message, value, _) {
    var __frame = {
      name: "promptIfNotGiven",
      line: 94
    };
    return __func(_, this, arguments, promptIfNotGiven, 2, __frame, function __$promptIfNotGiven() {
      return self.cli.interaction.promptIfNotGiven(message, value, __cb(_, __frame, 1, 32, _, true));
    });
  };
  this.promptIfNotGiven = promptIfNotGiven;
  function startProgress(message) {
    self.progress = self.cli.interaction.progress(message);
  };
  this.startProgress = startProgress;
  function endProgress() {
    self.progress.end();
  };
  this.endProgress = endProgress;
  function writeConfig(filePath, config) {
    var data = JSON.stringify(config);
    fs.writeFileSync(filePath, data);
  };
  this.writeConfig = writeConfig;
  function readConfig(filePath) {
    var data = fs.readFileSync(filePath);
    return JSON.parse(data);
  };
  this.readConfig = readConfig;
};
var ExecutionProcessor = function(cli) {
  var self = this;
  this.cli = cli;
  this.errorCount = 0;
  this.validateLocation = function(location, subscriptionId, callback) {
    var hdInsight = self.createHDInsightManagementService(subscriptionId);
    return hdInsight.validateLocation(location, function(err, response) {
      callback(null, response);
    });
  };
  this.registerLocation = function registerLocation__1(location, subscriptionId, _) {
    var hdInsight;
    var __frame = {
      name: "registerLocation__1",
      line: 139
    };
    return __func(_, this, arguments, registerLocation__1, 2, __frame, function __$registerLocation__1() {
      hdInsight = self.createHDInsightManagementService(subscriptionId);
      return hdInsight.registerLocation(location, __cb(_, __frame, 2, 21, _, true));
    });
  };
  this.filterCluster = function(response) {
    if ((self.errorCount > 25)) {
      return true;
    }
    ;
    if (!response) {
      self.errorCount++;
      return false;
    }
    ;
    if (((((response.State == "Operational") || (response.State == "Running")) || (response.State == "Error")) || ((response.Error && (response.Error != "None"))))) {
      return true;
    }
    ;
    return false;
  };
  this.filterValidation = function(response) {
    if ((self.errorCount > 25)) {
      return true;
    }
    ;
    if ((response && (response.statusCode == 200))) {
      return true;
    }
    ;
    self.errorCount++;
    return false;
  };
  this.createCluster = function(creationObject, subscriptionId, callback) {
    var hdInsight = self.createHDInsightManagementService(subscriptionId);
    return hdInsight.createCluster(creationObject, function(err, response) {
      callback(null, response);
    });
  };
  this.getCluster = function getCluster__2(clusterName, subscriptionId, _) {
    var result, cluster;
    var __frame = {
      name: "getCluster__2",
      line: 178
    };
    return __func(_, this, arguments, getCluster__2, 2, __frame, function __$getCluster__2() {
      return self.listClusters(subscriptionId, __cb(_, __frame, 1, 22, function ___(__0, __1) {
        result = __1;
        cluster = result.body.clusters.filter(function(cluster) {
          if ((!cluster || !cluster.Name)) {
            return false;
          }
          ;
          return utils.ignoreCaseEquals(cluster.Name, clusterName);
        })[0];
        return _(null, cluster);
      }, true));
    });
  };
  this.deleteCluster = function deleteCluster__3(clusterName, location, subscriptionId, _) {
    var hdInsight;
    var __frame = {
      name: "deleteCluster__3",
      line: 189
    };
    return __func(_, this, arguments, deleteCluster__3, 3, __frame, function __$deleteCluster__3() {
      hdInsight = self.createHDInsightManagementService(subscriptionId);
      return hdInsight.deleteCluster(clusterName, location, __cb(_, __frame, 2, 14, function __$deleteCluster__3() {
        _();
      }, true));
    });
  };
  this.listClusters = function listClusters__4(subscriptionId, _) {
    var hdInsight, result;
    var __frame = {
      name: "listClusters__4",
      line: 194
    };
    return __func(_, this, arguments, listClusters__4, 1, __frame, function __$listClusters__4() {
      hdInsight = self.createHDInsightManagementService(subscriptionId);
      return hdInsight.listClusters(__cb(_, __frame, 2, 27, function ___(__0, __1) {
        result = __1;
        return _(null, result);
      }, true));
    });
  };
  this.createHDInsightManagementService = function(subscription) {
    var currentSubscription = profile.getSubscription(subscription);
    var subscriptionId = currentSubscription.id;
    var pem = currentSubscription.managementCertificate;
    if (((!pem || !pem.key) || !pem.cert)) {
      throw new Error("You must use certificate authentication with hdinsight commands.");
    }
    ;
    var auth = {
      keyvalue: pem.key,
      certvalue: pem.cert
    };
    var endpoint = currentSubscription.values.managementEndpointUrl;
    if (((!endpoint || !urlParser.parse(endpoint)) || !urlParser.parse(endpoint).host)) {
      throw new Error((("The managementEndpointUrl for Subscription: '" + currentSubscription.name) + "' must be set."));
    }
    ;
    endpoint = urlParser.parse(endpoint).host;
    return azure.createHDInsightService(subscriptionId, auth, {
      host: endpoint
    });
  };
  this.doPollRequest = function doPollRequest__5(name, subscriptionId, _) {
    var result, done;
    var __frame = {
      name: "doPollRequest__5",
      line: 221
    };
    return __func(_, this, arguments, doPollRequest__5, 2, __frame, function __$doPollRequest__5() {
      self.errorCount = 0;
      return self.getCluster(name, subscriptionId, __cb(_, __frame, 2, 22, function ___(__0, __1) {
        result = __1;
        done = self.filterCluster(result);
        return (function ___(__break) {
          var __more;
          var __loop = __cb(_, __frame, 0, 0, function __$doPollRequest__5() {
            __more = false;
            var __4 = !done;
            if (__4) {
              return self.getCluster(name, subscriptionId, __cb(_, __frame, 5, 20, function ___(__0, __2) {
                result = __2;
                done = self.filterCluster(result);
                return setTimeout(__cb(_, __frame, 7, 6, function __$doPollRequest__5() {
                  while (__more) {
                    __loop();
                  };
                  __more = true;
                }, true), 1000);
              }, true));
            }
             else {
              __break();
            }
            ;
          });
          do {
            __loop();
          } while (__more);
          __more = true;
        })(_);
      }, true));
    });
  };
  this.doPollValidation = function doPollValidation__6(location, subscriptionId, _) {
    var result, done;
    var __frame = {
      name: "doPollValidation__6",
      line: 232
    };
    return __func(_, this, arguments, doPollValidation__6, 2, __frame, function __$doPollValidation__6() {
      self.errorCount = 0;
      return self.validateLocation(location, subscriptionId, __cb(_, __frame, 2, 22, function ___(__0, __1) {
        result = __1;
        done = self.filterValidation(result);
        return (function ___(__break) {
          var __more;
          var __loop = __cb(_, __frame, 0, 0, function __$doPollValidation__6() {
            __more = false;
            var __4 = !done;
            if (__4) {
              return self.validateLocation(location, subscriptionId, __cb(_, __frame, 5, 20, function ___(__0, __2) {
                result = __2;
                done = self.filterValidation(result);
                return setTimeout(__cb(_, __frame, 7, 6, function __$doPollValidation__6() {
                  while (__more) {
                    __loop();
                  };
                  __more = true;
                }, true), 1000);
              }, true));
            }
             else {
              __break();
            }
            ;
          });
          do {
            __loop();
          } while (__more);
          __more = true;
        })(_);
      }, true));
    });
  };
};
var hdInsightCommandLine = function(cli, userInteractor, executionProcessor) {
  this.cli = cli;
  this.log = cli.output;
  self = this;
  if (userInteractor) {
    this.user = userInteractor;
  }
   else {
    this.user = new UserInteractor(this.cli);
  }
  ;
  if (executionProcessor) {
    this.processor = executionProcessor;
  }
   else {
    this.processor = new ExecutionProcessor(this.cli);
  }
  ;
  this.createClusterCommand = function createClusterCommand__1(config, options, _) {
    var creationObject, existing, validate, result, cluster;
    var __frame = {
      name: "createClusterCommand__1",
      line: 262
    };
    return __func(_, this, arguments, createClusterCommand__1, 2, __frame, function __$createClusterCommand__1() {
      creationObject = {
      };
      if (config) {
        creationObject = self.user.readConfig(config);
      }
      ;
      if (options.clusterName) {
        creationObject.name = options.clusterName;
      }
      ;
      if (options.nodes) {
        creationObject.nodes = options.nodes;
      }
      ;
      if (options.location) {
        creationObject.location = options.location;
      }
      ;
      if (options.storageAccountName) {
        creationObject.defaultStorageAccountName = options.storageAccountName;
      }
      ;
      if (options.storageAccountKey) {
        creationObject.defaultStorageAccountKey = options.storageAccountKey;
      }
      ;
      if (options.storageContainer) {
        creationObject.defaultStorageContainer = options.storageContainer;
      }
      ;
      if (options.username) {
        creationObject.user = options.username;
      }
      ;
      if (options.clusterPassword) {
        creationObject.password = options.clusterPassword;
      }
      ;
      return self.user.promptIfNotGiven($("Cluster name: "), creationObject.name, __cb(_, __frame, 31, 36, function ___(__0, __1) {
        creationObject.name = __1;
        return self.user.promptIfNotGiven($("Nodes: "), creationObject.nodes, __cb(_, __frame, 32, 46, function ___(__0, __2) {
          creationObject.nodes = parseInt(__2, 10);
          return self.user.promptIfNotGiven($("Location: "), creationObject.location, __cb(_, __frame, 33, 40, function ___(__0, __3) {
            creationObject.location = __3;
            return self.user.promptIfNotGiven($("Storage acount name: "), creationObject.defaultStorageAccountName, __cb(_, __frame, 34, 57, function ___(__0, __4) {
              creationObject.defaultStorageAccountName = __4;
              return self.user.promptIfNotGiven($("Storage account key: "), creationObject.defaultStorageAccountKey, __cb(_, __frame, 35, 56, function ___(__0, __5) {
                creationObject.defaultStorageAccountKey = __5;
                return self.user.promptIfNotGiven($("Storage container: "), creationObject.defaultStorageContainer, __cb(_, __frame, 36, 55, function ___(__0, __6) {
                  creationObject.defaultStorageContainer = __6;
                  return self.user.promptIfNotGiven($("Username: "), creationObject.user, __cb(_, __frame, 37, 36, function ___(__0, __7) {
                    creationObject.user = __7;
                    return self.user.promptIfNotGiven($("Password: "), creationObject.password, __cb(_, __frame, 38, 40, function ___(__0, __8) {
                      creationObject.password = __8;
                      self.user.startProgress($("Creating HDInsight Cluster"));
                      return self.processor.getCluster(creationObject.name, options.subscription, __cb(_, __frame, 41, 34, function ___(__0, __9) {
                        existing = __9;
                        if (existing) {
                          self.user.endProgress();
                          self.user.logErrorAndData($("The requested cluster already exists"), existing);
                          return _(null);
                        }
                        ;
                        return self.processor.validateLocation(creationObject.location, options.subscription, __cb(_, __frame, 48, 34, function ___(__0, __10) {
                          validate = __10;
                          return (function __$createClusterCommand__1(__then) {
                            if ((validate.statusCode == 404)) {
                              return self.processor.registerLocation(creationObject.location, options.subscription, __cb(_, __frame, 50, 21, function __$createClusterCommand__1() {
                                return self.processor.doPollValidation(creationObject.location, options.subscription, __cb(_, __frame, 51, 21, __then, true));
                              }, true));
                            }
                             else {
                              __then();
                            }
                            ;
                          })(function __$createClusterCommand__1() {
                            return self.processor.createCluster(creationObject, options.subscription, __cb(_, __frame, 53, 32, function ___(__0, __11) {
                              result = __11;
                              if (((result.statusCode != 202) && (result.statusCode != 200))) {
                                self.user.logError($("The cluster could not be created"));
                                self.user.logError($("The request failed. Please contact support for more information"));
                                return _(null);
                              }
                              ;
                              return self.processor.doPollRequest(creationObject.name, options.subscription, __cb(_, __frame, 59, 19, function __$createClusterCommand__1() {
                                return self.processor.getCluster(creationObject.name, options.subscription, __cb(_, __frame, 60, 33, function ___(__0, __12) {
                                  cluster = __12;
                                  self.user.endProgress();
                                  if (!cluster) {
                                    self.user.logError($("The cluster could not be created"));
                                    self.user.logError($("The request failed. Please contact support for more information"));
                                    return _(null);
                                  }
                                   else {
                                    if ((cluster.Error && (cluster.Error != "None"))) {
                                      self.user.logErrorAndData($("Unable to create cluster"), cluster);
                                      return _(null);
                                    }
                                     else {
                                      self.user.logData($("HDInsight Cluster"), cluster);
                                    }
                                    ;
                                  }
                                  ;
                                  _();
                                }, true));
                              }, true));
                            }, true));
                          });
                        }, true));
                      }, true));
                    }, true));
                  }, true));
                }, true));
              }, true));
            }, true));
          }, true));
        }, true));
      }, true));
    });
  };
  this.showClusterCommand = function showClusterCommand__2(clusterName, options, _) {
    var cluster;
    var __frame = {
      name: "showClusterCommand__2",
      line: 340
    };
    return __func(_, this, arguments, showClusterCommand__2, 2, __frame, function __$showClusterCommand__2() {
      return self.user.promptIfNotGiven($("Cluster name: "), clusterName, __cb(_, __frame, 1, 28, function ___(__0, __1) {
        clusterName = __1;
        self.user.startProgress($("Getting HDInsight cluster"));
        return self.processor.getCluster(clusterName, options.subscription, __cb(_, __frame, 3, 33, function ___(__0, __2) {
          cluster = __2;
          self.user.endProgress();
          if (!cluster) {
            self.user.logError($("Cluster not found"));
          }
           else {
            self.user.logData($("HDInsight Cluster"), cluster);
          }
          ;
          _();
        }, true));
      }, true));
    });
  };
  this.listClustersCommand = function listClustersCommand__3(options, _) {
    var result, clusters;
    var __frame = {
      name: "listClustersCommand__3",
      line: 354
    };
    return __func(_, this, arguments, listClustersCommand__3, 1, __frame, function __$listClustersCommand__3() {
      self.user.startProgress($("Getting HDInsight servers"));
      return self.processor.listClusters(options.subscription, __cb(_, __frame, 2, 32, function ___(__0, __1) {
        result = __1;
        self.user.endProgress();
        clusters = [];
        if (result.body.clusters) {
          clusters = result.body.clusters;
        }
        ;
        self.user.logList(clusters);
        _();
      }, true));
    });
  };
  this.deleteClusterCommand = function deleteClusterCommand__4(clusterName, options, _) {
    var cluster;
    var __frame = {
      name: "deleteClusterCommand__4",
      line: 367
    };
    return __func(_, this, arguments, deleteClusterCommand__4, 2, __frame, function __$deleteClusterCommand__4() {
      return self.user.promptIfNotGiven($("Cluster name: "), clusterName, __cb(_, __frame, 1, 28, function ___(__0, __1) {
        clusterName = __1;
        self.user.startProgress($("Removing HDInsight Cluster"));
        return self.processor.getCluster(clusterName, options.subscription, __cb(_, __frame, 4, 33, function ___(__0, __2) {
          cluster = __2;
          return (function __$deleteClusterCommand__4(__then) {
            if (cluster) {
              return self.processor.deleteCluster(cluster.Name, cluster.Location, options.subscription, __cb(_, __frame, 6, 21, __then, true));
            }
             else {
              __then();
            }
            ;
          })(function __$deleteClusterCommand__4() {
            self.user.endProgress();
            _();
          });
        }, true));
      }, true));
    });
  };
  var emptyCreationObject = {
    version: 1
  };
  this.createConfigCommand = function createConfigCommand__5(file, options, _) {
    var creationObject;
    var __frame = {
      name: "createConfigCommand__5",
      line: 379
    };
    return __func(_, this, arguments, createConfigCommand__5, 2, __frame, function __$createConfigCommand__5() {
      return self.user.promptIfNotGiven($("Config File Path: "), file, __cb(_, __frame, 1, 21, function ___(__0, __1) {
        file = __1;
        creationObject = emptyCreationObject;
        self.user.writeConfig(file, creationObject);
        _();
      }, true));
    });
  };
  this.showConfigCommand = function showConfigCommand__6(file, options, _) {
    var creationObject;
    var __frame = {
      name: "showConfigCommand__6",
      line: 386
    };
    return __func(_, this, arguments, showConfigCommand__6, 2, __frame, function __$showConfigCommand__6() {
      return self.user.promptIfNotGiven($("Config File Path: "), file, __cb(_, __frame, 1, 21, function ___(__0, __1) {
        file = __1;
        creationObject = self.user.readConfig(file);
        if (!creationObject) {
          self.user.logError($("Could not read config data"));
        }
         else {
          self.user.logData($("HDInsight Config"), creationObject);
        }
        ;
        _();
      }, true));
    });
  };
  this.setConfigCommand = function setConfigCommand__7(file, options, _) {
    var creationObject;
    var __frame = {
      name: "setConfigCommand__7",
      line: 398
    };
    return __func(_, this, arguments, setConfigCommand__7, 2, __frame, function __$setConfigCommand__7() {
      return self.user.promptIfNotGiven($("Config File Path: "), file, __cb(_, __frame, 1, 21, function ___(__0, __1) {
        file = __1;
        return self.user.promptIfNotGiven($("Cluster name: "), options.clusterName, __cb(_, __frame, 2, 28, function ___(__0, __2) {
          clusterName = __2;
          return self.user.promptIfNotGiven($("Nodes: "), options.nodes, __cb(_, __frame, 3, 22, function ___(__0, __3) {
            nodes = __3;
            return self.user.promptIfNotGiven($("Location: "), options.location, __cb(_, __frame, 4, 25, function ___(__0, __4) {
              location = __4;
              return self.user.promptIfNotGiven($("Storage acount name: "), options.storageAccountName, __cb(_, __frame, 5, 35, function ___(__0, __5) {
                storageAccountName = __5;
                return self.user.promptIfNotGiven($("Storage account key: "), options.storageAccountKey, __cb(_, __frame, 6, 34, function ___(__0, __6) {
                  storageAccountKey = __6;
                  return self.user.promptIfNotGiven($("Storage container: "), options.storageContainer, __cb(_, __frame, 7, 33, function ___(__0, __7) {
                    storageContainer = __7;
                    return self.user.promptIfNotGiven($("Username: "), options.username, __cb(_, __frame, 8, 25, function ___(__0, __8) {
                      username = __8;
                      return self.user.promptIfNotGiven($("Password: "), options.clusterPassword, __cb(_, __frame, 9, 32, function ___(__0, __9) {
                        clusterPassword = __9;
                        creationObject = self.user.readConfig(file);
                        if (!creationObject) {
                          self.user.logError($("Could not read config data"));
                        }
                         else {
                          if (!self.user.verifyCompat(creationObject, emptyCreationObject.version)) {
                            self.user.logError($("The version of this configuration is not compatible with this version of the tools"));
                          }
                           else {
                            creationObject.name = clusterName;
                            creationObject.location = location;
                            creationObject.defaultStorageAccountName = storageAccountName;
                            creationObject.defaultStorageAccountKey = storageAccountKey;
                            creationObject.defaultStorageContainer = storageContainer;
                            creationObject.user = username;
                            creationObject.password = clusterPassword;
                            creationObject.nodes = parseInt(nodes, 10);
                            self.user.writeConfig(file, creationObject);
                          }
                          ;
                        }
                        ;
                        _();
                      }, true));
                    }, true));
                  }, true));
                }, true));
              }, true));
            }, true));
          }, true));
        }, true));
      }, true));
    });
  };
  this.setConfigMetastoreCommand = function setConfigMetastoreCommand__8(file, type, server, database, user, password, options, _) {
    var creationObject;
    var __frame = {
      name: "setConfigMetastoreCommand__8",
      line: 431
    };
    return __func(_, this, arguments, setConfigMetastoreCommand__8, 7, __frame, function __$setConfigMetastoreCommand__8() {
      return self.user.promptIfNotGiven($("Config File Path: "), file, __cb(_, __frame, 1, 21, function ___(__0, __1) {
        file = __1;
        return self.user.promptIfNotGiven($("Metastore Type: "), type, __cb(_, __frame, 2, 21, function ___(__0, __2) {
          type = __2;
          return self.user.promptIfNotGiven($("Metastore Server: "), server, __cb(_, __frame, 3, 23, function ___(__0, __3) {
            server = __3;
            return self.user.promptIfNotGiven($("Metastore Database: "), database, __cb(_, __frame, 4, 25, function ___(__0, __4) {
              database = __4;
              return self.user.promptIfNotGiven($("Metastore user: "), user, __cb(_, __frame, 5, 21, function ___(__0, __5) {
                user = __5;
                return self.user.promptIfNotGiven($("Metastore password: "), password, __cb(_, __frame, 6, 25, function ___(__0, __6) {
                  password = __6;
                  creationObject = self.user.readConfig(file);
                  if (!creationObject) {
                    self.user.logError($("Could not read config data"));
                  }
                   else {
                    if (!self.user.verifyCompat(creationObject, emptyCreationObject.version)) {
                      self.user.logError($("The version of this configuration is not compatible with this version of the tools"));
                    }
                     else {
                      creationObject[(type + "Metastore")] = {
                        server: server,
                        database: database,
                        user: user,
                        password: password
                      };
                      self.user.writeConfig(file, creationObject);
                    }
                    ;
                  }
                  ;
                  _();
                }, true));
              }, true));
            }, true));
          }, true));
        }, true));
      }, true));
    });
  };
  this.removeConfigMetastoreCommand = function removeConfigMetastoreCommand__9(file, type, options, _) {
    var creationObject;
    var __frame = {
      name: "removeConfigMetastoreCommand__9",
      line: 459
    };
    return __func(_, this, arguments, removeConfigMetastoreCommand__9, 3, __frame, function __$removeConfigMetastoreCommand__9() {
      return self.user.promptIfNotGiven($("Config File Path: "), file, __cb(_, __frame, 1, 21, function ___(__0, __1) {
        file = __1;
        return self.user.promptIfNotGiven($("Metastore Type: "), type, __cb(_, __frame, 2, 21, function ___(__0, __2) {
          type = __2;
          creationObject = self.user.readConfig(file);
          if (!creationObject) {
            self.user.logError($("Could not read config data"));
          }
           else {
            if (!self.user.verifyCompat(creationObject, emptyCreationObject.version)) {
              self.user.logError($("The version of this configuration is not compatible with this version of the tools"));
            }
             else {
              creationObject[(type + "Metastore")] = undefined;
              self.user.writeConfig(file, creationObject);
            }
            ;
          }
          ;
          _();
        }, true));
      }, true));
    });
  };
  this.addConfigStorageCommand = function addConfigStorageCommand__10(file, account, key, options, _) {
    var creationObject, accounts;
    var __frame = {
      name: "addConfigStorageCommand__10",
      line: 478
    };
    return __func(_, this, arguments, addConfigStorageCommand__10, 4, __frame, function __$addConfigStorageCommand__10() {
      return self.user.promptIfNotGiven($("Config File Path: "), file, __cb(_, __frame, 1, 21, function ___(__0, __1) {
        file = __1;
        return self.user.promptIfNotGiven($("Storage Account Name: "), account, __cb(_, __frame, 2, 28, function ___(__0, __2) {
          accountName = __2;
          return self.user.promptIfNotGiven($("Storage Account Key: "), key, __cb(_, __frame, 3, 20, function ___(__0, __3) {
            key = __3;
            creationObject = self.user.readConfig(file);
            if (!creationObject) {
              self.user.logError($("Could not read config data"));
            }
             else {
              if (!self.user.verifyCompat(creationObject, emptyCreationObject.version)) {
                self.user.logError($("The version of this configuration is not compatible with this version of the tools"));
              }
               else {
                accounts = [];
                if (creationObject.additionalStorageAccounts) {
                  creationObject.additionalStorageAccounts.forEach(function(account) {
                    if ((account.name != accountName)) {
                      accounts.push(account);
                    }
                    ;
                  });
                }
                ;
                accounts.push({
                  name: accountName,
                  key: key
                });
                creationObject.additionalStorageAccounts = accounts;
                self.user.writeConfig(file, creationObject);
              }
              ;
            }
            ;
            _();
          }, true));
        }, true));
      }, true));
    });
  };
  this.removeConfigStorageCommand = function removeConfigStorageCommand__11(file, account, options, _) {
    var creationObject, accounts;
    var __frame = {
      name: "removeConfigStorageCommand__11",
      line: 505
    };
    return __func(_, this, arguments, removeConfigStorageCommand__11, 3, __frame, function __$removeConfigStorageCommand__11() {
      return self.user.promptIfNotGiven($("Config File Path: "), file, __cb(_, __frame, 1, 21, function ___(__0, __1) {
        file = __1;
        return self.user.promptIfNotGiven($("Storage Account Name: "), account, __cb(_, __frame, 2, 28, function ___(__0, __2) {
          accountName = __2;
          creationObject = self.user.readConfig(file);
          if (!creationObject) {
            self.user.logError($("Could not read config data"));
          }
           else {
            if (!self.user.verifyCompat(creationObject, emptyCreationObject.version)) {
              self.user.logError($("The version of this configuration is not compatible with this version of the tools"));
            }
             else {
              accounts = [];
              if (creationObject.additionalStorageAccounts) {
                creationObject.additionalStorageAccounts.forEach(function(account) {
                  if ((account.name != accountName)) {
                    accounts.push(account);
                  }
                  ;
                });
              }
              ;
              creationObject.additionalStorageAccounts = accounts;
              self.user.writeConfig(file, creationObject);
            }
            ;
          }
          ;
          _();
        }, true));
      }, true));
    });
  };
};
module.exports = hdInsightCommandLine;
hdInsightCommandLine.init = function(cli) {
  var self = new hdInsightCommandLine(cli);
  var hdInsight = cli.category("hdinsight").description($("Commands to manage your HDInsight accounts"));
  var cluster = hdInsight.category("cluster").description($("Commands to manage your HDInsight clusters"));
  cluster.command("create [config]").description($("Create a cluster")).usage("[options] [config]").option("--config <config>", $("the config file for cluster creation")).option("--clusterName <clusterName>", $("the HdInsight cluster name")).option("--storageAccountName <storageAccountName>", $("the storage account to use for HDInsight storage")).option("--storageAccountKey <storageAccountKey>", $("the key to the storage account to use for HDInsight storage")).option("--storageContainer <storageContainer>", $("the container in the storage account to use for HDInsight default storage")).option("--nodes <nodes>", $("the number of data nodes to use for the cluster")).option("--location <location>", $("the data center location for the cluster")).option("--username <username>", $("the user name to use for the cluster")).option("--clusterPassword <clusterPassword>", $("the password to use for the cluster")).option("-s, --subscription <id>", $("the subscription id")).execute(self.createClusterCommand);
  cluster.command("delete [clusterName]").description($("Delete a cluster")).usage("[options] <clusterName>").option("--clusterName <clusterName>", $("the HdInsight cluster name")).option("-s, --subscription <id>", $("the subscription id")).execute(self.deleteClusterCommand);
  cluster.command("show [clusterName]").description($("Show cluster details")).usage("[options] <clusterName>").option("--clusterName <clusterName>", $("the HdInsight cluster name")).option("-s, --subscription <id>", $("the subscription id")).execute(self.showClusterCommand);
  cluster.command("list").description($("List the clusters")).option("-s, --subscription <id>", $("the subscription id")).execute(self.listClustersCommand);
  var config = cluster.category("config").description($("Commands to manage your HDInsight configuration file"));
  config.command("create [file]").usage("[options] [file]").option("--file <path>", $("the path to the config file for cluster creation")).description($("Create an HDInsight configuration file")).execute(self.createConfigCommand);
  config.command("show [file]").usage("[options] [file]").option("--file <path>", $("the path to the config file for cluster creation")).description($("Show the contents of an HDInsight configuration file")).execute(self.showConfigCommand);
  config.command("set [file]").description($("Update the basic parameters for a cluster configuration")).usage("[options] [file]").option("--file <path>", $("the path to the config file for cluster creation")).option("--clusterName <clusterName>", $("the HdInsight cluster name")).option("--storageAccountName <storageAccountName>", $("the storage account to use for HDInsight storage")).option("--storageAccountKey <storageAccountKey>", $("the key to the storage account to use for HDInsight storage")).option("--storageContainer <storageContainer>", $("the container in the storage account to use for HDInsight default storage")).option("--nodes <nodes>", $("the number of data nodes to use for the cluster")).option("--location <location>", $("the data center location for the cluster")).option("--username <username>", $("the user name to use for the cluster")).option("--clusterPassword <clusterPassword>", $("the password to use for the cluster")).option("-s, --subscription <id>", $("the subscription id")).execute(self.setConfigCommand);
  var storage = config.category("storage").description($("Commands to manage your HDInsight storage accounts in a configuration file"));
  storage.command("add [file] [storageAccountName] [storageAccountKey]").description($("Add a storage account to the cluster configuration")).usage("[options] [file] [storageAccountName] [storageAccountKey]").option("--storageAccountName <storageAccountName>", $("the storage account to use for HDInsight storage")).option("--storageAccountKey <storageAccountKey>", $("the key to the storage account to use for HDInsight storage")).execute(self.addConfigStorageCommand);
  storage.command("remove [file] [storageAccountName]").description($("Remove a storage account from the cluster configuration")).usage("[options] [file] [storageAccountName]").option("--storageAccountName <storageAccountName>", $("the storage account to use for HDInsight storage")).execute(self.removeConfigStorageCommand);
  var metastore = config.category("metastore").description($("Commands to manage your HDInsight metastore accounts in a configuration file"));
  metastore.command("set [file] [metastoreType] [server] [database] [user] [metastorePassword]").description($("Update a metastore in the cluster configuration")).usage("[options] [file] [metastoreType] [server] [database] [user] [metastorePassword]").option("--type <metastoreType>", $("the type of metastore to set (example: hive, oozie)")).option("--server <server>", $("the name of the sql server for the metastore")).option("--database <database>", $("the name of the database on the sql server")).option("--user <userName>", $("the user name to use when connecting to the sql server")).option("--metastorePassword <metastorePassword>", $("the password to use when connecting to the sql server")).execute(self.setConfigMetastoreCommand);
  metastore.command("clear [file] [metastoreType]").description($("Clear a metastore in the cluster configuration")).usage("[options] [file] [metastoreType]").option("--type <metastoreType>", $("the type of metastore to clear (example: hive, oozie)")).execute(self.clearConfigMetastoreCommand);
};