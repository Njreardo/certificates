/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch;
var crypto = require("crypto");
var fs = require("fs");
var util = require("util");
var profile = require("../../util/profile");
var utils = require("../../util/utils");
var VNetUtil = require("./network/vnetUtil");
var $ = utils.getLocaleString;
exports.init = function(cli) {
  var network = cli.category("network").description($("Commands to manage your Networks"));
  var log = cli.output;
  network.command("export <file-path>").usage("[options] <file-path>").description($("Export the current Network configuration to a file")).option("-s, --subscription <id>", $("the subscription id")).execute(exportNetworkConfig);
  network.command("import <file-path>").usage("[options] <file-path>").description($("Set the Network configuration from a json file")).option("-s, --subscription <id>", $("the subscription id")).execute(importNetworkConfig);
  var dnsserver = network.category("dnsserver").description($("Commands to manage your DNS Servers"));
  dnsserver.command("list").usage("[options]").description($("List DNS Servers registered in current Network")).option("-s, --subscription <id>", $("the subscription id")).execute(listDNSServers);
  dnsserver.command("register [dnsIp]").usage("[options] <dnsIp>").description($("Register a DNS Server with current Network")).option("-p, --dns-ip <name>", $("the IP address of the DNS server entry")).option("-i, --dns-id <name>", $("the name identifier of the DNS server entry")).option("-s, --subscription <id>", $("the subscription id")).execute(registerDNSServer);
  dnsserver.command("unregister [dnsIp]").usage("[options] <dnsIp>").description($("Unregister a DNS Server registered in the current Azure Network by dns-id or dns-ip")).option("-p, --dns-ip <name>", $("the IP address of the DNS server entry")).option("-i, --dns-id <name>", $("the name identifier of the DNS server entry")).option("-q, --quiet", $("quiet mode, do not ask for unregister confirmation")).option("-s, --subscription <id>", $("the subscription id")).execute(unregisterDNSServer);
  var vnet = network.category("vnet").description($("Commands to manage your Virtual Networks"));
  vnet.command("list").usage("[options]").description($("List your Azure Virtual Networks")).option("-s, --subscription <id>", $("the subscription id")).execute(listVNet);
  vnet.command("show [vnet]").usage("<vnet> [options]").description($("Show details about a Virtual Network")).option("--vnet <vnet>", $("the name of the virtual network")).option("-s, --subscription <id>", $("the subscription id")).execute(showVNet);
  vnet.command("delete [vnet]").usage("[options] <vnet>").description($("Delete a virtual network")).option("--vnet <vnet>", $("the name of the virtual network")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <id>", $("the subscription id")).execute(deleteVNet);
  vnet.command("create [vnet]").usage("[options] <vnet>").description($("Create a Virtual Network")).option("--vnet <vnet>", $("the name of the virtual network")).option("-e, --address-space <ipv4>", $("the address space for the virtual network")).option("-m, --max-vm-count <number>", $("the maximum number of VMs in the address space")).option("-i, --cidr <number>", $("the address space network mask in CIDR format")).option("-p, --subnet-start-ip <ipv4>", $("the start IP address of subnet")).option("-n, --subnet-name <name>", $("the name for the subnet")).option("-c, --subnet-vm-count <number>", $("the maximum number of VMs in the subnet")).option("-r, --subnet-cidr <number>", $("the subnet network mask in CIDR format")).option("-l, --location <name>", $("the location")).option("-f, --create-new-affinity-group", $("creates a new affinity group at the location specified in --location")).option("-a, --affinity-group <name>", $("the affinity group")).option("-d, --dns-server-id <dns-id>", $("the name identifier of the DNS server")).option("-s, --subscription <id>", $("the subscription id")).execute(createVNet);
  var staticIP = vnet.category("static-ip").description($("Commands to manage your Virtual Network static IP addresses"));
  staticIP.command("check [vnet] [ipAddress]").usage("[options] <vnet> <ip-address>").description($("Check the availability of a static IP address")).option("-s, --subscription <id>", $("the subscription id")).execute(checkStaticIP);
  var reservedIP = network.category("reserved-ip").description($("Commands to manage your reserved public Virtual IP addresses"));
  reservedIP.command("list").usage("[options]").description($("List your Azure reserved IP addresses")).option("-s, --subscription <id>", $("the subscription id")).execute(listReservedIP);
  reservedIP.command("show <name>").usage("[options] <name>").description($("Show details about a reserved IP address")).option("-s, --subscription <id>", $("the subscription id")).execute(showReservedIP);
  reservedIP.command("delete <name>").usage("[options] <name>").description($("Delete a reserved IP address")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <id>", $("the subscription id")).execute(deleteReservedIP);
  reservedIP.command("create <name> <location>").usage("[options] <name> <location>").description($("Create a reserved IP address")).option("-e, --label <label>", $("the reserved IP address label")).option("-s, --subscription <id>", $("the subscription id")).execute(createReservedIP);
  function exportNetworkConfig(filePath, options, cmdCallback) {
    getNetworkConfig(options, function(error, networkConfiguration) {
      if (!error) {
        delete networkConfiguration["$"];
        var networkConfigAsString = JSON.stringify(networkConfiguration);
        fs.writeFile(filePath, networkConfigAsString, function(err) {
          if (err) {
            return cmdCallback(err);
          }
           else {
            log.info(util.format($("Network Configuration exported to %s"), filePath));
            return cmdCallback();
          }
          ;
        });
      }
       else {
        return cmdCallback(error);
      }
      ;
    });
  };
  function importNetworkConfig(filePath, options, cmdCallback) {
    log.verbose(util.format($("Loading configuration file: %s"), filePath));
    var xmlString = fs.readFileSync(filePath, "utf8");
    var networkConfiguration = JSON.parse(xmlString);
    var progress = cli.interaction.progress($("Setting Network Configuration"));
    setNetworkConfig(options, networkConfiguration, function(error) {
      progress.end();
      return cmdCallback(error);
    });
  };
  function listDNSServers(options, cmdCallback) {
    getNetworkConfig(options, function(error, networkConfiguration) {
      if (error) {
        return cmdCallback(error);
      }
       else {
        var vnetConfiguration = networkConfiguration.VirtualNetworkConfiguration;
        if ((vnetConfiguration.Dns.DnsServers.length > 0)) {
          log.table(vnetConfiguration.Dns.DnsServers, function(row, item) {
            row.cell($("DNS Server ID"), item.Name);
            row.cell($("DNS Server IP"), item.IPAddress);
          });
        }
         else {
          if (log.format().json) {
            log.json([]);
          }
           else {
            log.warn($("No DNS servers found"));
          }
          ;
        }
        ;
        return cmdCallback();
      }
      ;
    });
  };
  function registerDNSServer(dnsIp, options, _) {
    var dnsId, dnsIdPattern, vnetUtil, parsedDnsIp, networkConfiguration, vnetConfiguration, i, progress;
    var __frame = {
      name: "registerDNSServer",
      line: 208
    };
    return __func(_, this, arguments, registerDNSServer, 2, __frame, function __$registerDNSServer() {
      return cli.interaction.promptIfNotGiven($("DNS IP: "), dnsIp, __cb(_, __frame, 1, 28, function ___(__0, __1) {
        dnsIp = __1;
        dnsId = null;
        if (options.dnsId) {
          dnsIdPattern = /^[a-z][a-z0-9\-]{0,19}$/i;
          if ((dnsIdPattern.test(options.dnsId) === false)) {
            return _(new Error($("--dns-id can contain only letters, numbers and hyphens with no more than 20 characters. It must start with a letter")));
          }
          ;
          dnsId = options.dnsId;
        }
         else {
          dnsId = util.format($("DNS-%s"), crypto.randomBytes(8).toString("hex"));
        }
        ;
        vnetUtil = new VNetUtil();
        parsedDnsIp = vnetUtil.parseIPv4(dnsIp);
        if (parsedDnsIp.error) {
          return _(new Error(parsedDnsIp.error));
        }
        ;
        dnsIp = vnetUtil.octectsToString(parsedDnsIp.octects);
        return getNetworkConfig(options, __cb(_, __frame, 22, 31, function ___(__0, __2) {
          networkConfiguration = __2;
          if (!networkConfiguration.VirtualNetworkConfiguration) {
            networkConfiguration.VirtualNetworkConfiguration = {
            };
          }
          ;
          vnetConfiguration = networkConfiguration.VirtualNetworkConfiguration;
          if (!vnetConfiguration.Dns) {
            vnetConfiguration.Dns = {
            };
          }
          ;
          if (!vnetConfiguration.Dns.DnsServers) {
            vnetConfiguration.Dns.DnsServers = [];
          }
          ;
          for (i = 0; (i < vnetConfiguration.Dns.DnsServers.length); i++) {
            if (utils.ignoreCaseEquals(vnetConfiguration.Dns.DnsServers[i].Name, dnsId)) {
              return _(new Error(util.format($("A DNS Server with name identifier %s already exists"), dnsId)));
            }
            ;
            if ((vnetConfiguration.Dns.DnsServers[i].IPAddress === dnsIp)) {
              return _(new Error(util.format($("A DNS Server with ip address %s already exists"), dnsIp)));
            }
            ;
          };
          vnetConfiguration.Dns.DnsServers.push({
            Name: dnsId,
            IPAddress: dnsIp
          });
          if (!options.dnsId) {
            log.info(util.format($("Name Identifier for the DNS Server is %s"), dnsId));
          }
          ;
          progress = cli.interaction.progress($("Registering DNS Server"));
          return (function ___(__then) {
            (function ___(_) {
              __tryCatch(_, function __$registerDNSServer() {
                return setNetworkConfig(options, networkConfiguration, __cb(_, __frame, 57, 6, function __$registerDNSServer() {
                  _(null, null, true);
                }, true));
              });
            })(function ___(__e, __r, __cont) {
              (function ___(__then) {
                __tryCatch(_, function __$registerDNSServer() {
                  progress.end();
                  __then();
                });
              })(function ___() {
                __tryCatch(_, function ___() {
                  if (__cont) {
                    __then();
                  } else {
                    _(__e, __r);
                  };
                });
              });
            });
          })(function ___() {
            __tryCatch(_, function __$registerDNSServer() {
              _();
            });
          });
        }, true));
      }, true));
    });
  };
  function unregisterDNSServer(dnsIp, options, _) {
    var filterProperty, filterValue, vnetUtil, parsedDnsIP, networkConfiguration, vnetConfiguration, dnsEntryIndex, i, dnsNameIdentifier, dnsIPAddress, dnsIdAndIp, j, site, k, progress;
    var __frame = {
      name: "unregisterDNSServer",
      line: 271
    };
    return __func(_, this, arguments, unregisterDNSServer, 2, __frame, function __$unregisterDNSServer() {
      if ((options.dnsId && dnsIp)) {
        return _(new Error($("Either --dns-id or --dns-ip must be present not both")));
      }
      ;
      return (function __$unregisterDNSServer(__then) {
        if ((!options.dnsId && !dnsIp)) {
          return cli.interaction.promptIfNotGiven($("DNS IP: "), dnsIp, __cb(_, __frame, 6, 30, function ___(__0, __2) {
            dnsIp = __2;
            __then();
          }, true));
        }
         else {
          __then();
        }
        ;
      })(function __$unregisterDNSServer() {
        if ((options.dnsId && dnsIp)) {
          return _(new Error($("Either --dns-id or --dns-ip must be present not both")));
        }
        ;
        filterProperty = null;
        filterValue = null;
        if (options.dnsId) {
          filterProperty = "Name";
          filterValue = options.dnsId;
        }
         else {
          filterProperty = "IPAddress";
          vnetUtil = new VNetUtil();
          parsedDnsIP = vnetUtil.parseIPv4(dnsIp, "--dns-ip");
          if (parsedDnsIP.error) {
            return _(new Error(parsedDnsIP.error));
          }
          ;
          filterValue = vnetUtil.octectsToString(parsedDnsIP.octects);
        }
        ;
        return getNetworkConfig(options, __cb(_, __frame, 30, 31, function ___(__0, __3) {
          networkConfiguration = __3;
          vnetConfiguration = networkConfiguration.VirtualNetworkConfiguration;
          if ((vnetConfiguration.Dns.DnsServers.length === 0)) {
            return _(new Error($("No DNS Servers registered with the Network")));
          }
          ;
          dnsEntryIndex = -1;
          for (i = 0; (i < vnetConfiguration.Dns.DnsServers.length); i++) {
            if ((vnetConfiguration.Dns.DnsServers[i][filterProperty].toLowerCase() == filterValue.toLowerCase())) {
              dnsEntryIndex = i;
              break;
            }
            ;
          };
          if ((dnsEntryIndex == -1)) {
            return _(new Error(util.format($("A DNS Server with %s %s not found"), (options.dnsId ? $("Name Identifier") : $("IP Address")), filterValue)));
          }
          ;
          dnsNameIdentifier = vnetConfiguration.Dns.DnsServers[dnsEntryIndex].Name.toLowerCase();
          dnsIPAddress = vnetConfiguration.Dns.DnsServers[dnsEntryIndex].IPAddress;
          dnsIdAndIp = (((dnsNameIdentifier + "(") + dnsIPAddress) + ")");
          for (j = 0; (j < vnetConfiguration.VirtualNetworkSites.length); j++) {
            site = vnetConfiguration.VirtualNetworkSites[j];
            if (site.DnsServersRef) {
              for (k = 0; (k < site.DnsServersRef.length); k++) {
                if ((site.DnsServersRef[k].Name.toLowerCase() === dnsNameIdentifier)) {
                  return _(new Error(util.format($("You cannot unregister this DNS Server, it is being referenced by the virtual network %s"), site.Name)));
                }
                ;
              };
            }
            ;
          };
          return (function __$unregisterDNSServer(_) {
            var __1 = !options.quiet;
            if (!__1) {
              return _(null, __1);
            }
            ;
            return cli.interaction.confirm(util.format($("Delete the DNS Server %s ? [y/n] "), dnsIdAndIp), __cb(_, __frame, 64, 43, function ___(__0, __3) {
              var __2 = !__3;
              return _(null, __2);
            }, true));
          })(__cb(_, __frame, -270, 18, function ___(__0, __4) {
            return (function __$unregisterDNSServer(__then) {
              if (__4) {
                return _(null);
              }
               else {
                __then();
              }
              ;
            })(function __$unregisterDNSServer() {
              vnetConfiguration.Dns.DnsServers.splice(dnsEntryIndex, 1);
              progress = cli.interaction.progress(util.format($("Deleting the DNS Server %s"), dnsIdAndIp));
              return (function ___(__then) {
                (function ___(_) {
                  __tryCatch(_, function __$unregisterDNSServer() {
                    return setNetworkConfig(options, networkConfiguration, __cb(_, __frame, 72, 6, function __$unregisterDNSServer() {
                      _(null, null, true);
                    }, true));
                  });
                })(function ___(__e, __r, __cont) {
                  (function ___(__then) {
                    __tryCatch(_, function __$unregisterDNSServer() {
                      progress.end();
                      __then();
                    });
                  })(function ___() {
                    __tryCatch(_, function ___() {
                      if (__cont) {
                        __then();
                      } else {
                        _(__e, __r);
                      };
                    });
                  });
                });
              })(function ___() {
                __tryCatch(_, function __$unregisterDNSServer() {
                  _();
                });
              });
            });
          }, true));
        }, true));
      });
    });
  };
  function listVNet(options, _) {
    var virtualNetworkSites, progress;
    var __frame = {
      name: "listVNet",
      line: 349
    };
    return __func(_, this, arguments, listVNet, 1, __frame, function __$listVNet() {
      progress = cli.interaction.progress($("Getting virtual networks"));
      return (function ___(__then) {
        (function ___(_) {
          __tryCatch(_, function __$listVNet() {
            return getVirtualNetworkSites(options, __cb(_, __frame, 4, 28, function ___(__0, __1) {
              virtualNetworkSites = __1;
              _(null, null, true);
            }, true));
          });
        })(function ___(__e, __r, __cont) {
          (function ___(__then) {
            __tryCatch(_, function __$listVNet() {
              progress.end();
              __then();
            });
          })(function ___() {
            __tryCatch(_, function ___() {
              if (__cont) {
                __then();
              } else {
                _(__e, __r);
              };
            });
          });
        });
      })(function ___() {
        __tryCatch(_, function __$listVNet() {
          cli.interaction.formatOutput(virtualNetworkSites, function(outputData) {
            if ((outputData.length === 0)) {
              log.info($("No virtual networks defined"));
            }
             else {
              log.table(outputData, function(row, vnet) {
                row.cell($("Name"), vnet.name);
                row.cell($("Status"), vnet.state);
                row.cell($("AffinityGroup"), vnet.affinityGroup);
              });
            }
            ;
          });
          _();
        });
      });
    });
  };
  function showVNet(vnet, options, _) {
    var virtualNetworkSites, progress, virtualNetworkSite, i;
    var __frame = {
      name: "showVNet",
      line: 371
    };
    return __func(_, this, arguments, showVNet, 2, __frame, function __$showVNet() {
      return cli.interaction.promptIfNotGiven($("Virtual network name: "), vnet, __cb(_, __frame, 1, 27, function ___(__0, __1) {
        vnet = __1;
        progress = cli.interaction.progress($("Getting virtual networks"));
        return (function ___(__then) {
          (function ___(_) {
            __tryCatch(_, function __$showVNet() {
              return getVirtualNetworkSites(options, __cb(_, __frame, 6, 28, function ___(__0, __2) {
                virtualNetworkSites = __2;
                _(null, null, true);
              }, true));
            });
          })(function ___(__e, __r, __cont) {
            (function ___(__then) {
              __tryCatch(_, function __$showVNet() {
                progress.end();
                __then();
              });
            })(function ___() {
              __tryCatch(_, function ___() {
                if (__cont) {
                  __then();
                } else {
                  _(__e, __r);
                };
              });
            });
          });
        })(function ___() {
          __tryCatch(_, function __$showVNet() {
            if (virtualNetworkSites) {
              virtualNetworkSite = null;
              for (i = 0; (i < virtualNetworkSites.length); i++) {
                if (utils.ignoreCaseEquals(virtualNetworkSites[i].name, vnet)) {
                  virtualNetworkSite = virtualNetworkSites[i];
                  break;
                }
                ;
              };
              if (virtualNetworkSite) {
                if (log.format().json) {
                  log.json(virtualNetworkSite);
                }
                 else {
                  utils.logLineFormat(virtualNetworkSite, log.data);
                }
                ;
              }
               else {
                log.warn(util.format($("Virtual network with name %s not found"), vnet));
              }
              ;
            }
             else {
              log.warn(util.format($("Virtual network with name %s not found"), vnet));
            }
            ;
            _();
          });
        });
      }, true));
    });
  };
  function deleteVNet(vnet, options, _) {
    var networkConfiguration, vnetConfiguration, index, i, progress;
    var __frame = {
      name: "deleteVNet",
      line: 405
    };
    return __func(_, this, arguments, deleteVNet, 2, __frame, function __$deleteVNet() {
      return cli.interaction.promptIfNotGiven($("Virtual Network name: "), vnet, __cb(_, __frame, 1, 27, function ___(__0, __2) {
        vnet = __2;
        return getNetworkConfig(options, __cb(_, __frame, 2, 31, function ___(__0, __3) {
          networkConfiguration = __3;
          vnetConfiguration = networkConfiguration.VirtualNetworkConfiguration;
          return (function __$deleteVNet(__then) {
            if ((vnetConfiguration.VirtualNetworkSites.length > 0)) {
              index = -1;
              for (i = 0; (i < vnetConfiguration.VirtualNetworkSites.length); i++) {
                if (utils.ignoreCaseEquals(vnetConfiguration.VirtualNetworkSites[i].Name, vnet)) {
                  index = i;
                  break;
                }
                ;
              };
              return (function __$deleteVNet(__then) {
                if ((index !== -1)) {
                  return (function __$deleteVNet(_) {
                    var __1 = !options.quiet;
                    if (!__1) {
                      return _(null, __1);
                    }
                    ;
                    return cli.interaction.confirm(util.format($("Delete the virtual network %s ? [y/n] "), vnet), __cb(_, __frame, 15, 47, function ___(__0, __3) {
                      var __2 = !__3;
                      return _(null, __2);
                    }, true));
                  })(__cb(_, __frame, -404, 18, function ___(__0, __4) {
                    return (function __$deleteVNet(__then) {
                      if (__4) {
                        return _(null);
                      }
                       else {
                        __then();
                      }
                      ;
                    })(function __$deleteVNet() {
                      vnetConfiguration.VirtualNetworkSites.splice(index, 1);
                      progress = cli.interaction.progress(util.format($("Deleting the virtual network %s"), vnet));
                      return (function ___(__then) {
                        (function ___(_) {
                          __tryCatch(_, function __$deleteVNet() {
                            return setNetworkConfig(options, networkConfiguration, __cb(_, __frame, 22, 10, function __$deleteVNet() {
                              _(null, null, true);
                            }, true));
                          });
                        })(function ___(__e, __r, __cont) {
                          (function ___(__then) {
                            __tryCatch(_, function __$deleteVNet() {
                              progress.end();
                              __then();
                            });
                          })(function ___() {
                            __tryCatch(_, function ___() {
                              if (__cont) {
                                __then();
                              } else {
                                _(__e, __r);
                              };
                            });
                          });
                        });
                      })(function ___() {
                        __tryCatch(_, __then);
                      });
                    });
                  }, true));
                }
                 else {
                  log.warn(util.format($("Virtual network with name %s not found"), vnet));
                  __then();
                }
                ;
              })(__then);
            }
             else {
              log.warn(util.format($("Virtual network with name %s not found"), vnet));
              __then();
            }
            ;
          })(_);
        }, true));
      }, true));
    });
  };
  function createVNet(vnet, options, _) {
    var requiredOptCheckResult, vnetInput, namePattern, vnetUtil, addressSpaceStartIP, parsedAddressSpaceStartIP, addressSpaceInfoForAddressSpace, key, addressSpaceInfo, cidr, maxVmCount, verifyCidrResult, parsedSubnetStartIP, isSubNetInRange, addressSpaceRange, subnetCidr, subnetVmCount, networkConfiguration, vnetConfiguration, dnsServerNameIps, j, dnsServer, k, result, progress, virtualNetworkSite;
    var __frame = {
      name: "createVNet",
      line: 439
    };
    return __func(_, this, arguments, createVNet, 2, __frame, function __$createVNet() {
      return cli.interaction.promptIfNotGiven($("Virtual network name: "), vnet, __cb(_, __frame, 1, 27, function ___(__0, __1) {
        vnet = __1;
        if ((!options.location && !options.affinityGroup)) {
          return _(new Error($("Either --location or --affinity-group must be present")));
        }
         else {
          if ((options.location && options.affinityGroup)) {
            return _(new Error($("Either --location or --affinity-group must be present not both")));
          }
          ;
        }
        ;
        if ((options.createNewAffinityGroup && options.affinityGroup)) {
          return _(new Error($("--create-new-affinity-group can be used only with --location")));
        }
        ;
        if ((options.cidr && options.maxVmCount)) {
          return _(new Error($("Both optional parameters --cidr and --max-vm-count cannot be specified together")));
        }
        ;
        if ((options.subnetCidr && options.subnetVmCount)) {
          return _(new Error($("Both optional parameters --subnet-cidr and --subnet-vm-count cannot be specified together")));
        }
        ;
        requiredOptCheckResult = ensureRequiredParams(options.cidr, "cidr", {
        "address-space": options.addressSpace
        });
        if (requiredOptCheckResult.error) {
          return _(new Error(requiredOptCheckResult.error));
        }
        ;
        requiredOptCheckResult = ensureRequiredParams(options.maxVmCount, "max-vm-count", {
        "address-space": options.addressSpace
        });
        if (requiredOptCheckResult.error) {
          return _(new Error(requiredOptCheckResult.error));
        }
        ;
        requiredOptCheckResult = ensureRequiredParams(options.subnetStartIp, "subnet-start-ip", {
        "address-space": options.addressSpace,
          mvccidr: {
          "max-vm-count": options.maxVmCount,
            cidr: options.cidr
          }
        });
        if (requiredOptCheckResult.error) {
          return _(new Error(requiredOptCheckResult.error));
        }
        ;
        requiredOptCheckResult = ensureRequiredParams(options.subnetCidr, "subnet-cidr", {
        "address-space": options.addressSpace,
          mvccidr: {
          "max-vm-count": options.maxVmCount,
            cidr: options.cidr
          },
        "subnet-start-ip": options.subnetStartIp
        });
        if (requiredOptCheckResult.error) {
          return _(new Error(requiredOptCheckResult.error));
        }
        ;
        requiredOptCheckResult = ensureRequiredParams(options.subnetVmCount, "subnet-vm-count", {
        "address-space": options.addressSpace,
          mvccidr: {
          "max-vm-count": options.maxVmCount,
            cidr: options.cidr
          },
        "subnet-start-ip": options.subnetStartIp
        });
        if (requiredOptCheckResult.error) {
          return _(new Error(requiredOptCheckResult.error));
        }
        ;
        vnetInput = {
          name: null,
          affinityGroup: null,
          addressSpaceStartIP: null,
          addressSpaceStartIPOctects: null,
          addressSpaceInfo: null,
          cidr: null,
          addressSpaceNetworkMask: null,
          addressSpaceRange: null,
          subnetName: null,
          subnetStartIPOctects: null,
          subnetStartIP: null,
          subnetCidr: null,
          dnsServerId: null
        };
        namePattern = /^[a-z0-9][a-z0-9\-]{0,62}$/i;
        if (options.subnetName) {
          if ((namePattern.test(options.subnetName) === false)) {
            return _(new Error($("The --subnet-name can contain only letters, numbers and hyphens with no more than 63 characters. It must start with a letter or number")));
          }
          ;
          vnetInput.subnetName = options.subnetName;
        }
         else {
          vnetInput.subnetName = "Subnet-1";
        }
        ;
        if ((namePattern.test(options.subnetName) === false)) {
          return _(new Error($("The name can contain only letters, numbers and hyphens with no more than 63 characters. It must start with a letter or number")));
        }
        ;
        vnetInput.name = vnet;
        vnetUtil = new VNetUtil();
        addressSpaceStartIP = null;
        if (!options.addressSpace) {
          addressSpaceStartIP = vnetUtil.defaultAddressSpaceInfo().ipv4Start;
          log.info(util.format($("Using default address space start IP: %s"), addressSpaceStartIP));
        }
         else {
          addressSpaceStartIP = options.addressSpace;
        }
        ;
        parsedAddressSpaceStartIP = vnetUtil.parseIPv4(addressSpaceStartIP, "--address-space");
        if (parsedAddressSpaceStartIP.error) {
          return _(new Error(parsedAddressSpaceStartIP.error));
        }
        ;
        addressSpaceStartIP = vnetUtil.octectsToString(parsedAddressSpaceStartIP.octects);
        addressSpaceInfoForAddressSpace = vnetUtil.getPrivateAddressSpaceInfo(parsedAddressSpaceStartIP.octects);
        if (!addressSpaceInfoForAddressSpace) {
          log.error(util.format($("The given --address-space %s is not a valid private address"), addressSpaceStartIP));
          log.help($("The valid address space ranges are:"));
          for (key in vnetUtil.privateAddressSpacesInfo) {
            addressSpaceInfo = vnetUtil.privateAddressSpacesInfo[key];
            log.help((((((addressSpaceInfo.ipv4Cidr + "  [") + addressSpaceInfo.ipv4Start) + ", ") + addressSpaceInfo.ipv4End) + "]"));
          };
          return _(new Error($("Invalid --address-space value")));
        }
        ;
        vnetInput.addressSpaceStartIP = addressSpaceStartIP;
        vnetInput.addressSpaceStartIPOctects = parsedAddressSpaceStartIP.octects;
        vnetInput.addressSpaceInfo = addressSpaceInfoForAddressSpace;
        cidr = null;
        if (options.maxVmCount) {
          maxVmCount = parseInt(options.maxVmCount, 10);
          if (isNaN(maxVmCount)) {
            return _(new Error($("--vm-count should be an integer value")));
          }
          ;
          cidr = vnetUtil.getCIDRFromHostsCount(maxVmCount);
          log.info(util.format($("The cidr calculated for the given --max-vm-count %s is %s"), maxVmCount, cidr));
        }
         else {
          if (options.cidr) {
            cidr = parseInt(options.cidr, 10);
          }
           else {
            cidr = vnetInput.addressSpaceInfo.startCidr;
            log.info(util.format($("Using default address space cidr: %s"), cidr));
          }
          ;
        }
        ;
        verifyCidrResult = vnetUtil.verfiyCIDR(cidr, {
          start: vnetInput.addressSpaceInfo.startCidr,
          end: vnetInput.addressSpaceInfo.endCidr
        }, (options.cidr ? "--cidr" : null));
        if (verifyCidrResult.error) {
          return _(new Error(verifyCidrResult.error));
        }
        ;
        vnetInput.cidr = cidr;
        vnetInput.addressSpaceNetworkMask = vnetUtil.getNetworkMaskFromCIDR(vnetInput.cidr).octects;
        vnetInput.addressSpaceRange = vnetUtil.getIPRange(vnetInput.addressSpaceStartIPOctects, vnetInput.addressSpaceNetworkMask);
        if (!options.subnetStartIp) {
          vnetInput.subnetStartIPOctects = vnetInput.addressSpaceRange.start;
          vnetInput.subnetStartIP = vnetUtil.octectsToString(vnetInput.subnetStartIPOctects);
          log.info(util.format($("Using default subnet start IP: %s"), vnetInput.subnetStartIP));
        }
         else {
          parsedSubnetStartIP = vnetUtil.parseIPv4(options.subnetStartIp, "--subnet-start-ip");
          if (parsedSubnetStartIP.error) {
            return _(new Error(parsedSubnetStartIP.error));
          }
          ;
          vnetInput.subnetStartIPOctects = parsedSubnetStartIP.octects;
          vnetInput.subnetStartIP = vnetUtil.octectsToString(vnetInput.subnetStartIPOctects);
        }
        ;
        isSubNetInRange = vnetUtil.isIPInRange(vnetInput.addressSpaceRange.start, vnetInput.addressSpaceRange.end, vnetInput.subnetStartIPOctects);
        if (!isSubNetInRange) {
          addressSpaceRange = (((((((vnetInput.addressSpaceStartIP + "/") + vnetInput.cidr) + " [") + vnetUtil.octectsToString(vnetInput.addressSpaceRange.start)) + ", ") + vnetUtil.octectsToString(vnetInput.addressSpaceRange.end)) + "]");
          log.help(util.format($("The given subnet (--subnet-start-ip) should belongs to the address space %s"), addressSpaceRange));
          return _(new Error($("The subnet is not in the address space")));
        }
        ;
        subnetCidr = null;
        if (options.subnetVmCount) {
          subnetVmCount = parseInt(options.subnetVmCount, 10);
          if (isNaN(subnetVmCount)) {
            return _(new Error($("--subnet-vm-count should be an integer value")));
          }
          ;
          subnetCidr = vnetUtil.getCIDRFromHostsCount(subnetVmCount);
          log.info(util.format($("The cidr calculated for the given --subnet-vm-count %s is %s"), subnetVmCount, subnetCidr));
        }
         else {
          if (options.subnetCidr) {
            subnetCidr = parseInt(options.subnetCidr, 10);
          }
           else {
            subnetCidr = vnetUtil.getDefaultSubnetCIDRFromAddressSpaceCIDR(vnetInput.cidr);
            log.info(util.format($("Using default subnet cidr: %s"), subnetCidr));
          }
          ;
        }
        ;
        verifyCidrResult = vnetUtil.verfiyCIDR(subnetCidr, {
          start: vnetInput.cidr,
          end: vnetInput.addressSpaceInfo.endCidr
        }, (options.subnetCidr ? "--subnet-cidr" : "calculated from --subnet-vm-count"));
        if (verifyCidrResult.error) {
          return _(new Error(verifyCidrResult.error));
        }
        ;
        vnetInput.subnetCidr = subnetCidr;
        log.verbose(util.format($("Address Space [Starting IP/CIDR (Max VM Count)]: %s/%s (%s)"), vnetInput.addressSpaceStartIP, vnetInput.cidr, vnetUtil.getHostsCountForCIDR(vnetInput.cidr).hostsCount));
        log.verbose(util.format($("Subnet [Starting IP/CIDR (Max VM Count)]: %s/%s (%s)"), vnetInput.subnetStartIP, vnetInput.subnetCidr, vnetUtil.getHostsCountForCIDR(vnetInput.subnetCidr).hostsCount));
        return getNetworkConfig(options, __cb(_, __frame, 298, 31, function ___(__0, __2) {
          networkConfiguration = __2;
          if (!networkConfiguration.VirtualNetworkConfiguration) {
            networkConfiguration.VirtualNetworkConfiguration = {
            };
          }
          ;
          vnetConfiguration = networkConfiguration.VirtualNetworkConfiguration;
          if (vnetConfiguration.VirtualNetworkSites) {
            vnetConfiguration.VirtualNetworkSites.forEach(function(site) {
              if (utils.ignoreCaseEquals(site.Name, vnetInput.name)) {
                throw new Error(util.format($("A virtual network with name %s already exists"), vnetInput.name));
              }
              ;
            });
          }
          ;
          if (options.dnsServerId) {
            dnsServerNameIps = [];
            for (j = 0; (j < vnetConfiguration.Dns.DnsServers.length); j++) {
              dnsServer = vnetConfiguration.Dns.DnsServers[j];
              if ((dnsServer.Name.toLowerCase() == options.dnsServerId.toLowerCase())) {
                vnetInput.dnsServerId = dnsServer.Name;
                log.info(util.format($("Using DNS Server %s (%s)"), dnsServer.Name, dnsServer.IPAddress));
                break;
              }
              ;
              dnsServerNameIps.push(util.format($("%s (%s)"), dnsServer.Name, dnsServer.IPAddress));
            };
            if (!vnetInput.dnsServerId) {
              log.error(util.format($("A DNS Server with name Identifier %s not found"), options.dnsServerId));
              if ((dnsServerNameIps.length > 0)) {
                log.help($("You have following DNS Servers registered:"));
                for (k = 0; (k < dnsServerNameIps.length); k++) {
                  log.help(dnsServerNameIps[k]);
                };
              }
              ;
              log.help($("To register a new DNS Server see the command \"azure network dnsserver register\""));
              return _(new Error($("DNS Server with the Name Identifier not found")));
            }
            ;
          }
          ;
          progress = cli.interaction.progress($("Getting or creating affinity group"));
          return (function ___(__then) {
            (function ___(_) {
              __tryCatch(_, function __$createVNet() {
                return getOrCreateAffinityGroupIfRequired(options, __cb(_, __frame, 341, 15, function ___(__0, __3) {
                  result = __3;
                  _(null, null, true);
                }, true));
              });
            })(function ___(__e, __r, __cont) {
              (function ___(__then) {
                __tryCatch(_, function __$createVNet() {
                  progress.end();
                  __then();
                });
              })(function ___() {
                __tryCatch(_, function ___() {
                  if (__cont) {
                    __then();
                  } else {
                    _(__e, __r);
                  };
                });
              });
            });
          })(function ___() {
            __tryCatch(_, function __$createVNet() {
              if (result.agName) {
                log.info(util.format($("Using affinity group %s"), result.agName));
                vnetInput.affinityGroup = result.agName;
              }
               else {
                vnetInput.location = result.location;
              }
              ;
              virtualNetworkSite = getVirtualNetworkSiteObject(vnetInput);
              if (!vnetConfiguration.VirtualNetworkSites) {
                vnetConfiguration.VirtualNetworkSites = [];
              }
              ;
              vnetConfiguration.VirtualNetworkSites.push(virtualNetworkSite);
              progress = cli.interaction.progress($("Updating Network Configuration"));
              return (function ___(__then) {
                (function ___(_) {
                  __tryCatch(_, function __$createVNet() {
                    return setNetworkConfig(options, networkConfiguration, __cb(_, __frame, 361, 6, function __$createVNet() {
                      _(null, null, true);
                    }, true));
                  });
                })(function ___(__e, __r, __cont) {
                  (function ___(__then) {
                    __tryCatch(_, function __$createVNet() {
                      progress.end();
                      __then();
                    });
                  })(function ___() {
                    __tryCatch(_, function ___() {
                      if (__cont) {
                        __then();
                      } else {
                        _(__e, __r);
                      };
                    });
                  });
                });
              })(function ___() {
                __tryCatch(_, function __$createVNet() {
                  _();
                });
              });
            });
          });
        }, true));
      }, true));
    });
  };
  function checkStaticIP(vnet, ipAddress, options, _) {
    var networkManagementClient, progress, response, output;
    var __frame = {
      name: "checkStaticIP",
      line: 806
    };
    return __func(_, this, arguments, checkStaticIP, 3, __frame, function __$checkStaticIP() {
      return cli.interaction.promptIfNotGiven($("Virtual network name: "), vnet, __cb(_, __frame, 1, 27, function ___(__0, __1) {
        vnet = __1;
        return cli.interaction.promptIfNotGiven($("Static IP address: "), ipAddress, __cb(_, __frame, 2, 32, function ___(__0, __2) {
          ipAddress = __2;
          networkManagementClient = createNetworkManagementClient(options);
          progress = cli.interaction.progress($("Checking static IP address"));
          return (function ___(__then) {
            (function ___(_) {
              __tryCatch(_, function __$checkStaticIP() {
                return networkManagementClient.staticIPs.check(vnet, ipAddress, __cb(_, __frame, 9, 51, function ___(__0, __3) {
                  response = __3;
                  _(null, null, true);
                }, true));
              });
            })(function ___(__e, __r, __cont) {
              (function ___(__then) {
                __tryCatch(_, function __$checkStaticIP() {
                  progress.end();
                  __then();
                });
              })(function ___() {
                __tryCatch(_, function ___() {
                  if (__cont) {
                    __then();
                  } else {
                    _(__e, __r);
                  };
                });
              });
            });
          })(function ___() {
            __tryCatch(_, function __$checkStaticIP() {
              output = {
                isAvailable: response.isAvailable,
                availableAddresses: response.availableAddresses
              };
              cli.interaction.formatOutput(output, function(outputData) {
                if ((outputData.length === 0)) {
                  log.info($("No static IP addresses found"));
                }
                 else {
                  utils.logLineFormat(outputData, log.data);
                }
                ;
              });
              _();
            });
          });
        }, true));
      }, true));
    });
  };
  function listReservedIP(options, _) {
    var reservedIPs, progress;
    var __frame = {
      name: "listReservedIP",
      line: 834
    };
    return __func(_, this, arguments, listReservedIP, 1, __frame, function __$listReservedIP() {
      progress = cli.interaction.progress($("Getting reserved IP addresses"));
      return (function ___(__then) {
        (function ___(_) {
          __tryCatch(_, function __$listReservedIP() {
            return getReservedIPs(options, __cb(_, __frame, 4, 20, function ___(__0, __1) {
              reservedIPs = __1;
              _(null, null, true);
            }, true));
          });
        })(function ___(__e, __r, __cont) {
          (function ___(__then) {
            __tryCatch(_, function __$listReservedIP() {
              progress.end();
              __then();
            });
          })(function ___() {
            __tryCatch(_, function ___() {
              if (__cont) {
                __then();
              } else {
                _(__e, __r);
              };
            });
          });
        });
      })(function ___() {
        __tryCatch(_, function __$listReservedIP() {
          cli.interaction.formatOutput(reservedIPs, function(outputData) {
            if ((outputData.length === 0)) {
              log.info($("No reserved IP addresses found"));
            }
             else {
              log.table(outputData, function(row, reservedIP) {
                row.cell($("Name"), reservedIP.name);
                row.cell($("Address"), reservedIP.address);
                row.cell($("Location"), reservedIP.location);
                row.cell($("Label"), (reservedIP.label ? reservedIP.label : ""));
              });
            }
            ;
          });
          _();
        });
      });
    });
  };
  function showReservedIP(name, options, _) {
    var reservedIPs, progress, reservedIP, i;
    var __frame = {
      name: "showReservedIP",
      line: 857
    };
    return __func(_, this, arguments, showReservedIP, 2, __frame, function __$showReservedIP() {
      progress = cli.interaction.progress($("Getting reserved IP addresses"));
      return (function ___(__then) {
        (function ___(_) {
          __tryCatch(_, function __$showReservedIP() {
            return getReservedIPs(options, __cb(_, __frame, 4, 20, function ___(__0, __1) {
              reservedIPs = __1;
              _(null, null, true);
            }, true));
          });
        })(function ___(__e, __r, __cont) {
          (function ___(__then) {
            __tryCatch(_, function __$showReservedIP() {
              progress.end();
              __then();
            });
          })(function ___() {
            __tryCatch(_, function ___() {
              if (__cont) {
                __then();
              } else {
                _(__e, __r);
              };
            });
          });
        });
      })(function ___() {
        __tryCatch(_, function __$showReservedIP() {
          if (reservedIPs) {
            reservedIP = null;
            for (i = 0; (i < reservedIPs.length); i++) {
              if (utils.ignoreCaseEquals(reservedIPs[i].name, name)) {
                reservedIP = reservedIPs[i];
                break;
              }
              ;
            };
            cli.interaction.formatOutput(reservedIP, function(outputData) {
              if (outputData) {
                utils.logLineFormat(outputData, log.data);
              }
               else {
                log.warn(util.format($("Reserved IP address with name %s not found"), name));
              }
              ;
            });
          }
           else {
            cli.interaction.formatOutput(null, function() {
              log.warn(util.format($("Reserved IP address with name %s not found"), name));
            });
          }
          ;
          _();
        });
      });
    });
  };
  function deleteReservedIP(name, options, _) {
    var networkManagementClient, progress;
    var __frame = {
      name: "deleteReservedIP",
      line: 889
    };
    return __func(_, this, arguments, deleteReservedIP, 2, __frame, function __$deleteReservedIP() {
      networkManagementClient = createNetworkManagementClient(options);
      return (function ___(__then) {
        (function ___(_) {
          __tryCatch(_, function __$deleteReservedIP() {
            return (function __$deleteReservedIP(__then) {
              if (!options.quiet) {
                progress = cli.interaction.progress($("Looking up reserved IP address"));
                return networkManagementClient.reservedIPs.get(name, __cb(_, __frame, 8, 44, function __$deleteReservedIP() {
                  return cli.interaction.confirm(util.format($("Delete reserved IP address %s? [y/n] "), name), __cb(_, __frame, 9, 29, function ___(__0, __2) {
                    var __1 = !__2;
                    return (function __$deleteReservedIP(__then) {
                      if (__1) {
                        return _(null);
                      }
                       else {
                        __then();
                      }
                      ;
                    })(__then);
                  }, true));
                }, true));
              }
               else {
                __then();
              }
              ;
            })(function __$deleteReservedIP() {
              progress = cli.interaction.progress($("Deleting reserved IP address"));
              return networkManagementClient.reservedIPs.deleteMethod(name, __cb(_, __frame, 14, 42, function __$deleteReservedIP() {
                _(null, null, true);
              }, true));
            });
          });
        })(function ___(__e, __r, __cont) {
          (function ___(__then) {
            __tryCatch(_, function __$deleteReservedIP() {
              progress.end();
              __then();
            });
          })(function ___() {
            __tryCatch(_, function ___() {
              if (__cont) {
                __then();
              } else {
                _(__e, __r);
              };
            });
          });
        });
      })(function ___() {
        __tryCatch(_, function __$deleteReservedIP() {
          _();
        });
      });
    });
  };
  function createReservedIP(name, location, options, _) {
    var networkManagementClient, progress, params;
    var __frame = {
      name: "createReservedIP",
      line: 909
    };
    return __func(_, this, arguments, createReservedIP, 3, __frame, function __$createReservedIP() {
      networkManagementClient = createNetworkManagementClient(options);
      progress = cli.interaction.progress($("Creating reserved IP address"));
      params = {
        name: name,
        location: location
      };
      if (options.label) {
        params.label = options.label;
      }
      ;
      return (function ___(__then) {
        (function ___(_) {
          __tryCatch(_, function __$createReservedIP() {
            return networkManagementClient.reservedIPs.create(params, __cb(_, __frame, 13, 42, function __$createReservedIP() {
              _(null, null, true);
            }, true));
          });
        })(function ___(__e, __r, __cont) {
          (function ___(__then) {
            __tryCatch(_, function __$createReservedIP() {
              progress.end();
              __then();
            });
          })(function ___() {
            __tryCatch(_, function ___() {
              if (__cont) {
                __then();
              } else {
                _(__e, __r);
              };
            });
          });
        });
      })(function ___() {
        __tryCatch(_, function __$createReservedIP() {
          _();
        });
      });
    });
  };
  function getVirtualNetworkSiteObject(vnetInput) {
    var virtualNetWorkSite = {
      Name: vnetInput.name,
      AddressSpace: [],
      Subnets: [],
      DnsServersRef: []
    };
    if (vnetInput.affinityGroup) {
      virtualNetWorkSite.AffinityGroup = vnetInput.affinityGroup;
    }
     else {
      virtualNetWorkSite.Location = vnetInput.location;
    }
    ;
    virtualNetWorkSite.AddressSpace.push(((vnetInput.addressSpaceStartIP + "/") + vnetInput.cidr));
    virtualNetWorkSite.Subnets.push({
      AddressPrefix: ((vnetInput.subnetStartIP + "/") + vnetInput.subnetCidr),
      Name: vnetInput.subnetName
    });
    if (vnetInput.dnsServerId) {
      virtualNetWorkSite.DnsServersRef.push({
        Name: vnetInput.dnsServerId
      });
    }
    ;
    return virtualNetWorkSite;
  };
  function getOrCreateAffinityGroupIfRequired(options, callback) {
    var managementClient = createManagementClient(options);
    var progress = null;
    var _getLocations = function(locationsCallBack) {
      progress = cli.interaction.progress($("Getting locations"));
      managementClient.locations.list(function(error, response) {
        progress.end();
        locationsCallBack(error, response.locations);
      });
    };
    var _getAffinityGroups = function(locationsCallBack) {
      progress = cli.interaction.progress($("Getting affinity groups"));
      managementClient.affinityGroups.list(function(error, response) {
        progress.end();
        locationsCallBack(error, response.affinityGroups);
      });
    };
    var _affinityGroupSupportsPersistentVMRole = function(affinityGroup) {
      if ((affinityGroup.capabilities.length === 0)) {
        return false;
      }
      ;
      for (var i = 0; (i < affinityGroup.capabilities.length); i++) {
        if ((affinityGroup.capabilities[i] === "PersistentVMRole")) {
          return true;
        }
        ;
      };
      return false;
    };
    var _locationSupportsPersistentVMRole = function(location) {
      if ((location.availableServices.length === 0)) {
        return false;
      }
      ;
      for (var i = 0; (i < location.availableServices.length); i++) {
        if ((location.availableServices[i] === "PersistentVMRole")) {
          return true;
        }
        ;
      };
      return false;
    };
    var _showVNetHostHelp = function() {
      log.help($("You can either create a \"regional VNet\" using --location (recommended) or \"affinity group specific VNet\" using --location and --create-new-affinity-group (deprecated)"));
    };
    if (options.affinityGroup) {
      _getAffinityGroups(function(error, groups) {
        if (error) {
          return callback(error, null);
        }
        ;
        var affinityGroupName = options.affinityGroup.toLowerCase();
        var affinityGroup = null;
        for (var i = 0; (i < groups.length); i++) {
          if ((groups[i].name.toLowerCase() === affinityGroupName)) {
            affinityGroup = groups[i];
            break;
          }
          ;
        };
        if ((affinityGroup === null)) {
          _showVNetHostHelp();
          return callback(util.format($("Affinity group with name \"%s\" not found"), options.affinityGroup), null);
        }
        ;
        if (!_affinityGroupSupportsPersistentVMRole(affinityGroup)) {
          log.error(util.format($("The given affinity group \"%s\" does not support PersistentVMRole service"), options.affinityGroup));
          log.help($("You should create virtual network in an affinity group that support PersistentVMRole service"));
          _showVNetHostHelp();
          var vmroleSupportedAffinityGroupNames = [];
          for (var j = 0; (j < groups.length); j++) {
            if (_affinityGroupSupportsPersistentVMRole(groups[j])) {
              vmroleSupportedAffinityGroupNames.push((((groups[j].name + " (") + groups[j].location) + ")"));
            }
            ;
          };
          if ((vmroleSupportedAffinityGroupNames.length > 0)) {
            log.help($("Following affinity groups in your subscription supports PersistentVMRole service:"));
            for (var k = 0; (k < vmroleSupportedAffinityGroupNames.length); k++) {
              log.help(vmroleSupportedAffinityGroupNames[k]);
            };
          }
           else {
            log.help($("There is no affinity groups in your subscription that supports PersistentVMRole service"));
          }
          ;
          _showVNetHostHelp();
          return callback(new Error($("affinity group does not support PersistentVMRole service")));
        }
        ;
        return callback(null, {
          agName: affinityGroup.name,
          location: affinityGroup.location,
          newAg: false
        });
      });
    }
     else {
      _getLocations(function(error, locations) {
        if (error) {
          return callback(error, null);
        }
        ;
        var locationName = options.location;
        var location = null;
        for (var i = 0; (i < locations.length); i++) {
          if (utils.ignoreCaseEquals(locations[i].name, locationName)) {
            location = locations[i];
            break;
          }
          ;
        };
        if ((location === null)) {
          return callback(new Error(util.format($("Location with name \"%s\" not found"), options.location)));
        }
        ;
        if (!_locationSupportsPersistentVMRole(location)) {
          log.error(util.format($("The given location \"%s\" does not support PersistentVMRole service"), options.location));
          log.help($("You should create virtual network in a location that supports PersistentVMRole service"));
          var vmroleSupportedLocationNames = [];
          for (var j = 0; (j < locations.length); j++) {
            if (_locationSupportsPersistentVMRole(locations[j])) {
              vmroleSupportedLocationNames.push(locations[j].name);
            }
            ;
          };
          if ((vmroleSupportedLocationNames.length > 0)) {
            log.help($("Following locations supports PersistentVMRole service:"));
            for (var k = 0; (k < vmroleSupportedLocationNames.length); k++) {
              log.help(vmroleSupportedLocationNames[k]);
            };
          }
          ;
          return callback(new Error($("location does not support PersistentVMRole service")));
        }
        ;
        if (options.createNewAffinityGroup) {
          var agName = ("AG-CLI-" + crypto.randomBytes(8).toString("hex"));
          var affinityGroupOptions = {
            name: agName,
            location: location.name,
            label: ((agName + "_") + location.name)
          };
          progress = cli.interaction.progress(util.format($("Creating new affinity group %s"), agName));
          managementClient.affinityGroups.create(affinityGroupOptions, function(error) {
            progress.end();
            if (error) {
              return callback(error, null);
            }
            ;
            return callback(null, {
              agName: agName,
              location: location.name,
              newAg: true
            });
          });
        }
         else {
          return callback(null, {
            agName: null,
            location: location.name,
            newAg: false
          });
        }
        ;
      });
    }
    ;
  };
  function getNetworkConfig(options, callback) {
    var networkManagementClient = createNetworkManagementClient(options);
    var vnetUtil = new VNetUtil();
    var progress = cli.interaction.progress($("Getting network configuration"));
    networkManagementClient.networks.getConfiguration(function(error, response) {
      progress.end();
      if (error) {
        if ((error.statusCode === 404)) {
          return callback(null, vnetUtil.getNewNetworkConfigObj());
        }
        ;
        return callback(error, response);
      }
       else {
        var networkConfiguration = vnetUtil.getNetworkConfigObj(response.configuration);
        return callback(null, networkConfiguration);
      }
      ;
    });
  };
  function setNetworkConfig(options, networkConfiguration, callback) {
    var networkManagementClient = createNetworkManagementClient(options);
    var vnetUtil = new VNetUtil();
    var xmlString = vnetUtil.getNetworkConfigXml(networkConfiguration);
    var networkParams = {
      configuration: xmlString
    };
    networkManagementClient.networks.setConfiguration(networkParams, function(error) {
      return callback(error);
    });
  };
  function getVirtualNetworkSites(options, callback) {
    var networkManagementClient = createNetworkManagementClient(options);
    networkManagementClient.networks.list(function(error, response) {
      if (error) {
        return callback(error, response);
      }
       else {
        return callback(null, response.virtualNetworkSites);
      }
      ;
    });
  };
  function getReservedIPs(options, callback) {
    var networkManagementClient = createNetworkManagementClient(options);
    networkManagementClient.reservedIPs.list(function(error, response) {
      if (error) {
        return callback(error, response);
      }
       else {
        return callback(null, response.reservedIPs);
      }
      ;
    });
  };
  function ensureRequiredParams(param, paramName, dependentParams) {
    var result = {
      error: null,
      emptyParams: null,
      requiredParams: null,
      allEmpty: false
    };
    var arrayToString = function(array, combine) {
      var arrayAsString = null;
      if ((array.length == 1)) {
        arrayAsString = array[0];
      }
       else if ((array.length > 1)) {
        var last = (((" " + combine) + " ") + array.pop());
        arrayAsString = array.join(",");
        arrayAsString += last;
      }
      
      ;
      return arrayAsString;
    };
    var emptyParams = [];
    var requiresParams = [];
    if ((typeof param != "undefined")) {
      for (var key in dependentParams) {
        if ((typeof dependentParams[key] == "undefined")) {
          emptyParams.push(key);
          requiresParams.push(key);
        }
         else if ((typeof dependentParams[key] == "object")) {
          var emptyParams2 = [];
          var requiresParams2 = [];
          for (var key2 in dependentParams[key]) {
            requiresParams2.push(key2);
            if ((typeof dependentParams[key][key2] == "undefined")) {
              emptyParams2.push(key2);
            }
            ;
          };
          if ((emptyParams2.length == requiresParams2.length)) {
            emptyParams.push((("\"" + arrayToString(emptyParams2, "or")) + "\""));
          }
          ;
          requiresParams.push((("\"" + arrayToString(requiresParams2, "or")) + "\""));
        }
         else {
          requiresParams.push(key);
        }
        
        ;
      };
    }
    ;
    if ((emptyParams.length > 0)) {
      var singleEmpty = (emptyParams.length == 1);
      var singleRequired = (requiresParams.length == 1);
      result.allEmpty = ((emptyParams.length == requiresParams.length));
      result.emptyParams = arrayToString(emptyParams, "and");
      result.requiredParams = arrayToString(requiresParams, "and");
      result.error = (((((("The parameter(s) " + result.requiredParams) + ((singleRequired ? " is" : " are"))) + " required when ") + paramName) + " is specified but ") + ((result.allEmpty ? "none of them present" : (((("the parameter(s) " + result.emptyParams) + ((singleEmpty ? " is" : " are"))) + " not present")))));
    }
    ;
    return result;
  };
  function createNetworkManagementClient(options) {
    return utils._createNetworkClient(profile.current.getSubscription(options.subscription), log);
  };
  function createManagementClient(options) {
    return utils._createManagementClient(profile.current.getSubscription(options.subscription), log);
  };
};