/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch;
var azureCommon = require("azure-common");
var storage = require("azure-storage");
var util = require("util");
var commander = require("commander");
var fs = require("fs");
var path = require("path");
var StorageUtil = require("../../util/storage.util");
var utils = require("../../util/utils");
var validation = require("../../util/validation");
var blobUtils = require("../../util/blobUtils");
var splitDestinationUri = blobUtils.splitDestinationUri;
var Wildcard = utils.Wildcard;
var getStorageSettings = StorageUtil.getStorageServiceSettings;
var performStorageOperation = StorageUtil.performStorageOperation;
var startProgress = StorageUtil.startProgress;
var endProgress = StorageUtil.endProgress;
var BlobConstants = azureCommon.Constants.BlobConstants;
var BlobUtilities = storage.BlobUtilities;
var SpeedSummary = storage.BlobService.SpeedSummary;
var $ = utils.getLocaleString;
commander.Command.prototype.addStorageAccountOption = function() {
  this.option("-a, --account-name <accountName>", $("the storage account name"));
  this.option("-k, --account-key <accountKey>", $("the storage account key"));
  this.option("-c, --connection-string <connectionString>", $("the storage connection string"));
  this.option("-vv", $("run storage command in debug mode"));
  return this;
};
exports.init = function(cli) {
  StorageUtil.init(cli);
  var storage = cli.category("storage").description($("Commands to manage your Storage objects"));
  var logger = cli.output;
  var interaction = cli.interaction;
  var container = storage.category("container").description($("Commands to manage your Storage containers"));
  container.command("list [prefix]").description($("List storage containers with wildcard")).option("-p, --prefix <prefix>", $("the storage container name prefix")).addStorageAccountOption().execute(listAzureContainersWithAcl);
  container.command("show [container]").description($("Show details of the specified storage container")).option("--container <container>", $("the storage container name")).addStorageAccountOption().execute(showAzureContainer);
  container.command("create [container]").description($("Create a storage container")).option("--container <container>", $("the storage container name")).option("-p, --permission <permission>", $("the storage container ACL permission(Off/Blob/Container)")).addStorageAccountOption().execute(createAzureContainer);
  container.command("delete [container]").description($("Delete the specified storage container")).option("--container <container>", $("the storage container name")).option("-q, --quiet", $("remove the specified Storage container without confirmation")).addStorageAccountOption().execute(deleteAzureContainer);
  container.command("set [container]").description($("Set storage container ACL")).option("--container <container>", $("the storage container name")).option("-p, --permission <permission>", $("the storage container ACL permission(Off/Blob/Container)")).addStorageAccountOption().execute(setAzureContainer);
  var containerSas = container.category("sas").description($("Commands to manage shared access signatures of your Storage container"));
  containerSas.command("create [container] [permissions] [expiry]").description($("Generate shared access signature of storage container")).option("--container <container>", $("the storage container name")).option("--permissions <permissions>", $("the operation permissions combining symbols of r(Read)/w(Write)/d(Delete)/l(List)")).option("--start <start>", $("the UTC time at which the SAS becomes valid")).option("--expiry <expiry>", $("the UTC time at which the SAS expires")).option("--policy <policy>", $("the stored access policy identifier")).addStorageAccountOption().execute(createContainerSAS);
  var policy = container.category("policy").description($("Commands to manage stored access policies of your Storage container"));
  policy.command("create [container] [name]").usage("[options] [container] [name]").description($("Create a stored access policy on the container")).option("--container <container>", $("the storage container name")).option("--name <name>", $("the policy name")).option("--start <start>", $("the UTC time at which the policy becomes valid")).option("--expiry <expiry>", $("the UTC time at which the policy expires")).option("--permissions <permissions>", $("the operation permissions combining symbols of r(Read)/w(Write)/d(Delete)/l(List)")).addStorageAccountOption().execute(createContainerPolicy);
  policy.command("show [container] [name]").usage("[options] [container] [name]").description($("Show a stored access policy on the container")).option("--container <container>", $("the storage container name")).option("--name <name>", $("the policy name")).addStorageAccountOption().execute(showContainerPolicy);
  policy.command("list [container]").usage("[options] [container]").description($("List stored access policies on the container")).option("--container <container>", $("the storage container name")).addStorageAccountOption().execute(listContainerPolicy);
  policy.command("set [container] [name]").usage("[options] [container] [name]").description($("Set a stored access policy on the container")).option("--container <container>", $("the storage container name")).option("--name <name>", $("the policy name")).option("--start <start>", $("the UTC time at which the policy becomes valid and passing two spaces means to remove the existing setting")).option("--expiry <expiry>", $("the UTC time at which the policy expires and passing two spaces means to remove the existing setting")).option("--permissions <permissions>", $("the operation permissions combining symbols of r(Read)/w(Write)/d(Delete)/l(List) and passing two spaces means to remove the existing setting")).addStorageAccountOption().execute(setContainerPolicy);
  policy.command("delete [container] [name]").usage("[options] [container] [name]").description($("Delete a stored access policy on the container")).option("--container <container>", $("the storage container name")).option("--name <name>", $("the policy name")).addStorageAccountOption().execute(deleteContainerPolicy);
  var blob = storage.category("blob").description($("Commands to manage your Storage blobs"));
  blob.command("list [container] [prefix]").usage("[options] [container] [prefix]").description($("List storage blob in the specified storage container use wildcard and blob name prefix")).option("--container <container>", $("the storage container name")).option("-p, --prefix <prefix>", $("the blob name prefix")).option("--sas <sas>", $("the shared access signature of the storage container")).addStorageAccountOption().execute(listAzureBlob);
  blob.command("show [container] [blob]").usage("[options] [container] [blob]").description($("Show details of the specified storage blob")).option("--container <container>", $("the storage container name")).option("-b, --blob <blobName>", $("the storage blob name")).option("--sas <sas>", $("the shared access signature of the storage container or blob")).addStorageAccountOption().execute(showAzureBlob);
  blob.command("delete [container] [blob]").usage("[options] [container] [blob]").description($("Delete the specified storage blob")).option("--container <container>", $("the storage container name")).option("-b, --blob <blobName>", $("the storage blob name")).option("--sas <sas>", $("the shared access signature of the storage container or blob")).option("-q, --quiet", $("remove the specified Storage blob without confirmation")).addStorageAccountOption().execute(deleteAzureBlob);
  blob.command("upload [file] [container] [blob]").usage("[options] [file] [container] [blob]").description($("Upload the specified file to storage blob")).option("-f, --file <file>", $("the local file path")).option("--container <container>", $("the storage container name")).option("-b, --blob <blobName>", $("the storage blob name")).option("-t, --blobtype <blobtype>", $("the storage blob type(Page, Block)")).option("-p, --properties <properties>", $("the storage blob properties for uploaded file. Properties are key=value pairs and separated with semicolon(;). Available properties are contentType, contentEncoding, contentLanguage, cacheControl")).option("-m, --metadata <metadata>", $("the storage blob metadata for uploaded file. Metadata are key=value pairs and separated with semicolon(;)")).option("--concurrenttaskcount <concurrenttaskcount>", $("the maximum number of concurrent upload requests")).option("-q, --quiet", $("overwrite the specified Storage blob without confirmation")).addStorageAccountOption().execute(uploadAzureBlob);
  blob.command("download [container] [blob] [destination]").usage("[options] [container] [blob] [destination]").description($("Download the specified storage blob")).option("--container <container>", $("the storage container name")).option("-b, --blob <blobName>", $("the storage blob name")).option("-d, --destination [destination]", $("download destination file or directory path")).option("-m, --checkmd5", $("check md5sum for the downloaded file")).option("--concurrenttaskcount <concurrenttaskcount>", $("the maximum number of concurrent download requests")).option("--sas <sas>", $("the shared access signature of the storage container or blob")).option("-q, --quiet", $("overwrite the destination file without confirmation")).addStorageAccountOption().execute(downloadAzureBlob);
  var copy = blob.category("copy").description($("Commands to manage your blob copy operations"));
  copy.command("start [sourceUri] [destContainer]").usage("[options] [sourceUri] [destContainer]").description($("Start to copy the specified storage blob which completes asynchronously")).option("--sas-token <sasToken>", $("deprecated. This option is deprecated and will be removed in a future version. Please use \"--source-sas\" instead")).option("--source-sas <sourceSas>", $("the shared access signature of the source storage")).option("--source-container <sourceContainer>", $("the source storage container name")).option("--source-blob <sourceBlob>", $("the source storage blob name")).option("--source-uri <sourceUri>", $("the source storage blob absolute uri")).option("--dest-account-name <destAccountName>", $("the destination storage account name")).option("--dest-account-key <destAccountKey>", $("the destination storage account key")).option("--dest-connection-string <destConnectionString>", $("the destination storage connection string")).option("--dest-container <destContainer>", $("the destination storage container name")).option("--dest-sas <destSas>", $("the shared access signature of the destination storage container or blob")).option("--dest-blob <destBlob>", $("the destination storage blob name")).option("-q, --quiet", $("overwrite the destination blob without confirmation")).addStorageAccountOption().execute(startBlobCopy);
  copy.command("show [container] [blob]").usage("[options] [container] [blob]").description($("Show the copy status")).option("--container <container>", $("the destination container in the blob copy start operation")).option("--blob <blob>", $("the destination blob in the blob copy start operation")).option("--sas <sas>", $("the shared access signature of the destination storage containe or blob")).addStorageAccountOption().execute(showBlobCopy);
  copy.command("stop [container] [blob] [copyid]").usage("[options] [container] [blob] [copyid]").description($("Stop the copy operation")).option("--container <container>", $("the destination container in the blob copy start operation")).option("--blob <blob>", $("the destination blob in the blob copy start operation")).option("--copyid <copyid>", $("the copy ID which is returned from blob copy start operation")).addStorageAccountOption().execute(stopBlobCopy);
  var blobSas = blob.category("sas").description($("Commands to manage shared access signature of your Storage blob"));
  blobSas.command("create [container] [blob] [permissions] [expiry]").description($("Generate shared access signature of storage blob")).option("--container <container>", $("the storage container name")).option("--blob <blobName>", $("the storage blob name")).option("--permissions <permissions>", $("the operation permissions combining symbols of r(Read)/w(Write)/d(Delete)")).option("--start <start>", $("the UTC time at which the SAS becomes valid")).option("--expiry <expiry>", $("the UTC time at which the SAS expires")).option("--policy <policy>", $("the stored access policy identifier")).addStorageAccountOption().execute(createBlobSAS);
  function getStorageBlobOperation(serviceClient, operationName) {
    var operation = new StorageUtil.StorageOperation();
    operation.type = StorageUtil.OperationType.Blob;
    operation.operation = operationName;
    operation.service = serviceClient;
    return operation;
  };
  function getStorageBlobOperationDefaultOption() {
    var option = StorageUtil.getStorageOperationDefaultOption();
    option.parallelOperationThreadCount = StorageUtil.threadsInOperation;
    return option;
  };
  function getBlobServiceClient(options) {
    var serviceClient = StorageUtil.getServiceClient(StorageUtil.getBlobService, options);
    applyBlobServicePatch(serviceClient);
    return serviceClient;
  };
  function createContainerPolicySetting(options) {
    var policySettings = {
    };
    policySettings.accessType = StorageUtil.AccessType.Container;
    policySettings.serviceClient = getBlobServiceClient(options);
    policySettings.getAclOperation = getStorageBlobOperation(policySettings.serviceClient, "getContainerAcl");
    policySettings.setAclOperation = getStorageBlobOperation(policySettings.serviceClient, "setContainerAcl");
    policySettings.storageOptions = getStorageBlobOperationDefaultOption();
    policySettings.policyOptions = options;
    return policySettings;
  };
  function listAzureContainersWithAcl(prefix, options, _) {
    var blobService, listOperation, tips, containerOpts, useWildcard, containers, supportACL;
    var __frame = {
      name: "listAzureContainersWithAcl",
      line: 337
    };
    return __func(_, this, arguments, listAzureContainersWithAcl, 2, __frame, function __$listAzureContainersWithAcl() {
      blobService = getBlobServiceClient(options);
      listOperation = getStorageBlobOperation(blobService, "listAllContainers");
      tips = $("Getting storage containers");
      containerOpts = getStorageBlobOperationDefaultOption();
      useWildcard = false;
      containerOpts.include = "metadata";
      if (Wildcard.containWildcards(prefix)) {
        containerOpts.prefix = Wildcard.getNonWildcardPrefix(prefix);
        useWildcard = true;
      }
       else {
        containerOpts.prefix = prefix;
      }
      ;
      containers = [];
      startProgress(tips);
      return (function ___(__then) {
        (function ___(_) {
          __tryCatch(_, function __$listAzureContainersWithAcl() {
            supportACL = true;
            return performStorageOperation(listOperation, __cb(_, __frame, 21, 6, function ___(__0, __2) {
              return __2.forEach_(__cb(_, __frame, 21, 63, function __$listAzureContainersWithAcl() {
                _(null, null, true);
              }, true), 1, function __1(_, container) {
                var aclOperation, aclOptions, permission, level;
                var __frame = {
                  name: "__1",
                  line: 358
                };
                return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                  if ((useWildcard && !Wildcard.isMatch(container.name, prefix))) {
                    return _(null);
                  }
                  ;
                  containers.push(container);
                  return (function __$__1(__then) {
                    if (supportACL) {
                      return (function ___(__then) {
                        (function ___(_) {
                          __tryCatch(_, function __$__1() {
                            aclOperation = getStorageBlobOperation(blobService, "getContainerAcl");
                            aclOptions = StorageUtil.getStorageOperationDefaultOption();
                            return performStorageOperation(aclOperation, __cb(_, __frame, 11, 29, function ___(__0, __1) {
                              permission = __1;
                              level = StorageUtil.containerAccessLevelToString(permission.publicAccessLevel);
                              container.publicAccessLevel = level;
                              __then();
                            }, true), container.name, aclOptions);
                          });
                        })(function ___(e, __result) {
                          __catch(function __$__1() {
                            if (e) {
                              supportACL = false;
                              logger.warn($("Current storage account doesn't support getting ACL"));
                              __then();
                            }
                             else {
                              _(null, __result);
                            }
                            ;
                          }, _);
                        });
                      })(function ___() {
                        __tryCatch(_, __then);
                      });
                    }
                     else {
                      __then();
                    }
                    ;
                  })(_);
                });
              });
            }, true), containerOpts);
          });
        })(function ___(__e, __r, __cont) {
          (function ___(__then) {
            __tryCatch(_, function __$listAzureContainersWithAcl() {
              endProgress();
              __then();
            });
          })(function ___() {
            __tryCatch(_, function ___() {
              if (__cont) {
                __then();
              } else {
                _(__e, __r);
              };
            });
          });
        });
      })(function ___() {
        __tryCatch(_, function __$listAzureContainersWithAcl() {
          cli.interaction.formatOutput(containers, function(outputData) {
            if ((outputData.length === 0)) {
              logger.info($("No containers found"));
            }
             else {
              logger.table(outputData, function(row, item) {
                row.cell($("Name"), item.name);
                row.cell($("Public-Access"), item.publicAccessLevel);
                row.cell($("Last-Modified"), item.properties["last-modified"]);
              });
            }
            ;
          });
          _();
        });
      });
    });
  };
  function showAzureContainer(container, options, _) {
    var blobService, propertiesOperation, tips, showOptions, aclOperation, properties, permission, level;
    var __frame = {
      name: "showAzureContainer",
      line: 399
    };
    return __func(_, this, arguments, showAzureContainer, 2, __frame, function __$showAzureContainer() {
      blobService = getBlobServiceClient(options);
      return interaction.promptIfNotGiven($("Container name: "), container, __cb(_, __frame, 2, 28, function ___(__0, __1) {
        container = __1;
        propertiesOperation = getStorageBlobOperation(blobService, "getContainerProperties");
        tips = $("Getting Storage container information");
        showOptions = getStorageBlobOperationDefaultOption();
        aclOperation = getStorageBlobOperation(blobService, "getContainerAcl");
        properties = {
        };
        startProgress(tips);
        return (function ___(__then) {
          (function ___(_) {
            __tryCatch(_, function __$showAzureContainer() {
              return (function ___(__then) {
                (function ___(_) {
                  __tryCatch(_, function __$showAzureContainer() {
                    return performStorageOperation(propertiesOperation, __cb(_, __frame, 13, 19, function ___(__0, __2) {
                      properties = __2;
                      return (function ___(__then) {
                        (function ___(_) {
                          __tryCatch(_, function __$showAzureContainer() {
                            return performStorageOperation(aclOperation, __cb(_, __frame, 15, 25, function ___(__0, __3) {
                              permission = __3;
                              level = StorageUtil.containerAccessLevelToString(permission.publicAccessLevel);
                              properties.publicAccessLevel = level;
                              __then();
                            }, true), container, showOptions);
                          });
                        })(function ___(e, __result) {
                          __catch(function __$showAzureContainer() {
                            if (e) {
                              logger.warn($("Current storage account doesn't support getting ACL"));
                              __then();
                            }
                             else {
                              _(null, __result);
                            }
                            ;
                          }, _);
                        });
                      })(function ___() {
                        __tryCatch(_, __then);
                      });
                    }, true), container, showOptions);
                  });
                })(function ___(e, __result) {
                  __catch(function __$showAzureContainer() {
                    if (e) {
                      if (StorageUtil.isNotFoundException(e)) {
                        return _(new Error(util.format($("Container %s doesn't exist"), container)));
                      }
                       else {
                        return _(e);
                      }
                      ;
                      __then();
                    }
                     else {
                      _(null, __result);
                    }
                    ;
                  }, _);
                });
              })(function ___() {
                __tryCatch(_, function __$showAzureContainer() {
                  _(null, null, true);
                });
              });
            });
          })(function ___(__e, __r, __cont) {
            (function ___(__then) {
              __tryCatch(_, function __$showAzureContainer() {
                endProgress();
                __then();
              });
            })(function ___() {
              __tryCatch(_, function ___() {
                if (__cont) {
                  __then();
                } else {
                  _(__e, __r);
                };
              });
            });
          });
        })(function ___() {
          __tryCatch(_, function __$showAzureContainer() {
            logger.json(properties);
            _();
          });
        });
      }, true));
    });
  };
  function createAzureContainer(container, options, _) {
    var blobService, operation, tips, storageOptions, permission, created, aclOperation, accessLevel;
    var __frame = {
      name: "createAzureContainer",
      line: 437
    };
    return __func(_, this, arguments, createAzureContainer, 2, __frame, function __$createAzureContainer() {
      blobService = getBlobServiceClient(options);
      return interaction.promptIfNotGiven($("Container name: "), container, __cb(_, __frame, 2, 28, function ___(__0, __1) {
        container = __1;
        operation = getStorageBlobOperation(blobService, "createContainerIfNotExists");
        tips = util.format($("Creating storage container %s"), container);
        storageOptions = getStorageBlobOperationDefaultOption();
        permission = options.permission;
        if (permission) {
          validation.isValidEnumValue(permission, Object.keys(BlobUtilities.BlobContainerPublicAccessType));
        }
        ;
        startProgress(tips);
        return (function ___(__then) {
          (function ___(_) {
            __tryCatch(_, function __$createAzureContainer() {
              return performStorageOperation(operation, __cb(_, __frame, 13, 20, function ___(__0, __2) {
                created = __2;
                return (function __$createAzureContainer(__then) {
                  if ((created === false)) {
                    return _(new Error(util.format($("Container '%s' already exists"), container)));
                  }
                   else {
                    return (function __$createAzureContainer(__then) {
                      if (permission) {
                        return (function ___(__then) {
                          (function ___(_) {
                            __tryCatch(_, function __$createAzureContainer() {
                              aclOperation = getStorageBlobOperation(blobService, "setContainerAcl");
                              accessLevel = StorageUtil.stringToContainerAccessLevel(permission);
                              return performStorageOperation(aclOperation, __cb(_, __frame, 21, 10, __then, true), container, null, accessLevel, storageOptions);
                            });
                          })(function ___(e, __result) {
                            __catch(function __$createAzureContainer() {
                              if (e) {
                                logger.warn($("Current storage account doesn't support setting ACL"));
                                __then();
                              }
                               else {
                                _(null, __result);
                              }
                              ;
                            }, _);
                          });
                        })(function ___() {
                          __tryCatch(_, __then);
                        });
                      }
                       else {
                        __then();
                      }
                      ;
                    })(__then);
                  }
                  ;
                })(function __$createAzureContainer() {
                  _(null, null, true);
                });
              }, true), container, storageOptions);
            });
          })(function ___(__e, __r, __cont) {
            (function ___(__then) {
              __tryCatch(_, function __$createAzureContainer() {
                endProgress();
                __then();
              });
            })(function ___() {
              __tryCatch(_, function ___() {
                if (__cont) {
                  __then();
                } else {
                  _(__e, __r);
                };
              });
            });
          });
        })(function ___() {
          __tryCatch(_, function __$createAzureContainer() {
            logger.verbose(util.format($("Container %s created successfully"), container));
            return showAzureContainer(container, StorageUtil.getStorageAccountOptions(options), __cb(_, __frame, 31, 4, function __$createAzureContainer() {
              _();
            }, true));
          });
        });
      }, true));
    });
  };
  function deleteAzureContainer(container, options, _) {
    var blobService, tips, operation, storageOptions, force;
    var __frame = {
      name: "deleteAzureContainer",
      line: 474
    };
    return __func(_, this, arguments, deleteAzureContainer, 2, __frame, function __$deleteAzureContainer() {
      blobService = getBlobServiceClient(options);
      return interaction.promptIfNotGiven($("Container name: "), container, __cb(_, __frame, 2, 28, function ___(__0, __1) {
        container = __1;
        tips = util.format($("Deleting Container %s"), container);
        operation = getStorageBlobOperation(blobService, "deleteContainer");
        storageOptions = getStorageBlobOperationDefaultOption();
        force = !!options.quiet;
        return (function __$deleteAzureContainer(__then) {
          if ((force !== true)) {
            return interaction.confirm(util.format($("Do you want to remove the storage container %s? "), container), __cb(_, __frame, 9, 26, function ___(__0, __2) {
              force = __2;
              if ((force !== true)) {
                return _(null);
              }
              ;
              __then();
            }, true));
          }
           else {
            __then();
          }
          ;
        })(function __$deleteAzureContainer() {
          startProgress(tips);
          return (function ___(__then) {
            (function ___(_) {
              __tryCatch(_, function __$deleteAzureContainer() {
                return (function ___(__then) {
                  (function ___(_) {
                    __tryCatch(_, function __$deleteAzureContainer() {
                      return performStorageOperation(operation, __cb(_, __frame, 18, 6, __then, true), container, storageOptions);
                    });
                  })(function ___(e, __result) {
                    __catch(function __$deleteAzureContainer() {
                      if (e) {
                        if (StorageUtil.isNotFoundException(e)) {
                          return _(new Error(util.format($("Can not find container '%s'"), container)));
                        }
                         else {
                          return _(e);
                        }
                        ;
                        __then();
                      }
                       else {
                        _(null, __result);
                      }
                      ;
                    }, _);
                  });
                })(function ___() {
                  __tryCatch(_, function __$deleteAzureContainer() {
                    _(null, null, true);
                  });
                });
              });
            })(function ___(__e, __r, __cont) {
              (function ___(__then) {
                __tryCatch(_, function __$deleteAzureContainer() {
                  endProgress();
                  __then();
                });
              })(function ___() {
                __tryCatch(_, function ___() {
                  if (__cont) {
                    __then();
                  } else {
                    _(__e, __r);
                  };
                });
              });
            });
          })(function ___() {
            __tryCatch(_, function __$deleteAzureContainer() {
              logger.info(util.format($("Container %s deleted successfully"), container));
              _();
            });
          });
        });
      }, true));
    });
  };
  function setAzureContainer(container, options, _) {
    var blobService, tips;
    var __frame = {
      name: "setAzureContainer",
      line: 509
    };
    return __func(_, this, arguments, setAzureContainer, 2, __frame, function __$setAzureContainer() {
      blobService = getBlobServiceClient(options);
      return interaction.promptIfNotGiven($("Container name: "), container, __cb(_, __frame, 2, 28, function ___(__0, __1) {
        container = __1;
        tips = $("Set container");
        startProgress(tips);
        return setAzureContainerAcl(blobService, container, options.permission, __cb(_, __frame, 6, 4, function __$setAzureContainer() {
          endProgress();
          return showAzureContainer(container, StorageUtil.getStorageAccountOptions(options), __cb(_, __frame, 9, 4, function __$setAzureContainer() {
            _();
          }, true));
        }, true));
      }, true));
    });
  };
  function setAzureContainerAcl(blobService, container, permission, _) {
    var operation, storageOptions, accessLevel;
    var __frame = {
      name: "setAzureContainerAcl",
      line: 524
    };
    return __func(_, this, arguments, setAzureContainerAcl, 3, __frame, function __$setAzureContainerAcl() {
      return (function __$setAzureContainerAcl(__then) {
        if (permission) {
          return (function ___(__then) {
            (function ___(_) {
              __tryCatch(_, function __$setAzureContainerAcl() {
                operation = getStorageBlobOperation(blobService, "setContainerAcl");
                storageOptions = getStorageBlobOperationDefaultOption();
                validation.isValidEnumValue(permission, Object.keys(BlobUtilities.BlobContainerPublicAccessType));
                accessLevel = StorageUtil.stringToContainerAccessLevel(permission);
                return performStorageOperation(operation, __cb(_, __frame, 7, 8, __then, true), container, null, accessLevel, storageOptions);
              });
            })(function ___(e, __result) {
              __catch(function __$setAzureContainerAcl() {
                if (e) {
                  logger.warn($("Current storage account doesn't support setting ACL"));
                  __then();
                }
                 else {
                  _(null, __result);
                }
                ;
              }, _);
            });
          })(function ___() {
            __tryCatch(_, __then);
          });
        }
         else {
          __then();
        }
        ;
      })(_);
    });
  };
  function createContainerSAS(container, permissions, expiry, options, _) {
    var __frame = {
      name: "createContainerSAS",
      line: 541
    };
    return __func(_, this, arguments, createContainerSAS, 4, __frame, function __$createContainerSAS() {
      return createBlobSAS(container, null, permissions, expiry, options, __cb(_, __frame, 1, 4, function __$createContainerSAS() {
        _();
      }, true));
    });
  };
  function createBlobSAS(container, blob, permissions, expiry, options, _) {
    var blobService, isOnContainer, start, output, sharedAccessPolicy, tips;
    var __frame = {
      name: "createBlobSAS",
      line: 548
    };
    return __func(_, this, arguments, createBlobSAS, 5, __frame, function __$createBlobSAS() {
      blobService = getBlobServiceClient(options);
      isOnContainer = !blob;
      return interaction.promptIfNotGiven($("Container name: "), container, __cb(_, __frame, 3, 28, function ___(__0, __1) {
        container = __1;
        return interaction.promptIfNotGiven($("Blob name: "), blob, __cb(_, __frame, 5, 23, function ___(__0, __2) {
          blob = __2;
          return (function __$createBlobSAS(__then) {
            if (!options.policy) {
              return interaction.promptIfNotGiven($("Permissions: "), permissions, __cb(_, __frame, 8, 32, function ___(__0, __3) {
                permissions = __3;
                if (isOnContainer) {
                  StorageUtil.validatePermissions(StorageUtil.AccessType.Container, permissions);
                }
                 else {
                  StorageUtil.validatePermissions(StorageUtil.AccessType.Blob, permissions);
                }
                ;
                return interaction.promptIfNotGiven($("Expiry: "), expiry, __cb(_, __frame, 15, 27, function ___(__0, __4) {
                  expiry = __4;
                  expiry = validation.parseDateTime(expiry);
                  __then();
                }, true));
              }, true));
            }
             else {
              __then();
            }
            ;
          })(function __$createBlobSAS() {
            if (options.start) {
              start = validation.parseDateTime(options.start);
            }
            ;
            output = {
              sas: ""
            };
            sharedAccessPolicy = StorageUtil.getSharedAccessPolicy(permissions, start, expiry, null, options.policy);
            if (isOnContainer) {
              tips = util.format($("Creating shared access signature for container %s"), container);
            }
             else {
              tips = util.format($("Creating shared access signature for blob %s in container %s"), blob, container);
            }
            ;
            startProgress(tips);
            return (function ___(__then) {
              (function ___(_) {
                __tryCatch(_, function __$createBlobSAS() {
                  output.sas = blobService.generateSharedAccessSignature(container, blob, sharedAccessPolicy);
                  _(null, null, true);
                });
              })(function ___(__e, __r, __cont) {
                (function ___(__then) {
                  __tryCatch(_, function __$createBlobSAS() {
                    endProgress();
                    __then();
                  });
                })(function ___() {
                  __tryCatch(_, function ___() {
                    if (__cont) {
                      __then();
                    } else {
                      _(__e, __r);
                    };
                  });
                });
              });
            })(function ___() {
              __tryCatch(_, function __$createBlobSAS() {
                cli.interaction.formatOutput(output, function(outputData) {
                  logger.data($("Shared Access Signature"), outputData.sas);
                });
                _();
              });
            });
          });
        }, true));
      }, true));
    });
  };
  function createContainerPolicy(container, name, options, _) {
    var createPolicySettings, policies;
    var __frame = {
      name: "createContainerPolicy",
      line: 595
    };
    return __func(_, this, arguments, createContainerPolicy, 3, __frame, function __$createContainerPolicy() {
      createPolicySettings = createContainerPolicySetting(options);
      return interaction.promptIfNotGiven($("Container name: "), container, __cb(_, __frame, 2, 52, function ___(__0, __1) {
        createPolicySettings.resourceName = __1;
        return interaction.promptIfNotGiven($("Policy name: "), name, __cb(_, __frame, 3, 50, function ___(__0, __2) {
          createPolicySettings.policyName = __2;
          createPolicySettings.tips = util.format($("Creating the stored access policy %s on the container %s"), createPolicySettings.policyName, createPolicySettings.resourceName);
          if (options.permissions) {
            StorageUtil.validatePermissions(StorageUtil.AccessType.Container, options.permissions);
          }
          ;
          return StorageUtil.createPolicy(createPolicySettings, __cb(_, __frame, 10, 31, function ___(__0, __3) {
            policies = __3;
            cli.interaction.formatOutput(policies, function(outputData) {
              logger.info(util.format($("The stored access policies on container %s are: "), createPolicySettings.resourceName));
              StorageUtil.showPolicyResults(outputData);
            });
            _();
          }, true));
        }, true));
      }, true));
    });
  };
  function listContainerPolicy(container, options, _) {
    var listPolicySettings, policies;
    var __frame = {
      name: "listContainerPolicy",
      line: 615
    };
    return __func(_, this, arguments, listContainerPolicy, 2, __frame, function __$listContainerPolicy() {
      listPolicySettings = createContainerPolicySetting(options);
      return interaction.promptIfNotGiven($("Container name: "), container, __cb(_, __frame, 2, 50, function ___(__0, __1) {
        listPolicySettings.resourceName = __1;
        listPolicySettings.tips = util.format($("Listing the stored access policies on the container %s"), listPolicySettings.resourceName);
        return StorageUtil.selectPolicy(listPolicySettings, __cb(_, __frame, 5, 31, function ___(__0, __2) {
          policies = __2;
          cli.interaction.formatOutput(policies, function(outputData) {
            if (outputData) {
              StorageUtil.showPolicyResults(outputData);
            }
             else {
              logger.info(util.format($("There is no stored access policy on the container %s."), listPolicySettings.resourceName));
            }
            ;
          });
          _();
        }, true));
      }, true));
    });
  };
  function showContainerPolicy(container, name, options, _) {
    var showPolicySettings, policy;
    var __frame = {
      name: "showContainerPolicy",
      line: 633
    };
    return __func(_, this, arguments, showContainerPolicy, 3, __frame, function __$showContainerPolicy() {
      showPolicySettings = createContainerPolicySetting(options);
      return interaction.promptIfNotGiven($("Container name: "), container, __cb(_, __frame, 2, 50, function ___(__0, __1) {
        showPolicySettings.resourceName = __1;
        return interaction.promptIfNotGiven($("Policy name: "), name, __cb(_, __frame, 3, 48, function ___(__0, __2) {
          showPolicySettings.policyName = __2;
          showPolicySettings.tips = util.format($("Showing the stored access policy %s on the container %s"), showPolicySettings.policyName, showPolicySettings.resourceName);
          return StorageUtil.selectPolicy(showPolicySettings, __cb(_, __frame, 6, 29, function ___(__0, __3) {
            policy = __3;
            cli.interaction.formatOutput(policy, function(outputData) {
              StorageUtil.showPolicyResults(outputData);
            });
            _();
          }, true));
        }, true));
      }, true));
    });
  };
  function setContainerPolicy(container, name, options, _) {
    var setPolicySettings, policies;
    var __frame = {
      name: "setContainerPolicy",
      line: 648
    };
    return __func(_, this, arguments, setContainerPolicy, 3, __frame, function __$setContainerPolicy() {
      setPolicySettings = createContainerPolicySetting(options);
      return interaction.promptIfNotGiven($("Container name: "), container, __cb(_, __frame, 2, 49, function ___(__0, __1) {
        setPolicySettings.resourceName = __1;
        return interaction.promptIfNotGiven($("Policy name: "), name, __cb(_, __frame, 3, 47, function ___(__0, __2) {
          setPolicySettings.policyName = __2;
          setPolicySettings.tips = util.format($("Setting the stored access policy %s on the container %s"), setPolicySettings.policyName, setPolicySettings.resourceName);
          if (options.permissions) {
            StorageUtil.validatePermissions(StorageUtil.AccessType.Container, options.permissions);
          }
          ;
          return StorageUtil.setPolicy(setPolicySettings, __cb(_, __frame, 10, 31, function ___(__0, __3) {
            policies = __3;
            cli.interaction.formatOutput(policies, function(outputData) {
              logger.info(util.format($("The stored access policies on container %s are: "), setPolicySettings.resourceName));
              StorageUtil.showPolicyResults(outputData);
            });
            _();
          }, true));
        }, true));
      }, true));
    });
  };
  function deleteContainerPolicy(container, name, options, _) {
    var deletePolicySettings, policies;
    var __frame = {
      name: "deleteContainerPolicy",
      line: 668
    };
    return __func(_, this, arguments, deleteContainerPolicy, 3, __frame, function __$deleteContainerPolicy() {
      deletePolicySettings = createContainerPolicySetting(options);
      return interaction.promptIfNotGiven($("Container name: "), container, __cb(_, __frame, 2, 52, function ___(__0, __1) {
        deletePolicySettings.resourceName = __1;
        return interaction.promptIfNotGiven($("Policy name: "), name, __cb(_, __frame, 3, 50, function ___(__0, __2) {
          deletePolicySettings.policyName = __2;
          deletePolicySettings.tips = util.format($("Deleting the stored access policy %s on the container %s"), deletePolicySettings.policyName, deletePolicySettings.resourceName);
          return StorageUtil.deletePolicy(deletePolicySettings, __cb(_, __frame, 6, 31, function ___(__0, __3) {
            policies = __3;
            cli.interaction.formatOutput(policies, function(outputData) {
              if (outputData) {
                logger.info(util.format($("The stored access policies on container %s are: "), deletePolicySettings.resourceName));
                StorageUtil.showPolicyResults(outputData);
              }
               else {
                logger.info(util.format($("There is no stored access policy on the container %s."), deletePolicySettings.resourceName));
              }
              ;
            });
            _();
          }, true));
        }, true));
      }, true));
    });
  };
  function listAzureBlob(container, blobName, options, _) {
    var blobService, specifiedContainerName, tips, operation, storageOptions, useWildcard, inputBlobName, blobs, outputBlobs, i, len, blob;
    var __frame = {
      name: "listAzureBlob",
      line: 688
    };
    return __func(_, this, arguments, listAzureBlob, 3, __frame, function __$listAzureBlob() {
      blobService = getBlobServiceClient(options);
      return interaction.promptIfNotGiven($("Container name: "), container, __cb(_, __frame, 2, 45, function ___(__0, __1) {
        specifiedContainerName = __1;
        tips = util.format($("Getting blobs in container %s"), specifiedContainerName);
        operation = getStorageBlobOperation(blobService, "listAllBlobs");
        storageOptions = getStorageBlobOperationDefaultOption();
        useWildcard = false;
        inputBlobName = blobName;
        if (Wildcard.containWildcards(inputBlobName)) {
          storageOptions.prefix = Wildcard.getNonWildcardPrefix(inputBlobName);
          useWildcard = true;
        }
         else {
          storageOptions.prefix = inputBlobName;
        }
        ;
        storageOptions.include = "snapshots,metadata,copy";
        blobs = [];
        startProgress(tips);
        return (function ___(__then) {
          (function ___(_) {
            __tryCatch(_, function __$listAzureBlob() {
              return performStorageOperation(operation, __cb(_, __frame, 20, 14, function ___(__0, __2) {
                blobs = __2;
                _(null, null, true);
              }, true), specifiedContainerName, storageOptions);
            });
          })(function ___(__e, __r, __cont) {
            (function ___(__then) {
              __tryCatch(_, function __$listAzureBlob() {
                endProgress();
                __then();
              });
            })(function ___() {
              __tryCatch(_, function ___() {
                if (__cont) {
                  __then();
                } else {
                  _(__e, __r);
                };
              });
            });
          });
        })(function ___() {
          __tryCatch(_, function __$listAzureBlob() {
            outputBlobs = [];
            if (useWildcard) {
              for (i = 0, len = blobs.length; (i < len); i++) {
                blob = blobs[i];
                if (Wildcard.isMatch(blob.name, inputBlobName)) {
                  outputBlobs.push(blob);
                }
                ;
              };
            }
             else {
              outputBlobs = blobs;
            }
            ;
            cli.interaction.formatOutput(outputBlobs, function(outputData) {
              if ((outputData.length === 0)) {
                logger.info($("No blobs found"));
              }
               else {
                logger.table(outputData, function(row, item) {
                  row.cell($("Name"), item.name);
                  row.cell($("BlobType"), item.properties.blobtype);
                  row.cell($("Length"), item.properties["content-length"]);
                  row.cell($("Content-Type"), item.properties["content-type"]);
                  row.cell($("Last-Modified"), item.properties["last-modified"]);
                  row.cell($("SnapshotTime"), (item.snapshot || ""));
                });
              }
              ;
            });
            _();
          });
        });
      }, true));
    });
  };
  function showAzureBlob(containerName, blobName, options, _) {
    var blob;
    var __frame = {
      name: "showAzureBlob",
      line: 745
    };
    return __func(_, this, arguments, showAzureBlob, 3, __frame, function __$showAzureBlob() {
      return getAzureBlobProperties(containerName, blobName, options, __cb(_, __frame, 1, 15, function ___(__0, __1) {
        blob = __1;
        logBlobProperties(blob);
        _();
      }, true));
    });
  };
  function logBlobProperties(properties) {
    if (!properties) {
      return
    };
    cli.interaction.formatOutput(properties, function(data) {
      var outputProperties = ["container","blob","blobType","contentLength","contentType","contentMD5",];
      var output = outputProperties.map(function(propertyName) {
        return {
          property: propertyName,
          value: data[propertyName]
        };
      });
      logger.table(output, function(row, item) {
        row.cell($("Property"), item.property);
        row.cell($("Value"), item.value);
      });
    });
  };
  function getAzureBlobProperties(container, blobName, options, _) {
    var blobService, specifiedContainerName, specifiedBlobName, storageOptions, blob, propertiesOperation, tips;
    var __frame = {
      name: "getAzureBlobProperties",
      line: 768
    };
    return __func(_, this, arguments, getAzureBlobProperties, 3, __frame, function __$getAzureBlobProperties() {
      blobService = getBlobServiceClient(options);
      return interaction.promptIfNotGiven($("Container name: "), container, __cb(_, __frame, 2, 45, function ___(__0, __1) {
        specifiedContainerName = __1;
        return interaction.promptIfNotGiven($("Blob name: "), blobName, __cb(_, __frame, 3, 40, function ___(__0, __2) {
          specifiedBlobName = __2;
          storageOptions = getStorageBlobOperationDefaultOption();
          blob = {
          };
          propertiesOperation = getStorageBlobOperation(blobService, "getBlobProperties");
          tips = $("Getting Storage blob information");
          startProgress(tips);
          return (function ___(__then) {
            (function ___(_) {
              __tryCatch(_, function __$getAzureBlobProperties() {
                return (function ___(__then) {
                  (function ___(_) {
                    __tryCatch(_, function __$getAzureBlobProperties() {
                      return performStorageOperation(propertiesOperation, __cb(_, __frame, 12, 13, function ___(__0, __3) {
                        blob = __3;
                        __then();
                      }, true), specifiedContainerName, specifiedBlobName, storageOptions);
                    });
                  })(function ___(e, __result) {
                    __catch(function __$getAzureBlobProperties() {
                      if (e) {
                        if (StorageUtil.isNotFoundException(e)) {
                          return _(new Error(util.format($("Blob %s in Container %s doesn't exist"), specifiedBlobName, specifiedContainerName)));
                        }
                         else {
                          return _(e);
                        }
                        ;
                        __then();
                      }
                       else {
                        _(null, __result);
                      }
                      ;
                    }, _);
                  });
                })(function ___() {
                  __tryCatch(_, function __$getAzureBlobProperties() {
                    _(null, null, true);
                  });
                });
              });
            })(function ___(__e, __r, __cont) {
              (function ___(__then) {
                __tryCatch(_, function __$getAzureBlobProperties() {
                  endProgress();
                  __then();
                });
              })(function ___() {
                __tryCatch(_, function ___() {
                  if (__cont) {
                    __then();
                  } else {
                    _(__e, __r);
                  };
                });
              });
            });
          })(function ___() {
            __tryCatch(_, function __$getAzureBlobProperties() {
              return _(null, blob);
            });
          });
        }, true));
      }, true));
    });
  };
  function deleteAzureBlob(container, blobName, options, _) {
    var blobService, specifiedContainerName, specifiedBlobName, storageOptions, tips, operation;
    var __frame = {
      name: "deleteAzureBlob",
      line: 796
    };
    return __func(_, this, arguments, deleteAzureBlob, 3, __frame, function __$deleteAzureBlob() {
      blobService = getBlobServiceClient(options);
      return interaction.promptIfNotGiven($("Container name: "), container, __cb(_, __frame, 2, 45, function ___(__0, __1) {
        specifiedContainerName = __1;
        return interaction.promptIfNotGiven($("Blob name: "), blobName, __cb(_, __frame, 3, 40, function ___(__0, __2) {
          specifiedBlobName = __2;
          storageOptions = getStorageBlobOperationDefaultOption();
          tips = util.format($("Deleting Blob %s in container %s"), blobName, container);
          operation = getStorageBlobOperation(blobService, "deleteBlob");
          startProgress(tips);
          return (function ___(__then) {
            (function ___(_) {
              __tryCatch(_, function __$deleteAzureBlob() {
                return (function ___(__then) {
                  (function ___(_) {
                    __tryCatch(_, function __$deleteAzureBlob() {
                      return performStorageOperation(operation, __cb(_, __frame, 10, 6, __then, true), specifiedContainerName, specifiedBlobName, storageOptions);
                    });
                  })(function ___(e, __result) {
                    __catch(function __$deleteAzureBlob() {
                      if (e) {
                        if (StorageUtil.isNotFoundException(e)) {
                          return _(new Error(util.format($("Can not find blob '%s' in container '%s'"), specifiedBlobName, specifiedContainerName)));
                        }
                         else {
                          return _(e);
                        }
                        ;
                        __then();
                      }
                       else {
                        _(null, __result);
                      }
                      ;
                    }, _);
                  });
                })(function ___() {
                  __tryCatch(_, function __$deleteAzureBlob() {
                    _(null, null, true);
                  });
                });
              });
            })(function ___(__e, __r, __cont) {
              (function ___(__then) {
                __tryCatch(_, function __$deleteAzureBlob() {
                  endProgress();
                  __then();
                });
              })(function ___() {
                __tryCatch(_, function ___() {
                  if (__cont) {
                    __then();
                  } else {
                    _(__e, __r);
                  };
                });
              });
            });
          })(function ___() {
            __tryCatch(_, function __$deleteAzureBlob() {
              logger.info(util.format($("Blob %s deleted successfully"), blobName));
              _();
            });
          });
        }, true));
      }, true));
    });
  };
  function uploadAzureBlob(file, container, blobName, options, _) {
    var blobService, blobTypeName, specifiedContainerName, specifiedFileName, specifiedBlobName, specifiedBlobType, storageOptions, properties, force, summary, fsStatus, tips, blobProperties, propertiesOperation, operation, printer, intervalId;
    var __frame = {
      name: "uploadAzureBlob",
      line: 823
    };
    return __func(_, this, arguments, uploadAzureBlob, 4, __frame, function __$uploadAzureBlob() {
      blobService = getBlobServiceClient(options);
      blobTypeName = (options.blobtype || "BLOCK");
      validation.isValidEnumValue(blobTypeName, Object.keys(BlobConstants.BlobTypes));
      return interaction.promptIfNotGiven($("Container name: "), container, __cb(_, __frame, 4, 45, function ___(__0, __1) {
        specifiedContainerName = __1;
        return interaction.promptIfNotGiven($("File name: "), file, __cb(_, __frame, 5, 40, function ___(__0, __2) {
          specifiedFileName = __2;
          specifiedBlobName = blobName;
          specifiedBlobType = BlobConstants.BlobTypes[blobTypeName.toUpperCase()];
          storageOptions = getStorageBlobOperationDefaultOption();
          properties = StorageUtil.parseKvParameter(options.properties);
          force = options.quiet;
          storageOptions.metadata = StorageUtil.parseKvParameter(options.metadata);
          storageOptions.storeBlobContentMD5 = true;
          StorageUtil.formatBlobProperties(properties, storageOptions);
          summary = new SpeedSummary(specifiedBlobName);
          storageOptions.speedSummary = summary;
          if (!specifiedBlobName) {
            specifiedBlobName = path.basename(specifiedFileName);
          }
          ;
          specifiedBlobName = StorageUtil.convertFileNameToBlobName(specifiedBlobName);
          return utils.fileExists(specifiedFileName, __cb(_, __frame, 22, 15, function ___(__0, __4) {
            var __3 = !__4;
            return (function __$uploadAzureBlob(__then) {
              if (__3) {
                return _(new Error(util.format($("Local file %s doesn't exist"), specifiedFileName)));
              }
               else {
                __then();
              }
              ;
            })(function __$uploadAzureBlob() {
              return fs.stat(specifiedFileName, __cb(_, __frame, 25, 22, function ___(__0, __5) {
                fsStatus = __5;
                if (!fsStatus.isFile()) {
                  return _(new Error(util.format($("%s is not a file"), specifiedFileName)));
                }
                ;
                tips = "";
                return (function __$uploadAzureBlob(__then) {
                  if ((force !== true)) {
                    blobProperties = null;
                    return (function ___(__then) {
                      (function ___(_) {
                        __tryCatch(_, function __$uploadAzureBlob() {
                          return (function ___(__then) {
                            (function ___(_) {
                              __tryCatch(_, function __$uploadAzureBlob() {
                                tips = util.format($("Checking blob %s in container %s"), specifiedBlobName, specifiedContainerName);
                                startProgress(tips);
                                propertiesOperation = getStorageBlobOperation(blobService, "getBlobProperties");
                                return performStorageOperation(propertiesOperation, __cb(_, __frame, 36, 25, function ___(__0, __6) {
                                  blobProperties = __6;
                                  __then();
                                }, true), specifiedContainerName, specifiedBlobName, storageOptions);
                              });
                            })(function ___(e, __result) {
                              __catch(function __$uploadAzureBlob() {
                                if (e) {
                                  if (!StorageUtil.isNotFoundException(e)) {
                                    return _(e);
                                  }
                                  ;
                                  __then();
                                }
                                 else {
                                  _(null, __result);
                                }
                                ;
                              }, _);
                            });
                          })(function ___() {
                            __tryCatch(_, function __$uploadAzureBlob() {
                              _(null, null, true);
                            });
                          });
                        });
                      })(function ___(__e, __r, __cont) {
                        (function ___(__then) {
                          __tryCatch(_, function __$uploadAzureBlob() {
                            endProgress();
                            __then();
                          });
                        })(function ___() {
                          __tryCatch(_, function ___() {
                            if (__cont) {
                              __then();
                            } else {
                              _(__e, __r);
                            };
                          });
                        });
                      });
                    })(function ___() {
                      __tryCatch(_, function __$uploadAzureBlob() {
                        return (function __$uploadAzureBlob(__then) {
                          if ((blobProperties !== null)) {
                            return (function __$uploadAzureBlob(__then) {
                              if ((blobProperties.blobType !== specifiedBlobType)) {
                                return _(new Error(util.format($("BlobType mismatch. The current blob type is %s"), blobProperties.blobType)));
                              }
                               else {
                                return interaction.confirm(util.format($("Do you want to remove the blob %s in container %s? "), specifiedBlobName, specifiedContainerName), __cb(_, __frame, 51, 27, function ___(__0, __8) {
                                  var __7 = !__8;
                                  return (function __$uploadAzureBlob(__then) {
                                    if (__7) {
                                      return _(null);
                                    }
                                     else {
                                      __then();
                                    }
                                    ;
                                  })(__then);
                                }, true));
                              }
                              ;
                            })(__then);
                          }
                           else {
                            __then();
                          }
                          ;
                        })(__then);
                      });
                    });
                  }
                   else {
                    __then();
                  }
                  ;
                })(function __$uploadAzureBlob() {
                  tips = util.format($("Uploading %s to blob %s in container %s"), specifiedFileName, specifiedBlobName, specifiedContainerName);
                  operation = getStorageBlobOperation(blobService, "createBlockBlobFromLocalFile");
                  storageOptions.parallelOperationThreadCount = (options.concurrenttaskcount || storageOptions.parallelOperationThreadCount);
                  printer = StorageUtil.getSpeedPrinter(summary);
                  intervalId = -1;
                  if (!logger.format().json) {
                    intervalId = setInterval(printer, 1000);
                  }
                  ;
                  startProgress(tips);
                  endProgress();
                  return (function ___(__then) {
                    (function ___(_) {
                      __tryCatch(_, function __$uploadAzureBlob() {
                        return (function ___(__then) {
                          (function ___(_) {
                            __tryCatch(_, function __$uploadAzureBlob() {
                              return (function __$uploadAzureBlob(__then) {
                                if ((blobTypeName.toLowerCase() === "page")) {
                                  operation = getStorageBlobOperation(blobService, "createPageBlobFromLocalFile");
                                  return performStorageOperation(operation, __cb(_, __frame, 73, 8, __then, true), specifiedContainerName, specifiedBlobName, specifiedFileName, storageOptions);
                                }
                                 else {
                                  operation = getStorageBlobOperation(blobService, "createBlockBlobFromLocalFile");
                                  return performStorageOperation(operation, __cb(_, __frame, 77, 8, __then, true), specifiedContainerName, specifiedBlobName, specifiedFileName, storageOptions);
                                }
                                ;
                              })(__then);
                            });
                          })(function ___(e, __result) {
                            __catch(function __$uploadAzureBlob() {
                              if (e) {
                                printer(true);
                                return _(e);
                              }
                               else {
                                _(null, __result);
                              }
                              ;
                            }, _);
                          });
                        })(function ___() {
                          __tryCatch(_, function __$uploadAzureBlob() {
                            _(null, null, true);
                          });
                        });
                      });
                    })(function ___(__e, __r, __cont) {
                      (function ___(__then) {
                        __tryCatch(_, function __$uploadAzureBlob() {
                          printer(true);
                          clearInterval(intervalId);
                          __then();
                        });
                      })(function ___() {
                        __tryCatch(_, function ___() {
                          if (__cont) {
                            __then();
                          } else {
                            _(__e, __r);
                          };
                        });
                      });
                    });
                  })(function ___() {
                    __tryCatch(_, function __$uploadAzureBlob() {
                      return showAzureBlob(specifiedContainerName, specifiedBlobName, StorageUtil.getStorageAccountOptions(options), __cb(_, __frame, 86, 4, function __$uploadAzureBlob() {
                        _();
                      }, true));
                    });
                  });
                });
              }, true));
            });
          }, true));
        }, true));
      }, true));
    });
  };
  function downloadAzureBlob(container, blobName, destination, options, _) {
    var blobService, specifiedContainerName, specifiedFileName, specifiedBlobName, dirName, fileName, isDirectory, force, fsStatus, structure, fullName, tips, storageOptions, operation, summary, printer, intervalId, downloadBlob, calcTips, blobProperties, propertiesOperation, downloadedBlob;
    var __frame = {
      name: "downloadAzureBlob",
      line: 915
    };
    return __func(_, this, arguments, downloadAzureBlob, 4, __frame, function __$downloadAzureBlob() {
      blobService = getBlobServiceClient(options);
      return interaction.promptIfNotGiven($("Container name: "), container, __cb(_, __frame, 2, 45, function ___(__0, __2) {
        specifiedContainerName = __2;
        specifiedFileName = (destination || ".");
        return interaction.promptIfNotGiven($("Blob name: "), blobName, __cb(_, __frame, 5, 40, function ___(__0, __3) {
          specifiedBlobName = __3;
          dirName = "";
          fileName = "";
          isDirectory = false;
          force = options.quiet;
          return (function __$downloadAzureBlob(__then) {
            if (utils.pathExistsSync(specifiedFileName)) {
              return fs.stat(specifiedFileName, __cb(_, __frame, 11, 24, function ___(__0, __4) {
                fsStatus = __4;
                isDirectory = fsStatus.isDirectory();
                __then();
              }, true));
            }
             else {
              if (((specifiedFileName === ".") || ((specifiedFileName.length && (specifiedFileName[(specifiedFileName.length - 1)] === path.sep))))) {
                isDirectory = true;
              }
              ;
              __then();
            }
            ;
          })(function __$downloadAzureBlob() {
            if (isDirectory) {
              dirName = specifiedFileName;
              fileName = "";
            }
             else {
              fileName = path.basename(specifiedFileName);
              dirName = path.dirname(specifiedFileName);
            }
            ;
            return utils.fileExists(dirName, __cb(_, __frame, 28, 15, function ___(__0, __6) {
              var __5 = !__6;
              return (function __$downloadAzureBlob(__then) {
                if (__5) {
                  return _(new Error(util.format($("Local directory %s doesn't exist"), dirName)));
                }
                 else {
                  __then();
                }
                ;
              })(function __$downloadAzureBlob() {
                if (!fileName) {
                  structure = StorageUtil.getStructureFromBlobName(specifiedBlobName);
                  fileName = structure.fileName;
                  fileName = utils.escapeFilePath(fileName);
                  structure.dirName = StorageUtil.recursiveMkdir(dirName, structure.dirName);
                  fileName = path.join(structure.dirName, fileName);
                  dirName = ".";
                }
                ;
                fullName = path.join(dirName, fileName);
                return (function __$downloadAzureBlob(_) {
                  var __1 = (force !== true);
                  if (!__1) {
                    return _(null, __1);
                  }
                  ;
                  return utils.fileExists(fullName, __cb(_, __frame, 42, 32, _, true));
                })(__cb(_, __frame, -914, 18, function ___(__0, __7) {
                  return (function __$downloadAzureBlob(__then) {
                    if (__7) {
                      return interaction.confirm(util.format($("Do you want to overwrite %s? "), fullName), __cb(_, __frame, 43, 23, function ___(__0, __9) {
                        var __8 = !__9;
                        return (function __$downloadAzureBlob(__then) {
                          if (__8) {
                            return _(null);
                          }
                           else {
                            __then();
                          }
                          ;
                        })(__then);
                      }, true));
                    }
                     else {
                      __then();
                    }
                    ;
                  })(function __$downloadAzureBlob() {
                    tips = util.format($("Download blob %s in container %s to %s"), specifiedBlobName, specifiedContainerName, fullName);
                    storageOptions = getStorageBlobOperationDefaultOption();
                    operation = getStorageBlobOperation(blobService, "getBlobToLocalFile");
                    storageOptions.parallelOperationThreadCount = (options.concurrenttaskcount || storageOptions.parallelOperationThreadCount);
                    summary = new SpeedSummary(specifiedBlobName);
                    storageOptions.speedSummary = summary;
                    storageOptions.checkMD5sum = options.checkmd5;
                    startProgress(tips);
                    endProgress();
                    printer = StorageUtil.getSpeedPrinter(summary);
                    intervalId = -1;
                    if (!logger.format().json) {
                      intervalId = setInterval(printer, 1000);
                    }
                    ;
                    downloadBlob = {
                    };
                    return (function ___(__then) {
                      (function ___(_) {
                        __tryCatch(_, function __$downloadAzureBlob() {
                          return (function ___(__then) {
                            (function ___(_) {
                              __tryCatch(_, function __$downloadAzureBlob() {
                                return performStorageOperation(operation, __cb(_, __frame, 64, 21, function ___(__0, __10) {
                                  downloadBlob = __10;
                                  __then();
                                }, true), specifiedContainerName, specifiedBlobName, fullName, storageOptions);
                              });
                            })(function ___(e, __result) {
                              __catch(function __$downloadAzureBlob() {
                                if (e) {
                                  printer(true);
                                  if (StorageUtil.isNotFoundException(e)) {
                                    return _(new Error(util.format($("Can not find blob '%s' in container '%s'"), specifiedBlobName, specifiedContainerName)));
                                  }
                                   else {
                                    return _(e);
                                  }
                                  ;
                                  __then();
                                }
                                 else {
                                  _(null, __result);
                                }
                                ;
                              }, _);
                            });
                          })(function ___() {
                            __tryCatch(_, function __$downloadAzureBlob() {
                              _(null, null, true);
                            });
                          });
                        });
                      })(function ___(__e, __r, __cont) {
                        (function ___(__then) {
                          __tryCatch(_, function __$downloadAzureBlob() {
                            printer(true);
                            clearInterval(intervalId);
                            __then();
                          });
                        })(function ___() {
                          __tryCatch(_, function ___() {
                            if (__cont) {
                              __then();
                            } else {
                              _(__e, __r);
                            };
                          });
                        });
                      });
                    })(function ___() {
                      __tryCatch(_, function __$downloadAzureBlob() {
                        return (function __$downloadAzureBlob(__then) {
                          if (options.checkmd5) {
                            calcTips = $("Calculating content md5");
                            blobProperties = {
                            };
                            startProgress(calcTips);
                            return (function ___(__then) {
                              (function ___(_) {
                                __tryCatch(_, function __$downloadAzureBlob() {
                                  propertiesOperation = getStorageBlobOperation(blobService, "getBlobProperties");
                                  return performStorageOperation(propertiesOperation, __cb(_, __frame, 83, 25, function ___(__0, __11) {
                                    blobProperties = __11;
                                    _(null, null, true);
                                  }, true), specifiedContainerName, specifiedBlobName, storageOptions);
                                });
                              })(function ___(__e, __r, __cont) {
                                (function ___(__then) {
                                  __tryCatch(_, function __$downloadAzureBlob() {
                                    endProgress();
                                    __then();
                                  });
                                })(function ___() {
                                  __tryCatch(_, function ___() {
                                    if (__cont) {
                                      __then();
                                    } else {
                                      _(__e, __r);
                                    };
                                  });
                                });
                              });
                            })(function ___() {
                              __tryCatch(_, function __$downloadAzureBlob() {
                                if (!blobProperties.contentMD5) {
                                  logger.warn(util.format($("Blob contentMd5 is missing, and the local file md5 is %s"), downloadBlob.contentMD5));
                                }
                                 else {
                                  if ((blobProperties.contentMD5 === downloadBlob.contentMD5)) {
                                    logger.info(util.format($("Md5checksum validation passed, and md5checksum is %s"), downloadBlob.contentMD5));
                                  }
                                   else {
                                    return _(new Error(util.format($("Md5checksum validation failed. Blob md5 is %s, but local file md5 is %s"), blobProperties.contentMD5, downloadBlob.contentMD5)));
                                  }
                                  ;
                                }
                                ;
                                __then();
                              });
                            });
                          }
                           else {
                            __then();
                          }
                          ;
                        })(function __$downloadAzureBlob() {
                          return getAzureBlobProperties(specifiedContainerName, specifiedBlobName, StorageUtil.getStorageAccountOptions(options), __cb(_, __frame, 99, 25, function ___(__0, __12) {
                            downloadedBlob = __12;
                            if (downloadedBlob) {
                              downloadedBlob["fileName"] = fullName;
                            }
                            ;
                            cli.interaction.formatOutput(downloadedBlob, function(data) {
                              logger.info(util.format($("File saved as %s"), data.fileName));
                            });
                            _();
                          }, true));
                        });
                      });
                    });
                  });
                }, true));
              });
            }, true));
          });
        }, true));
      }, true));
    });
  };
  function applyBlobServicePatch(blobService) {
    blobService.listAllContainers = function(options, callback) {
      StorageUtil.listWithContinuation(blobService.listContainersSegmentedWithPrefix, blobService, StorageUtil.ListContinuationTokenArgIndex.Container, options.prefix, null, options, callback);
    };
    blobService.listAllBlobs = function(container, options, callback) {
      StorageUtil.listWithContinuation(blobService.listBlobsSegmentedWithPrefix, blobService, StorageUtil.ListContinuationTokenArgIndex.Blob, container, options.prefix, null, options, callback);
    };
  };
  function getDestAccountOptions(options) {
    var isNameDefined = (options.destAccountName !== undefined);
    var isKeyDefined = (options.destAccountKey !== undefined);
    var isSasDefined = (options.destSas !== undefined);
    var isConnectionStringDefined = (options.destConnectionString !== undefined);
    var isAccountDefined = (isNameDefined || isKeyDefined);
    var isUserDefined = (isAccountDefined || isSasDefined);
    var destOptions = options;
    if ((isConnectionStringDefined && isUserDefined)) {
      throw new Error($("Please only define one of them: 1. --dest-connection-string. 2 --dest-account-name and --dest-account-key. 3 --dest-account-name and --dest-sas"));
    }
     else {
      if (isConnectionStringDefined) {
        destOptions.connectionString = options.destConnectionString;
      }
       else if (isUserDefined) {
        if (isNameDefined) {
          if ((isSasDefined && isKeyDefined)) {
            throw new Error($("Please only define --dest-account-key or --dest-sas when --dest-account-name is defined"));
          }
           else if (isKeyDefined) {
            destOptions.connectionString = util.format("DefaultEndpointsProtocol=https;AccountName=%s;AccountKey=%s", options.destAccountName, options.destAccountKey);
          }
           else {
            destOptions.accountName = options.destAccountName;
            destOptions.sas = options.destSas;
          }
          
          ;
        }
         else {
          throw new Error($("Please set --dest-account-name and --dest-account-key or --dest-account-name and --dest-sas"));
        }
        ;
      }
      
      ;
      if (destOptions.connectionString) {
        delete destOptions.accountName;
        delete destOptions.accountKey;
      }
      ;
    }
    ;
    return destOptions;
  };
  function getSourceUri(options, _) {
    var source, settings, host;
    var __frame = {
      name: "getSourceUri",
      line: 1091
    };
    return __func(_, this, arguments, getSourceUri, 1, __frame, function __$getSourceUri() {
      return (function __$getSourceUri(__then) {
        if ((!options.sourceContainer && !options.sourceBlob)) {
          return interaction.promptIfNotGiven($("Source URI: "), source, __cb(_, __frame, 3, 27, function ___(__0, __1) {
            source = __1;
            __then();
          }, true));
        }
         else {
          return (function __$getSourceUri(__then) {
            if (!options.sourceContainer) {
              return interaction.promptIfNotGiven($("Source container: "), options.sourceContainer, __cb(_, __frame, 6, 46, function ___(__0, __2) {
                options.sourceContainer = __2;
                __then();
              }, true));
            }
             else {
              return (function __$getSourceUri(__then) {
                if (!options.sourceBlob) {
                  return interaction.promptIfNotGiven($("Source blob: "), options.sourceBlob, __cb(_, __frame, 8, 41, function ___(__0, __3) {
                    options.sourceBlob = __3;
                    __then();
                  }, true));
                }
                 else {
                  __then();
                }
                ;
              })(__then);
            }
            ;
          })(function __$getSourceUri() {
            settings = getStorageSettings(options);
            host = settings._blobEndpoint.primaryHost;
            if ((host === undefined)) {
              return _(new Error($("The blob endpoint is invalid")));
            }
            ;
            if ((host.lastIndexOf("/") !== (host.length - 1))) {
              source = (host + "/");
            }
             else {
              source = host;
            }
            ;
            if ((options.sourceContainer !== "$root")) {
              source += ((options.sourceContainer + "/"));
            }
            ;
            source += encodeURIComponent(options.sourceBlob);
            __then();
          });
        }
        ;
      })(function __$getSourceUri() {
        return _(null, source);
      });
    });
  };
  function getSourceSASToken(sourceContainer, sourceBlob, embeddedSas, options, _) {
    var sasToken, isNameDefined, isKeyDefined, isConnectionStringDefined, sourceblobService, aclOperation, showOptions, permission, sharedAccessPolicy;
    var __frame = {
      name: "getSourceSASToken",
      line: 1123
    };
    return __func(_, this, arguments, getSourceSASToken, 4, __frame, function __$getSourceSASToken() {
      sasToken = (embeddedSas ? undefined : ((options.sourceSas || options.sasToken)));
      return (function __$getSourceSASToken(__then) {
        if (sasToken) {
          isNameDefined = (options.accountName !== undefined);
          isKeyDefined = (options.accountKey !== undefined);
          isConnectionStringDefined = (options.connectionString !== undefined);
          if ((isConnectionStringDefined || ((isNameDefined && isKeyDefined)))) {
            return _(new Error($("Please only define one of them: 1. --connection-string. 2 --account-name and --account-key 3. --account-name and --sas")));
          }
          ;
          __then();
        }
         else {
          return (function __$getSourceSASToken(__then) {
            if (!embeddedSas) {
              sourceblobService = getBlobServiceClient(options);
              aclOperation = getStorageBlobOperation(sourceblobService, "getContainerAcl");
              showOptions = getStorageBlobOperationDefaultOption();
              return performStorageOperation(aclOperation, __cb(_, __frame, 13, 23, function ___(__0, __1) {
                permission = __1;
                if ((BlobUtilities.BlobContainerPublicAccessType.OFF == permission.publicAccessLevel)) {
                  sharedAccessPolicy = {
                    AccessPolicy: {
                      Permissions: BlobUtilities.SharedAccessPermissions.READ,
                      Expiry: azureCommon.date.daysFromNow(7)
                    }
                  };
                  sasToken = sourceblobService.generateSharedAccessSignature(sourceContainer, sourceBlob, sharedAccessPolicy);
                  if (!sasToken) {
                    return _(new Error($("The source blob is not accessible")));
                  }
                  ;
                }
                ;
                __then();
              }, true), sourceContainer, showOptions);
            }
             else {
              __then();
            }
            ;
          })(__then);
        }
        ;
      })(function __$getSourceSASToken() {
        return _(null, sasToken);
      });
    });
  };
  function startBlobCopy(sourceUri, destContainer, options, _) {
    var source, sourceContainer, sourceBlob, embeddedSas, blobResource, index, sasToken, destBlobName, destContainerName, destOption, destBlobService, operation, tips, storageOptions, copyOp, retry;
    var __frame = {
      name: "startBlobCopy",
      line: 1157
    };
    return __func(_, this, arguments, startBlobCopy, 3, __frame, function __$startBlobCopy() {
      source = sourceUri;
      return (function __$startBlobCopy(__then) {
        if (!sourceUri) {
          return getSourceUri(options, __cb(_, __frame, 4, 15, function ___(__0, __1) {
            source = __1;
            __then();
          }, true));
        }
         else {
          __then();
        }
        ;
      })(function __$startBlobCopy() {
        sourceContainer = options.sourceContainer;
        sourceBlob = options.sourceBlob;
        embeddedSas = false;
        blobResource = splitDestinationUri(source);
        if (!sourceContainer) {
          sourceContainer = blobResource.container;
        }
        ;
        if (!sourceBlob) {
          if (!blobResource.blobName) {
            return _(new Error($("The source blob is invalid")));
          }
          ;
          index = blobResource.blobName.lastIndexOf("?");
          if ((index != -1)) {
            embeddedSas = true;
            blobResource.blobName = blobResource.blobName.substring(0, index);
          }
          ;
          sourceBlob = decodeURIComponent(blobResource.blobName);
        }
        ;
        return getSourceSASToken(sourceContainer, sourceBlob, embeddedSas, options, __cb(_, __frame, 30, 19, function ___(__0, __2) {
          sasToken = __2;
          source += (((sasToken === undefined) ? "" : (("?" + sasToken))));
          destBlobName = (options.destBlob ? options.destBlob : sourceBlob);
          return interaction.promptIfNotGiven($("Destination container name: "), destContainer, __cb(_, __frame, 35, 40, function ___(__0, __3) {
            destContainerName = __3;
            if (!destContainerName) {
              return _(new Error($("The destination container name is required")));
            }
            ;
            destOption = getDestAccountOptions(options);
            destBlobService = getBlobServiceClient(destOption);
            operation = getStorageBlobOperation(destBlobService, "startCopyBlob");
            tips = util.format($("Start copying blob %s"), source);
            storageOptions = getStorageBlobOperationDefaultOption();
            startProgress(tips);
            return (function ___(__break) {
              var __more;
              var __loop = __cb(_, __frame, 0, 0, function __$startBlobCopy() {
                __more = false;
                var __9 = ((retry === true) || (retry === undefined));
                if (__9) {
                  return (function ___(__then) {
                    (function ___(_) {
                      __tryCatch(_, function __$startBlobCopy() {
                        return (function ___(__then) {
                          (function ___(_) {
                            __tryCatch(_, function __$startBlobCopy() {
                              if (((retry === undefined) && !options.quiet)) {
                                storageOptions.accessConditions = {
                                "if-none-match": "*"
                                };
                              }
                               else {
                                storageOptions.accessConditions = {
                                };
                              }
                              ;
                              retry = false;
                              return performStorageOperation(operation, __cb(_, __frame, 58, 17, function ___(__0, __5) {
                                copyOp = __5;
                                __then();
                              }, true), source, destContainerName, destBlobName, storageOptions);
                            });
                          })(function ___(e, __result) {
                            __catch(function __$startBlobCopy() {
                              if (e) {
                                return (function __$startBlobCopy(__then) {
                                  if (StorageUtil.isBlobExistsException(e)) {
                                    return interaction.confirm(util.format($("Do you want to overwrite the existing blob %s in container %s? (Y/N) "), destBlobName, destContainerName), __cb(_, __frame, 61, 30, function ___(__0, __4) {
                                      retry = __4;
                                      __then();
                                    }, true));
                                  }
                                   else {
                                    __then();
                                  }
                                  ;
                                })(function __$startBlobCopy() {
                                  if (!retry) {
                                    return _(e);
                                  }
                                  ;
                                  __then();
                                });
                              }
                               else {
                                _(null, __result);
                              }
                              ;
                            }, _);
                          });
                        })(function ___() {
                          __tryCatch(_, function __$startBlobCopy() {
                            _(null, null, true);
                          });
                        });
                      });
                    })(function ___(__e, __r, __cont) {
                      (function ___(__then) {
                        __tryCatch(_, function __$startBlobCopy() {
                          if (!retry) {
                            endProgress();
                          }
                          ;
                          __then();
                        });
                      })(function ___() {
                        __tryCatch(_, function ___() {
                          if (__cont) {
                            __then();
                          } else {
                            _(__e, __r);
                          };
                        });
                      });
                    });
                  })(function ___() {
                    __tryCatch(_, function __$startBlobCopy() {
                      while (__more) {
                        __loop();
                      };
                      __more = true;
                    });
                  });
                }
                 else {
                  __break();
                }
                ;
              });
              do {
                __loop();
              } while (__more);
              __more = true;
            })(function __$startBlobCopy() {
              cli.interaction.formatOutput(copyOp, function(outputData) {
                var output = [outputData,];
                logger.table(output, function(row, item) {
                  row.cell($("Copy ID"), item.copyId);
                  row.cell($("Status"), item.copyStatus);
                });
              });
              _();
            });
          }, true));
        }, true));
      });
    });
  };
  function showBlobCopy(container, blob, options, _) {
    var destOption, blobProps;
    var __frame = {
      name: "showBlobCopy",
      line: 1242
    };
    return __func(_, this, arguments, showBlobCopy, 3, __frame, function __$showBlobCopy() {
      return interaction.promptIfNotGiven($("Destination container: "), container, __cb(_, __frame, 1, 28, function ___(__0, __1) {
        container = __1;
        return interaction.promptIfNotGiven($("Destination blob: "), blob, __cb(_, __frame, 2, 23, function ___(__0, __2) {
          blob = __2;
          destOption = getDestAccountOptions(options);
          return getAzureBlobProperties(container, blob, destOption, __cb(_, __frame, 5, 20, function ___(__0, __3) {
            blobProps = __3;
            if ((blobProps.copyId === undefined)) {
              return _(new Error($("Can not find copy task on specified blob")));
            }
             else {
              cli.interaction.formatOutput(blobProps, function(outputData) {
                var output = [outputData,];
                logger.table(output, function(row, item) {
                  row.cell($("Copy ID"), item.copyId);
                  row.cell($("Progress"), item.copyProgress);
                  row.cell($("Status"), item.copyStatus);
                  if (item.copyStatusDescription) {
                    row.cell($("Description"), item.copyStatusDescription);
                  }
                  ;
                });
              });
            }
            ;
            _();
          }, true));
        }, true));
      }, true));
    });
  };
  function stopBlobCopy(container, blob, copyid, options, _) {
    var destOption, blobService, operation, tips, storageOptions, stopOp;
    var __frame = {
      name: "stopBlobCopy",
      line: 1269
    };
    return __func(_, this, arguments, stopBlobCopy, 4, __frame, function __$stopBlobCopy() {
      return interaction.promptIfNotGiven($("Destination container: "), container, __cb(_, __frame, 1, 28, function ___(__0, __1) {
        container = __1;
        return interaction.promptIfNotGiven($("Destination blob: "), blob, __cb(_, __frame, 2, 23, function ___(__0, __2) {
          blob = __2;
          return interaction.promptIfNotGiven($("Copy ID: "), copyid, __cb(_, __frame, 3, 25, function ___(__0, __3) {
            copyid = __3;
            destOption = getDestAccountOptions(options);
            blobService = getBlobServiceClient(destOption);
            operation = getStorageBlobOperation(blobService, "abortCopyBlob");
            tips = util.format($("Stop copying blob %s in container %s of copy id %s"), blob, container, copyid);
            storageOptions = getStorageBlobOperationDefaultOption();
            startProgress(tips);
            return (function ___(__then) {
              (function ___(_) {
                __tryCatch(_, function __$stopBlobCopy() {
                  return performStorageOperation(operation, __cb(_, __frame, 14, 15, function ___(__0, __4) {
                    stopOp = __4;
                    _(null, null, true);
                  }, true), container, blob, copyid, storageOptions);
                });
              })(function ___(__e, __r, __cont) {
                (function ___(__then) {
                  __tryCatch(_, function __$stopBlobCopy() {
                    endProgress();
                    __then();
                  });
                })(function ___() {
                  __tryCatch(_, function ___() {
                    if (__cont) {
                      __then();
                    } else {
                      _(__e, __r);
                    };
                  });
                });
              });
            })(function ___() {
              __tryCatch(_, function __$stopBlobCopy() {
                logger.info(util.format($("Copying blob %s to container %s has been stopped successfully"), blob, container));
                _();
              });
            });
          }, true));
        }, true));
      }, true));
    });
  };
};