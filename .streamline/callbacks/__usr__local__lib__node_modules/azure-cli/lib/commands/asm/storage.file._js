/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch;
var storage = require("azure-storage");
var StorageUtil = require("../../util/storage.util");
var util = require("util");
var pathUtil = require("path");
var fs = require("fs");
var utils = require("../../util/utils");
var commander = require("commander");
var performStorageOperation = StorageUtil.performStorageOperation;
var startProgress = StorageUtil.startProgress;
var endProgress = StorageUtil.endProgress;
var SpeedSummary = storage.BlobService.SpeedSummary;
var __ = require("underscore");
var $ = utils.getLocaleString;
commander.Command.prototype.addStorageAccountOption = function() {
  this.option("-a, --account-name <accountName>", $("the storage account name"));
  this.option("-k, --account-key <accountKey>", $("the storage account key"));
  this.option("-c, --connection-string <connectionString>", $("the storage connection string"));
  this.option("-vv", $("run storage command in debug mode"));
  return this;
};
exports.init = function(cli) {
  StorageUtil.init(cli);
  var storage = cli.category("storage").description($("Commands to manage your Storage objects"));
  var logger = cli.output;
  var interaction = cli.interaction;
  var share = storage.category("share").description($("Commands to manage your Storage file shares"));
  share.command("create [share]").description($("Create a storage file share")).option("--share <share>", $("the storage file share name")).addStorageAccountOption().execute(createShare);
  share.command("show [share]").description($("Show details of the storage file share")).option("--share <share>", $("the storage file share name")).addStorageAccountOption().execute(showShare);
  share.command("delete [share]").description($("Delete the specified storage file share")).option("--share <share>", $("the storage file share name")).option("-q, --quiet", $("remove the specified storage file share without confirmation")).addStorageAccountOption().execute(deleteShare);
  share.command("list [prefix]").description($("List storage shares with prefix")).option("-p, --prefix <prefix>", $("the storage share name prefix")).addStorageAccountOption().execute(listShares);
  var file = storage.category("file").description($("Commands to manage your Storage files"));
  file.command("list [share] [path]").usage("[options] [share] [path]").description($("List storage files in the specified share under specific path")).option("--share <share>", $("the storage share name")).option("-p, --path <path>", $("the path to be listed")).addStorageAccountOption().execute(listFiles);
  file.command("delete [share] [path]").usage("[options] [share] [path]").description($("Delete the specified storage file")).option("--share <share>", $("the storage share name")).option("-p, --path <path>", $("the path to the storage file")).option("-q, --quiet", $("remove the specified storage file without confirmation")).addStorageAccountOption().execute(deleteFile);
  file.command("upload [source] [share] [path]").usage("[options] [source] [share] [path]").description($("Upload the specified local file to storage")).option("-s, --source <source>", $("the local file path")).option("--share <share>", $("the storage share name")).option("-p, --path <path>", $("the path to the storage file")).option("--concurrenttaskcount <concurrenttaskcount>", $("the maximum number of concurrent upload requests")).option("-q, --quiet", $("overwrite the specified storage file without confirmation")).addStorageAccountOption().execute(uploadFile);
  file.command("download [share] [path] [destination]").usage("[options] [share] [path] [destination]").description($("Download the specified storage file")).option("--share <share>", $("the storage share name")).option("-p, --path <path>", $("the path to the storage file")).option("-d, --destination <destination>", $("path to the destination file or directory")).option("-m, --checkmd5", $("check md5sum for the downloaded file")).option("-q, --quiet", $("overwrite the destination file without confirmation")).addStorageAccountOption().execute(downloadFile);
  var directory = storage.category("directory").description($("Commands to manage your Storage file directory"));
  directory.command("create [share] [path]").description($("Create a storage file directory")).option("--share <share>", $("the storage file share name")).option("-p, --path <path>", $("the path to the storage file directory to be created")).addStorageAccountOption().execute(createDirectory);
  directory.command("delete [share] [path]").description($("Delete the specified storage file directory")).option("--share <share>", $("the storage share name")).option("-p, --path <path>", $("the path to the storage file directory to be deleted")).option("-q, --quiet", $("remove the specified storage file directory without confirmation")).addStorageAccountOption().execute(deleteDirectory);
  function getFileServiceClient(options) {
    var serviceClient = StorageUtil.getServiceClient(StorageUtil.getFileService, options);
    applyFileServicePatch(serviceClient);
    return serviceClient;
  };
  function getStorageFileOperation(serviceClient, operationName) {
    var operation = new StorageUtil.StorageOperation();
    operation.type = StorageUtil.OperationType.File;
    operation.operation = operationName;
    operation.service = serviceClient;
    return operation;
  };
  function getStorageFileOperationDefaultOption() {
    var option = StorageUtil.getStorageOperationDefaultOption();
    option.parallelOperationThreadCount = StorageUtil.threadsInOperation;
    return option;
  };
  function createShare(share, options, _) {
    var fileService, operation, tips, storageOptions, created;
    var __frame = {
      name: "createShare",
      line: 190
    };
    return __func(_, this, arguments, createShare, 2, __frame, function __$createShare() {
      fileService = getFileServiceClient(options);
      return interaction.promptIfNotGiven($("Share name: "), share, __cb(_, __frame, 2, 24, function ___(__0, __1) {
        share = __1;
        operation = getStorageFileOperation(fileService, "createShare");
        tips = util.format($("Creating storage file share %s"), share);
        storageOptions = getStorageFileOperationDefaultOption();
        startProgress(tips);
        return (function ___(__then) {
          (function ___(_) {
            __tryCatch(_, function __$createShare() {
              return performStorageOperation(operation, __cb(_, __frame, 8, 20, function ___(__0, __2) {
                created = __2;
                if ((created === false)) {
                  return _(new Error(util.format($("Share '%s' already exists"), share)));
                }
                ;
                _(null, null, true);
              }, true), share, storageOptions);
            });
          })(function ___(__e, __r, __cont) {
            (function ___(__then) {
              __tryCatch(_, function __$createShare() {
                endProgress();
                __then();
              });
            })(function ___() {
              __tryCatch(_, function ___() {
                if (__cont) {
                  __then();
                } else {
                  _(__e, __r);
                };
              });
            });
          });
        })(function ___() {
          __tryCatch(_, function __$createShare() {
            logger.verbose(util.format($("Share %s has been created successfully"), share));
            return showShare(share, StorageUtil.getStorageAccountOptions(options), __cb(_, __frame, 17, 4, function __$createShare() {
              _();
            }, true));
          });
        });
      }, true));
    });
  };
  function deleteShare(share, options, _) {
    var fileService, operation, tips, storageOptions, force;
    var __frame = {
      name: "deleteShare",
      line: 213
    };
    return __func(_, this, arguments, deleteShare, 2, __frame, function __$deleteShare() {
      fileService = getFileServiceClient(options);
      return interaction.promptIfNotGiven($("Share name: "), share, __cb(_, __frame, 2, 24, function ___(__0, __1) {
        share = __1;
        operation = getStorageFileOperation(fileService, "deleteShare");
        tips = util.format($("Deleting storage file share %s"), share);
        storageOptions = getStorageFileOperationDefaultOption();
        force = !!options.quiet;
        return (function __$deleteShare(__then) {
          if ((force !== true)) {
            return interaction.confirm(util.format($("Do you want to delete share %s? "), share), __cb(_, __frame, 9, 26, function ___(__0, __2) {
              force = __2;
              if ((force !== true)) {
                return _(null);
              }
              ;
              __then();
            }, true));
          }
           else {
            __then();
          }
          ;
        })(function __$deleteShare() {
          startProgress(tips);
          return (function ___(__then) {
            (function ___(_) {
              __tryCatch(_, function __$deleteShare() {
                return (function ___(__then) {
                  (function ___(_) {
                    __tryCatch(_, function __$deleteShare() {
                      return performStorageOperation(operation, __cb(_, __frame, 18, 6, __then, true), share, storageOptions);
                    });
                  })(function ___(e, __result) {
                    __catch(function __$deleteShare() {
                      if (e) {
                        if (StorageUtil.isNotFoundException(e)) {
                          return _(new Error(util.format($("Can not find share '%s'"), share)));
                        }
                         else {
                          return _(e);
                        }
                        ;
                        __then();
                      }
                       else {
                        _(null, __result);
                      }
                      ;
                    }, _);
                  });
                })(function ___() {
                  __tryCatch(_, function __$deleteShare() {
                    _(null, null, true);
                  });
                });
              });
            })(function ___(__e, __r, __cont) {
              (function ___(__then) {
                __tryCatch(_, function __$deleteShare() {
                  endProgress();
                  __then();
                });
              })(function ___() {
                __tryCatch(_, function ___() {
                  if (__cont) {
                    __then();
                  } else {
                    _(__e, __r);
                  };
                });
              });
            });
          })(function ___() {
            __tryCatch(_, function __$deleteShare() {
              logger.info(util.format($("Share %s has been deleted successfully"), share));
              _();
            });
          });
        });
      }, true));
    });
  };
  function showShare(share, options, _) {
    var fileService, operation, tips, storageOptions, properties;
    var __frame = {
      name: "showShare",
      line: 248
    };
    return __func(_, this, arguments, showShare, 2, __frame, function __$showShare() {
      fileService = getFileServiceClient(options);
      return interaction.promptIfNotGiven($("Share name: "), share, __cb(_, __frame, 2, 24, function ___(__0, __1) {
        share = __1;
        operation = getStorageFileOperation(fileService, "getShareProperties");
        tips = $("Getting Storage share information");
        storageOptions = getStorageFileOperationDefaultOption();
        properties = [];
        startProgress(tips);
        return (function ___(__then) {
          (function ___(_) {
            __tryCatch(_, function __$showShare() {
              return (function ___(__then) {
                (function ___(_) {
                  __tryCatch(_, function __$showShare() {
                    return performStorageOperation(operation, __cb(_, __frame, 10, 19, function ___(__0, __2) {
                      properties = __2;
                      __then();
                    }, true), share, storageOptions);
                  });
                })(function ___(e, __result) {
                  __catch(function __$showShare() {
                    if (e) {
                      if (StorageUtil.isNotFoundException(e)) {
                        return _(new Error(util.format($("Share %s doesn't exist"), share)));
                      }
                       else {
                        return _(e);
                      }
                      ;
                      __then();
                    }
                     else {
                      _(null, __result);
                    }
                    ;
                  }, _);
                });
              })(function ___() {
                __tryCatch(_, function __$showShare() {
                  _(null, null, true);
                });
              });
            });
          })(function ___(__e, __r, __cont) {
            (function ___(__then) {
              __tryCatch(_, function __$showShare() {
                endProgress();
                __then();
              });
            })(function ___() {
              __tryCatch(_, function ___() {
                if (__cont) {
                  __then();
                } else {
                  _(__e, __r);
                };
              });
            });
          });
        })(function ___() {
          __tryCatch(_, function __$showShare() {
            logger.json(properties);
            _();
          });
        });
      }, true));
    });
  };
  function listShares(prefix, options, _) {
    var fileService, listOperation, tips, storageOptions, shares;
    var __frame = {
      name: "listShares",
      line: 278
    };
    return __func(_, this, arguments, listShares, 2, __frame, function __$listShares() {
      fileService = getFileServiceClient(options);
      listOperation = getStorageFileOperation(fileService, "listAllShares");
      tips = $("Getting storage shares");
      storageOptions = getStorageFileOperationDefaultOption();
      validateSharePrefix(prefix);
      storageOptions.prefix = prefix;
      startProgress(tips);
      return (function ___(__then) {
        (function ___(_) {
          __tryCatch(_, function __$listShares() {
            return performStorageOperation(listOperation, __cb(_, __frame, 12, 15, function ___(__0, __1) {
              shares = __1;
              _(null, null, true);
            }, true), storageOptions);
          });
        })(function ___(__e, __r, __cont) {
          (function ___(__then) {
            __tryCatch(_, function __$listShares() {
              endProgress();
              __then();
            });
          })(function ___() {
            __tryCatch(_, function ___() {
              if (__cont) {
                __then();
              } else {
                _(__e, __r);
              };
            });
          });
        });
      })(function ___() {
        __tryCatch(_, function __$listShares() {
          cli.interaction.formatOutput(shares, function(outputData) {
            if ((outputData.length === 0)) {
              logger.info($("No share found"));
            }
             else {
              logger.table(outputData, function(row, item) {
                row.cell($("Name"), item.name);
                row.cell($("Last-Modified"), item.properties["last-modified"]);
              });
            }
            ;
          });
          _();
        });
      });
    });
  };
  function listFiles(share, path, options, _) {
    var fileService, listOperation, tips, storageOptions, listResults, setUriFunc;
    var __frame = {
      name: "listFiles",
      line: 314
    };
    return __func(_, this, arguments, listFiles, 3, __frame, function __$listFiles() {
      fileService = getFileServiceClient(options);
      listOperation = getStorageFileOperation(fileService, "listFilesAndDirectories");
      return interaction.promptIfNotGiven($("Share name: "), share, __cb(_, __frame, 3, 24, function ___(__0, __1) {
        share = __1;
        if (__.isUndefined(path)) {
          path = "";
        }
        ;
        path = normalizePath(path);
        tips = util.format($("Getting storage files under '%s' of share %s"), path, share);
        storageOptions = getStorageFileOperationDefaultOption();
        startProgress(tips);
        return (function ___(__then) {
          (function ___(_) {
            __tryCatch(_, function __$listFiles() {
              return performStorageOperation(listOperation, __cb(_, __frame, 16, 20, function ___(__0, __2) {
                listResults = __2;
                _(null, null, true);
              }, true), share, path, storageOptions);
            });
          })(function ___(__e, __r, __cont) {
            (function ___(__then) {
              __tryCatch(_, function __$listFiles() {
                endProgress();
                __then();
              });
            })(function ___() {
              __tryCatch(_, function ___() {
                if (__cont) {
                  __then();
                } else {
                  _(__e, __r);
                };
              });
            });
          });
        })(function ___() {
          __tryCatch(_, function __$listFiles() {
            if (cli.output.format().json) {
              setUriFunc = function(item) {
                item.uri = fileService.getUrl(share, path, item.name);
              };
              listResults.directories.forEach(setUriFunc);
              listResults.files.forEach(setUriFunc);
            }
            ;
            cli.interaction.formatOutput(listResults, function(outputData) {
              if (((outputData.directories.length + outputData.files.length) > 0)) {
                logger.table(outputData.directories.concat(outputData.files), function(row, item) {
                  row.cell($("Name"), item.name);
                  if (item.properties) {
                    row.cell($("Length"), item.properties["content-length"]);
                    row.cell($("Type"), "");
                  }
                   else {
                    row.cell($("Length"), "");
                    row.cell($("Type"), "<DIR>");
                  }
                  ;
                });
              }
              ;
            });
            _();
          });
        });
      }, true));
    });
  };
  function deleteFile(share, path, options, _) {
    var fileService, operation, tips, storageOptions, force, result, directory, file;
    var __frame = {
      name: "deleteFile",
      line: 364
    };
    return __func(_, this, arguments, deleteFile, 3, __frame, function __$deleteFile() {
      fileService = getFileServiceClient(options);
      return interaction.promptIfNotGiven($("Share name: "), share, __cb(_, __frame, 2, 24, function ___(__0, __1) {
        share = __1;
        return interaction.promptIfNotGiven($("Path to the file: "), path, __cb(_, __frame, 3, 23, function ___(__0, __2) {
          path = __2;
          operation = getStorageFileOperation(fileService, "deleteFile");
          tips = util.format($("Deleting storage file '%s' in share %s"), path, share);
          storageOptions = getStorageFileOperationDefaultOption();
          force = !!options.quiet;
          return (function __$deleteFile(__then) {
            if ((force !== true)) {
              return interaction.confirm(util.format($("Do you want to delete file %s? "), path), __cb(_, __frame, 10, 26, function ___(__0, __3) {
                force = __3;
                if ((force !== true)) {
                  return _(null);
                }
                ;
                __then();
              }, true));
            }
             else {
              __then();
            }
            ;
          })(function __$deleteFile() {
            startProgress(tips);
            path = normalizePath(path);
            result = fetchBasenameAndDirname(path);
            directory = result.dirname;
            file = result.basename;
            return (function ___(__then) {
              (function ___(_) {
                __tryCatch(_, function __$deleteFile() {
                  return (function ___(__then) {
                    (function ___(_) {
                      __tryCatch(_, function __$deleteFile() {
                        return performStorageOperation(operation, __cb(_, __frame, 24, 6, __then, true), share, directory, file, storageOptions);
                      });
                    })(function ___(e, __result) {
                      __catch(function __$deleteFile() {
                        if (e) {
                          if (StorageUtil.isNotFoundException(e)) {
                            return _(new Error(util.format($("Can not find file '%s' in share %s"), path, share)));
                          }
                           else {
                            return _(e);
                          }
                          ;
                          __then();
                        }
                         else {
                          _(null, __result);
                        }
                        ;
                      }, _);
                    });
                  })(function ___() {
                    __tryCatch(_, function __$deleteFile() {
                      _(null, null, true);
                    });
                  });
                });
              })(function ___(__e, __r, __cont) {
                (function ___(__then) {
                  __tryCatch(_, function __$deleteFile() {
                    endProgress();
                    __then();
                  });
                })(function ___() {
                  __tryCatch(_, function ___() {
                    if (__cont) {
                      __then();
                    } else {
                      _(__e, __r);
                    };
                  });
                });
              });
            })(function ___() {
              __tryCatch(_, function __$deleteFile() {
                logger.info(util.format($("File '%s' in share %s has been deleted successfully"), path, share));
                _();
              });
            });
          });
        }, true));
      }, true));
    });
  };
  function uploadFile(source, share, path, options, _) {
    var fileService, storageOptions, force, pathIsDirectory, remoteFileExists, directory, file, result, summary, printer, intervalId, succeeded;
    var __frame = {
      name: "uploadFile",
      line: 405
    };
    return __func(_, this, arguments, uploadFile, 4, __frame, function __$uploadFile() {
      fileService = getFileServiceClient(options);
      return interaction.promptIfNotGiven($("File to be uploaded: "), source, __cb(_, __frame, 2, 25, function ___(__0, __4) {
        source = __4;
        return interaction.promptIfNotGiven($("Share name: "), share, __cb(_, __frame, 3, 24, function ___(__0, __5) {
          share = __5;
          storageOptions = getStorageFileOperationDefaultOption();
          storageOptions.storeFileContentMD5 = true;
          force = !!options.quiet;
          return utils.fileExists(source, __cb(_, __frame, 8, 15, function ___(__0, __7) {
            var __6 = !__7;
            return (function __$uploadFile(__then) {
              if (__6) {
                return _(new Error(util.format($("Local file %s doesn't exist"), source)));
              }
               else {
                __then();
              }
              ;
            })(function __$uploadFile() {
              pathIsDirectory = ((path && (path.length > 0)) && (((path[(path.length - 1)] === "/") || (path[(path.length - 1)] === "\\"))));
              remoteFileExists = false;
              startProgress(util.format($("Checking file or directory '%s' in share %s"), (path ? path : ""), share));
              return (function ___(__then) {
                (function ___(_) {
                  __tryCatch(_, function __$uploadFile() {
                    return (function __$uploadFile(__then) {
                      if (path) {
                        path = normalizePath(path);
                        result = fetchBasenameAndDirname(path);
                        directory = result.dirname;
                        file = result.basename;
                        return (function __$uploadFile(_) {
                          var __1 = (!utils.stringIsNullOrEmpty(file) && !pathIsDirectory);
                          if (!__1) {
                            return _(null, __1);
                          }
                          ;
                          return performStorageOperation(getStorageFileOperation(fileService, "doesFileExist"), __cb(_, __frame, 34, 10, _, true), share, directory, file, storageOptions);
                        })(__cb(_, __frame, -404, 18, function ___(__0, __8) {
                          return (function __$uploadFile(__then) {
                            if (__8) {
                              remoteFileExists = true;
                              __then();
                            }
                             else {
                              return (function __$uploadFile(_) {
                                var __2 = pathIsDirectory;
                                if (__2) {
                                  return _(null, __2);
                                }
                                ;
                                return performStorageOperation(getStorageFileOperation(fileService, "doesDirectoryExist"), __cb(_, __frame, 46, 36, _, true), share, path);
                              })(__cb(_, __frame, -404, 18, function ___(__0, __9) {
                                return (function __$uploadFile(__then) {
                                  if (__9) {
                                    directory = path;
                                    file = pathUtil.basename(source);
                                    __then();
                                  }
                                   else {
                                    return performStorageOperation(getStorageFileOperation(fileService, "doesDirectoryExist"), __cb(_, __frame, 57, 17, function ___(__0, __10) {
                                      return (function __$uploadFile(__then) {
                                        if (__10) {
                                          __then();
                                        }
                                         else {
                                          return _(new Error(util.format($("Path '%s' is neither an existing file nor under an existing directory"), path)));
                                        }
                                        ;
                                      })(__then);
                                    }, true), share, directory);
                                  }
                                  ;
                                })(__then);
                              }, true));
                            }
                            ;
                          })(__then);
                        }, true));
                      }
                       else {
                        directory = "";
                        file = pathUtil.basename(source);
                        __then();
                      }
                      ;
                    })(function __$uploadFile() {
                      return (function __$uploadFile(_) {
                        var __3 = remoteFileExists;
                        if (__3) {
                          return _(null, __3);
                        }
                        ;
                        return performStorageOperation(getStorageFileOperation(fileService, "doesFileExist"), __cb(_, __frame, 80, 30, _, true), share, directory, file, storageOptions);
                      })(__cb(_, __frame, -404, 18, function ___(__0, __11) {
                        return (function __$uploadFile(__then) {
                          if (__11) {
                            remoteFileExists = true;
                            __then();
                          }
                           else {
                            __then();
                          }
                          ;
                        })(function __$uploadFile() {
                          _(null, null, true);
                        });
                      }, true));
                    });
                  });
                })(function ___(__e, __r, __cont) {
                  (function ___(__then) {
                    __tryCatch(_, function __$uploadFile() {
                      endProgress();
                      __then();
                    });
                  })(function ___() {
                    __tryCatch(_, function ___() {
                      if (__cont) {
                        __then();
                      } else {
                        _(__e, __r);
                      };
                    });
                  });
                });
              })(function ___() {
                __tryCatch(_, function __$uploadFile() {
                  return (function __$uploadFile(__then) {
                    if ((remoteFileExists === true)) {
                      return (function __$uploadFile(__then) {
                        if ((force !== true)) {
                          return interaction.confirm(util.format($("Do you want to overwrite remote file %s? "), pathUtil.join(directory, file)), __cb(_, __frame, 95, 28, function ___(__0, __12) {
                            force = __12;
                            if ((force !== true)) {
                              return _(null);
                            }
                            ;
                            __then();
                          }, true));
                        }
                         else {
                          __then();
                        }
                        ;
                      })(__then);
                    }
                     else {
                      __then();
                    }
                    ;
                  })(function __$uploadFile() {
                    startProgress(util.format($("Uploading file '%s' to '%s' under share %s"), source, directory, share));
                    endProgress();
                    summary = new SpeedSummary(file);
                    storageOptions.speedSummary = summary;
                    storageOptions.parallelOperationThreadCount = (options.concurrenttaskcount || storageOptions.parallelOperationThreadCount);
                    printer = StorageUtil.getSpeedPrinter(summary);
                    intervalId = -1;
                    if (!logger.format().json) {
                      intervalId = setInterval(printer, 1000);
                    }
                    ;
                    succeeded = false;
                    return (function ___(__then) {
                      (function ___(_) {
                        __tryCatch(_, function __$uploadFile() {
                          return performStorageOperation(getStorageFileOperation(fileService, "createFileFromLocalFile"), __cb(_, __frame, 116, 6, function __$uploadFile() {
                            succeeded = true;
                            _(null, null, true);
                          }, true), share, directory, file, source, storageOptions);
                        });
                      })(function ___(__e, __r, __cont) {
                        (function ___(__then) {
                          __tryCatch(_, function __$uploadFile() {
                            printer(true);
                            clearInterval(intervalId);
                            __then();
                          });
                        })(function ___() {
                          __tryCatch(_, function ___() {
                            if (__cont) {
                              __then();
                            } else {
                              _(__e, __r);
                            };
                          });
                        });
                      });
                    })(function ___() {
                      __tryCatch(_, function __$uploadFile() {
                        if ((succeeded === true)) {
                          logger.info(util.format($("Successfully uploaded file '%s' to share %s"), source, share));
                        }
                        ;
                        _();
                      });
                    });
                  });
                });
              });
            });
          }, true));
        }, true));
      }, true));
    });
  };
  function downloadFile(share, path, destination, options, _) {
    var fileService, storageOptions, force, result, directory, file, stat, operation, summary, printer, intervalId, downloadedFile;
    var __frame = {
      name: "downloadFile",
      line: 541
    };
    return __func(_, this, arguments, downloadFile, 4, __frame, function __$downloadFile() {
      fileService = getFileServiceClient(options);
      return interaction.promptIfNotGiven($("Share name: "), share, __cb(_, __frame, 2, 24, function ___(__0, __1) {
        share = __1;
        return interaction.promptIfNotGiven($("Path of the file to be downloaded: "), path, __cb(_, __frame, 3, 23, function ___(__0, __2) {
          path = __2;
          storageOptions = getStorageFileOperationDefaultOption();
          force = !!options.quiet;
          path = normalizePath(path);
          result = fetchBasenameAndDirname(path);
          directory = result.dirname;
          file = result.basename;
          logger.verbose(directory);
          logger.verbose(file);
          return (function __$downloadFile(__then) {
            if (destination) {
              return (function ___(__then) {
                (function ___(_) {
                  __tryCatch(_, function __$downloadFile() {
                    return fs.stat(destination, __cb(_, __frame, 17, 18, function ___(__0, __3) {
                      stat = __3;
                      if (stat.isDirectory()) {
                        destination = pathUtil.join(destination, file);
                      }
                      ;
                      __then();
                    }, true));
                  });
                })(function ___(err, __result) {
                  __catch(function __$downloadFile() {
                    if (err) {
                      if (!StorageUtil.isFileNotFoundException(err)) {
                        return _(err);
                      }
                      ;
                      __then();
                    }
                     else {
                      _(null, __result);
                    }
                    ;
                  }, _);
                });
              })(function ___() {
                __tryCatch(_, __then);
              });
            }
             else {
              destination = pathUtil.join(".", file);
              __then();
            }
            ;
          })(function __$downloadFile() {
            return utils.fileExists(destination, __cb(_, __frame, 37, 14, function ___(__0, __4) {
              return (function __$downloadFile(__then) {
                if (__4) {
                  return (function __$downloadFile(__then) {
                    if ((force !== true)) {
                      return interaction.confirm(util.format($("Do you want to overwrite file %s? "), destination), __cb(_, __frame, 39, 28, function ___(__0, __5) {
                        force = __5;
                        if ((force !== true)) {
                          return _(null);
                        }
                        ;
                        __then();
                      }, true));
                    }
                     else {
                      __then();
                    }
                    ;
                  })(__then);
                }
                 else {
                  __then();
                }
                ;
              })(function __$downloadFile() {
                operation = getStorageFileOperation(fileService, "getFileToLocalFile");
                summary = new SpeedSummary(file);
                storageOptions.speedSummary = summary;
                storageOptions.disableContentMD5Validation = !options.checkmd5;
                startProgress(util.format($("Download remote file '%s' from share %s to local path '%s'"), path, share, destination));
                endProgress();
                printer = StorageUtil.getSpeedPrinter(summary);
                intervalId = -1;
                if (!logger.format().json) {
                  intervalId = setInterval(printer, 1000);
                }
                ;
                return (function ___(__then) {
                  (function ___(_) {
                    __tryCatch(_, function __$downloadFile() {
                      return (function ___(__then) {
                        (function ___(_) {
                          __tryCatch(_, function __$downloadFile() {
                            return performStorageOperation(operation, __cb(_, __frame, 62, 23, function ___(__0, __6) {
                              downloadedFile = __6;
                              __then();
                            }, true), share, directory, file, destination, storageOptions);
                          });
                        })(function ___(e, __result) {
                          __catch(function __$downloadFile() {
                            if (e) {
                              if (StorageUtil.isNotFoundException(e)) {
                                return _(new Error(util.format($("File '%s' in share %s does not exist"), path, share)));
                              }
                               else {
                                return _(e);
                              }
                              ;
                              __then();
                            }
                             else {
                              _(null, __result);
                            }
                            ;
                          }, _);
                        });
                      })(function ___() {
                        __tryCatch(_, function __$downloadFile() {
                          _(null, null, true);
                        });
                      });
                    });
                  })(function ___(__e, __r, __cont) {
                    (function ___(__then) {
                      __tryCatch(_, function __$downloadFile() {
                        printer(true);
                        clearInterval(printer);
                        __then();
                      });
                    })(function ___() {
                      __tryCatch(_, function ___() {
                        if (__cont) {
                          __then();
                        } else {
                          _(__e, __r);
                        };
                      });
                    });
                  });
                })(function ___() {
                  __tryCatch(_, function __$downloadFile() {
                    logger.info(util.format($("File saved as %s"), destination));
                    _();
                  });
                });
              });
            }, true));
          });
        }, true));
      }, true));
    });
  };
  function createDirectory(share, path, options, _) {
    var fileService, operation, tips, storageOptions, directoryResult;
    var __frame = {
      name: "createDirectory",
      line: 618
    };
    return __func(_, this, arguments, createDirectory, 3, __frame, function __$createDirectory() {
      fileService = getFileServiceClient(options);
      return interaction.promptIfNotGiven($("Share name: "), share, __cb(_, __frame, 2, 24, function ___(__0, __1) {
        share = __1;
        return interaction.promptIfNotGiven($("Path to the directory to be created: "), path, __cb(_, __frame, 3, 23, function ___(__0, __2) {
          path = __2;
          path = normalizePath(path);
          operation = getStorageFileOperation(fileService, "createDirectory");
          tips = util.format($("Creating storage file directory '%s' in share %s"), path, share);
          storageOptions = getStorageFileOperationDefaultOption();
          startProgress(tips);
          return (function ___(__then) {
            (function ___(_) {
              __tryCatch(_, function __$createDirectory() {
                return performStorageOperation(operation, __cb(_, __frame, 13, 24, function ___(__0, __3) {
                  directoryResult = __3;
                  _(null, null, true);
                }, true), share, path, storageOptions);
              });
            })(function ___(__e, __r, __cont) {
              (function ___(__then) {
                __tryCatch(_, function __$createDirectory() {
                  endProgress();
                  __then();
                });
              })(function ___() {
                __tryCatch(_, function ___() {
                  if (__cont) {
                    __then();
                  } else {
                    _(__e, __r);
                  };
                });
              });
            });
          })(function ___() {
            __tryCatch(_, function __$createDirectory() {
              logger.info(util.format($("Directory %s has been created successfully"), path));
              logger.json(directoryResult);
              _();
            });
          });
        }, true));
      }, true));
    });
  };
  function deleteDirectory(share, path, options, _) {
    var fileService, operation, tips, storageOptions, force;
    var __frame = {
      name: "deleteDirectory",
      line: 640
    };
    return __func(_, this, arguments, deleteDirectory, 3, __frame, function __$deleteDirectory() {
      fileService = getFileServiceClient(options);
      return interaction.promptIfNotGiven($("Share name: "), share, __cb(_, __frame, 2, 24, function ___(__0, __1) {
        share = __1;
        return interaction.promptIfNotGiven($("Path to the directory to be created: "), path, __cb(_, __frame, 3, 23, function ___(__0, __2) {
          path = __2;
          operation = getStorageFileOperation(fileService, "deleteDirectory");
          tips = util.format($("Deleting storage file directory %s"), share);
          storageOptions = getStorageFileOperationDefaultOption();
          path = normalizePath(path);
          if (utils.stringIsNullOrEmpty(path)) {
            return _(new Error($("Cannot delete root directory. A path to a subdirectory is mandatory")));
          }
          ;
          force = !!options.quiet;
          return (function __$deleteDirectory(__then) {
            if ((force !== true)) {
              return interaction.confirm(util.format($("Do you want to delete directory %s in share %s? "), path, share), __cb(_, __frame, 15, 26, function ___(__0, __3) {
                force = __3;
                if ((force !== true)) {
                  return _(null);
                }
                ;
                __then();
              }, true));
            }
             else {
              __then();
            }
            ;
          })(function __$deleteDirectory() {
            startProgress(tips);
            return (function ___(__then) {
              (function ___(_) {
                __tryCatch(_, function __$deleteDirectory() {
                  return (function ___(__then) {
                    (function ___(_) {
                      __tryCatch(_, function __$deleteDirectory() {
                        return performStorageOperation(operation, __cb(_, __frame, 24, 6, __then, true), share, path, storageOptions);
                      });
                    })(function ___(e, __result) {
                      __catch(function __$deleteDirectory() {
                        if (e) {
                          if (StorageUtil.isNotFoundException(e)) {
                            return _(new Error(util.format($("Can not find directory '%s' in share %s"), path, share)));
                          }
                           else {
                            return _(e);
                          }
                          ;
                          __then();
                        }
                         else {
                          _(null, __result);
                        }
                        ;
                      }, _);
                    });
                  })(function ___() {
                    __tryCatch(_, function __$deleteDirectory() {
                      _(null, null, true);
                    });
                  });
                });
              })(function ___(__e, __r, __cont) {
                (function ___(__then) {
                  __tryCatch(_, function __$deleteDirectory() {
                    endProgress();
                    __then();
                  });
                })(function ___() {
                  __tryCatch(_, function ___() {
                    if (__cont) {
                      __then();
                    } else {
                      _(__e, __r);
                    };
                  });
                });
              });
            })(function ___() {
              __tryCatch(_, function __$deleteDirectory() {
                logger.info(util.format($("Directory %s has been deleted successfully"), path));
                _();
              });
            });
          });
        }, true));
      }, true));
    });
  };
  function fetchBasenameAndDirname(path) {
    var result = {
    };
    result.basename = pathUtil.basename(path);
    result.dirname = pathUtil.dirname(path);
    if ((!result.dirname || (result.dirname === "."))) {
      result.dirname = "";
    }
    ;
    if (!result.basename) {
      result.basename = "";
    }
    ;
    return result;
  };
  function normalizePath(path) {
    var result = pathUtil.join("", __.without(path.replace("\\", "/").split("/"), "").join("/"));
    if ((result === ".")) {
      result = "";
    }
    ;
    return result;
  };
  function validateSharePrefix(prefix) {
    if (utils.stringIsNullOrEmpty(prefix)) {
      return;
    }
    ;
    if ((!prefix.match(/^[a-z0-9][a-z0-9\-]{0,62}$/) || (prefix.indexOf("--") >= 0))) {
      throw new Error(util.format($("The given prefix '%s' is not a valid prefix of a share name"), prefix));
    }
    ;
  };
  function applyFileServicePatch(fileService) {
    fileService.listAllShares = function(options, callback) {
      StorageUtil.listWithContinuation(fileService.listSharesSegmentedWithPrefix, fileService, StorageUtil.ListContinuationTokenArgIndex.Share, options.prefix, null, options, callback);
    };
    fileService.listFilesAndDirectories = function(share, directory, options, callback) {
      StorageUtil.listWithContinuation(fileService.listFilesAndDirectoriesSegmented, fileService, StorageUtil.ListContinuationTokenArgIndex.File, share, directory, null, options, callback);
    };
  };
};