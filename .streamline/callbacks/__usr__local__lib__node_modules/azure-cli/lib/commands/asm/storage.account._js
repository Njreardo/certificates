/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch;
var __ = require("underscore");
var util = require("util");
var profile = require("../../util/profile");
var utils = require("../../util/utils");
var validation = require("../../util/validation");
var storageUtil = require("../../util/storage.util");
var $ = utils.getLocaleString;
exports.init = function(cli) {
  var log = cli.output;
  var storage = cli.category("storage");
  var storageAccount = storage.category("account").description($("Commands to manage your Storage accounts"));
  var keys = storageAccount.category("keys").description($("Commands to manage your Storage account keys"));
  var connectionString = storageAccount.category("connectionstring").description($("Commands to show your Storage connection string"));
  var serviceType = {
    blob: 0,
    queue: 1,
    table: 2,
    file: 3
  };
  function wrapEndpoint(uri, type) {
    if (!uri) {
      return "";
    }
    ;
    if ((((uri.indexOf("//") != -1) && !utils.stringStartsWith(uri, "http://")) && !utils.stringStartsWith(uri, "https://"))) {
      throw new Error($((("The provided URI \"" + uri) + "\" is not supported.")));
    }
    ;
    if (validation.isValidUri(uri)) {
      var tag;
      switch (type) {
      case serviceType.blob:
        tag = "BlobEndpoint=";
        break;
      case serviceType.queue:
        tag = "QueueEndpoint=";
        break;
      case serviceType.table:
        tag = "TableEndpoint=";
        break;
      case serviceType.file:
        tag = "FileEndpoint=";
        break;
      };
      return ((tag + uri) + ";");
    }
    ;
    return "";
  };
  storageAccount.listCommand = function storageAccount_listCommand__1(options, _) {
    var service, storageAccounts, progress;
    var __frame = {
      name: "storageAccount_listCommand__1",
      line: 65
    };
    return __func(_, this, arguments, storageAccount_listCommand__1, 1, __frame, function __$storageAccount_listCommand__1() {
      service = utils._createStorageClient(profile.current.getSubscription(options.subscription), log);
      progress = cli.interaction.progress($("Getting storage accounts"));
      return (function ___(__then) {
        (function ___(_) {
          __tryCatch(_, function __$storageAccount_listCommand__1() {
            return service.storageAccounts.list(__cb(_, __frame, 6, 50, function ___(__0, __1) {
              storageAccounts = __1.storageAccounts;
              _(null, null, true);
            }, true));
          });
        })(function ___(__e, __r, __cont) {
          (function ___(__then) {
            __tryCatch(_, function __$storageAccount_listCommand__1() {
              progress.end();
              __then();
            });
          })(function ___() {
            __tryCatch(_, function ___() {
              if (__cont) {
                __then();
              } else {
                _(__e, __r);
              };
            });
          });
        });
      })(function ___() {
        __tryCatch(_, function __$storageAccount_listCommand__1() {
          cli.interaction.formatOutput(storageAccounts, function(outputData) {
            if ((outputData.length === 0)) {
              log.info($("No storage accounts defined"));
            }
             else {
              log.table(outputData, function(row, item) {
                row.cell($("Name"), item.name);
                row.cell($("Label"), (item.label ? item.properties.label : ""));
                row.cell($("Location"), (item.properties.location || (((item.properties.affinityGroup || "")) + ((item.properties.geoPrimaryRegion ? ((" (" + item.properties.geoPrimaryRegion) + ")") : "")))));
              });
            }
            ;
          });
          _();
        });
      });
    });
  };
  storageAccount.showCommand = function storageAccount_showCommand__2(name, options, _) {
    var service, storageAccount, progress;
    var __frame = {
      name: "storageAccount_showCommand__2",
      line: 91
    };
    return __func(_, this, arguments, storageAccount_showCommand__2, 2, __frame, function __$storageAccount_showCommand__2() {
      service = utils._createStorageClient(profile.current.getSubscription(options.subscription), log);
      progress = cli.interaction.progress($("Getting storage account"));
      return (function ___(__then) {
        (function ___(_) {
          __tryCatch(_, function __$storageAccount_showCommand__2() {
            return service.storageAccounts.get(name, __cb(_, __frame, 7, 49, function ___(__0, __1) {
              storageAccount = __1.storageAccount;
              _(null, null, true);
            }, true));
          });
        })(function ___(__e, __r, __cont) {
          (function ___(__then) {
            __tryCatch(_, function __$storageAccount_showCommand__2() {
              progress.end();
              __then();
            });
          })(function ___() {
            __tryCatch(_, function ___() {
              if (__cont) {
                __then();
              } else {
                _(__e, __r);
              };
            });
          });
        });
      })(function ___() {
        __tryCatch(_, function __$storageAccount_showCommand__2() {
          if (storageAccount) {
            cli.interaction.formatOutput(storageAccount, function(outputData) {
              log.data($("Name"), outputData.name);
              log.data($("Url"), outputData.uri);
              cli.interaction.logEachData($("Account Properties"), outputData.properties);
              cli.interaction.logEachData($("Extended Properties"), outputData.extendedProperties);
              cli.interaction.logEachData($("Capabilities"), outputData.capabilities);
            });
          }
           else {
            log.info($("No storage account found"));
          }
          ;
          _();
        });
      });
    });
  };
  storageAccount.createCommand = function storageAccount_createCommand__3(name, options, _) {
    var service, managementService, storageOptions, progress;
    var __frame = {
      name: "storageAccount_createCommand__3",
      line: 117
    };
    return __func(_, this, arguments, storageAccount_createCommand__3, 2, __frame, function __$storageAccount_createCommand__3() {
      service = utils._createStorageClient(profile.current.getSubscription(options.subscription), log);
      managementService = utils._createManagementClient(profile.current.getSubscription(options.subscription), log);
      storageOptions = {
        name: name,
        label: (options.label ? options.label : name)
      };
      if (options.type) {
        if ((options.geoReplication || options.disableGeoReplication)) {
          return _(new Error($("Geo replication option cannot be specified with account type")));
        }
        ;
        validation.isValidEnumValue(options.type, Object.keys(storageUtil.AccountTypeForCreating));
        storageOptions.accountType = storageUtil.AccountTypeForCreating[options.type.toUpperCase()];
      }
       else {
        if ((options.geoReplication === true)) {
          storageOptions.accountType = storageUtil.AccountTypeForCreating.GRS;
        }
         else {
          storageOptions.accountType = storageUtil.AccountTypeForCreating.LRS;
        }
        ;
      }
      ;
      if (__.isString(options.description)) {
        storageOptions.description = options.description;
      }
      ;
      return (function __$storageAccount_createCommand__3(__then) {
        if (options.affinityGroup) {
          storageOptions.affinityGroup = options.affinityGroup;
          __then();
        }
         else {
          return cli.interaction.chooseIfNotGiven($("Location: "), $("Getting locations"), options.location, function(cb) {
            managementService.locations.list(function(err, result) {
              if (err) {
                return cb(err);
              }
              ;
              cb(null, result.locations.map(function(location) {
                return location.name;
              }));
            });
          }, __cb(_, __frame, 31, 50, function ___(__0, __1) {
            storageOptions.location = __1;
            __then();
          }, true));
        }
        ;
      })(function __$storageAccount_createCommand__3() {
        progress = cli.interaction.progress($("Creating storage account"));
        return (function ___(__then) {
          (function ___(_) {
            __tryCatch(_, function __$storageAccount_createCommand__3() {
              return service.storageAccounts.create(storageOptions, __cb(_, __frame, 43, 32, function __$storageAccount_createCommand__3() {
                _(null, null, true);
              }, true));
            });
          })(function ___(__e, __r, __cont) {
            (function ___(__then) {
              __tryCatch(_, function __$storageAccount_createCommand__3() {
                progress.end();
                __then();
              });
            })(function ___() {
              __tryCatch(_, function ___() {
                if (__cont) {
                  __then();
                } else {
                  _(__e, __r);
                };
              });
            });
          });
        })(function ___() {
          __tryCatch(_, function __$storageAccount_createCommand__3() {
            _();
          });
        });
      });
    });
  };
  storageAccount.updateCommand = function storageAccount_updateCommand__4(name, options, _) {
    var service, storageOptions, progress;
    var __frame = {
      name: "storageAccount_updateCommand__4",
      line: 166
    };
    return __func(_, this, arguments, storageAccount_updateCommand__4, 2, __frame, function __$storageAccount_updateCommand__4() {
      service = utils._createStorageClient(profile.current.getSubscription(options.subscription), log);
      storageOptions = {
      };
      if (__.isString(options.description)) {
        storageOptions.description = options.description;
      }
      ;
      if (options.label) {
        storageOptions.label = options.label;
      }
      ;
      if (options.type) {
        if ((options.geoReplication || options.disableGeoReplication)) {
          return _(new Error($("Geo replication option cannot be specified with account type")));
        }
        ;
        validation.isValidEnumValue(options.type, Object.keys(storageUtil.AccountTypeForChanging));
        storageOptions.accountType = storageUtil.AccountTypeForChanging[options.type.toUpperCase()];
      }
       else {
        if (((options.geoReplication !== undefined) || (options.disableGeoReplication !== undefined))) {
          storageOptions.geoReplicationEnabled = ((options.geoReplication === true)).toString();
        }
        ;
      }
      ;
      progress = cli.interaction.progress($("Updating storage account"));
      return (function ___(__then) {
        (function ___(_) {
          __tryCatch(_, function __$storageAccount_updateCommand__4() {
            return service.storageAccounts.update(name, storageOptions, __cb(_, __frame, 27, 32, function __$storageAccount_updateCommand__4() {
              _(null, null, true);
            }, true));
          });
        })(function ___(__e, __r, __cont) {
          (function ___(__then) {
            __tryCatch(_, function __$storageAccount_updateCommand__4() {
              progress.end();
              __then();
            });
          })(function ___() {
            __tryCatch(_, function ___() {
              if (__cont) {
                __then();
              } else {
                _(__e, __r);
              };
            });
          });
        });
      })(function ___() {
        __tryCatch(_, function __$storageAccount_updateCommand__4() {
          _();
        });
      });
    });
  };
  storageAccount.deleteCommand = function storageAccount_deleteCommand__5(name, options, _) {
    var service, progress;
    var __frame = {
      name: "storageAccount_deleteCommand__5",
      line: 199
    };
    return __func(_, this, arguments, storageAccount_deleteCommand__5, 2, __frame, function __$storageAccount_deleteCommand__5() {
      service = utils._createStorageClient(profile.current.getSubscription(options.subscription), log);
      return (function __$storageAccount_deleteCommand__5(_) {
        var __1 = !options.quiet;
        if (!__1) {
          return _(null, __1);
        }
        ;
        return cli.interaction.confirm(util.format($("Delete storage account %s? [y/n] "), name), __cb(_, __frame, 3, 45, function ___(__0, __3) {
          var __2 = !__3;
          return _(null, __2);
        }, true));
      })(__cb(_, __frame, -198, 18, function ___(__0, __2) {
        return (function __$storageAccount_deleteCommand__5(__then) {
          if (__2) {
            return _(null);
          }
           else {
            __then();
          }
          ;
        })(function __$storageAccount_deleteCommand__5() {
          progress = cli.interaction.progress($("Deleting storage account"));
          return (function ___(__then) {
            (function ___(_) {
              __tryCatch(_, function __$storageAccount_deleteCommand__5() {
                return service.storageAccounts.deleteMethod(name, __cb(_, __frame, 9, 32, function __$storageAccount_deleteCommand__5() {
                  _(null, null, true);
                }, true));
              });
            })(function ___(__e, __r, __cont) {
              (function ___(__then) {
                __tryCatch(_, function __$storageAccount_deleteCommand__5() {
                  progress.end();
                  __then();
                });
              })(function ___() {
                __tryCatch(_, function ___() {
                  if (__cont) {
                    __then();
                  } else {
                    _(__e, __r);
                  };
                });
              });
            });
          })(function ___() {
            __tryCatch(_, function __$storageAccount_deleteCommand__5() {
              _();
            });
          });
        });
      }, true));
    });
  };
  keys.listCommand = function keys_listCommand__6(name, options, _) {
    var service, keys, progress;
    var __frame = {
      name: "keys_listCommand__6",
      line: 214
    };
    return __func(_, this, arguments, keys_listCommand__6, 2, __frame, function __$keys_listCommand__6() {
      service = utils._createStorageClient(profile.current.getSubscription(options.subscription), log);
      progress = cli.interaction.progress($("Getting storage account keys"));
      return (function ___(__then) {
        (function ___(_) {
          __tryCatch(_, function __$keys_listCommand__6() {
            return service.storageAccounts.getKeys(name, __cb(_, __frame, 6, 39, function ___(__0, __1) {
              keys = __1;
              _(null, null, true);
            }, true));
          });
        })(function ___(__e, __r, __cont) {
          (function ___(__then) {
            __tryCatch(_, function __$keys_listCommand__6() {
              progress.end();
              __then();
            });
          })(function ___() {
            __tryCatch(_, function ___() {
              if (__cont) {
                __then();
              } else {
                _(__e, __r);
              };
            });
          });
        });
      })(function ___() {
        __tryCatch(_, function __$keys_listCommand__6() {
          if (keys) {
            cli.interaction.formatOutput(keys, function(outputData) {
              log.data($("Primary"), outputData.primaryKey);
              log.data($("Secondary"), outputData.secondaryKey);
            });
          }
           else {
            log.info($("No storage account keys found"));
          }
          ;
          _();
        });
      });
    });
  };
  keys.renewCommand = function keys_renewCommand__7(name, options, _) {
    var service, type, progress;
    var __frame = {
      name: "keys_renewCommand__7",
      line: 235
    };
    return __func(_, this, arguments, keys_renewCommand__7, 2, __frame, function __$keys_renewCommand__7() {
      service = utils._createStorageClient(profile.current.getSubscription(options.subscription), log);
      if ((!options.primary && !options.secondary)) {
        return _(new Error($("Need to specify either --primary or --secondary")));
      }
       else {
        if ((options.primary && options.secondary)) {
          return _(new Error($("Only one of primary or secondary keys can be renewed at a time")));
        }
        ;
      }
      ;
      type = (options.primary ? "primary" : "secondary");
      progress = cli.interaction.progress($("Renewing storage account key"));
      return (function ___(__then) {
        (function ___(_) {
          __tryCatch(_, function __$keys_renewCommand__7() {
            return service.storageAccounts.regenerateKeys({
              name: name,
              keyType: type
            }, __cb(_, __frame, 13, 39, function ___(__0, __1) {
              keys = __1;
              _(null, null, true);
            }, true));
          });
        })(function ___(__e, __r, __cont) {
          (function ___(__then) {
            __tryCatch(_, function __$keys_renewCommand__7() {
              progress.end();
              __then();
            });
          })(function ___() {
            __tryCatch(_, function ___() {
              if (__cont) {
                __then();
              } else {
                _(__e, __r);
              };
            });
          });
        });
      })(function ___() {
        __tryCatch(_, function __$keys_renewCommand__7() {
          if (keys) {
            cli.interaction.formatOutput(keys, function(outputData) {
              log.data($("Primary"), outputData.primaryKey);
              log.data($("Secondary"), outputData.secondaryKey);
            });
          }
           else {
            log.info($("No storage account keys found"));
          }
          ;
          _();
        });
      });
    });
  };
  connectionString.showCommand = function connectionString_showCommand__8(name, options, _) {
    var service, keys, connection;
    var __frame = {
      name: "connectionString_showCommand__8",
      line: 263
    };
    return __func(_, this, arguments, connectionString_showCommand__8, 2, __frame, function __$connectionString_showCommand__8() {
      service = utils._createStorageClient(profile.current.getSubscription(options.subscription));
      return service.storageAccounts.getKeys(name, __cb(_, __frame, 2, 39, function ___(__0, __1) {
        keys = __1;
        connection = {
          string: ""
        };
        connection.string = ("DefaultEndpointsProtocol=" + ((options.useHttp ? "http;" : "https;")));
        connection.string += wrapEndpoint(options.blobEndpoint, serviceType.blob);
        connection.string += wrapEndpoint(options.queueEndpoint, serviceType.queue);
        connection.string += wrapEndpoint(options.tableEndpoint, serviceType.table);
        connection.string += wrapEndpoint(options.fileEndpoint, serviceType.file);
        connection.string += (("AccountName=" + name) + ";");
        connection.string += ("AccountKey=" + keys.primaryKey);
        cli.interaction.formatOutput(connection, function(outputData) {
          log.data($("connectionstring"), outputData.string);
        });
        _();
      }, true));
    });
  };
  storageAccount.command("list").description($("List storage accounts")).option("-s, --subscription <id>", $("the subscription id")).execute(storageAccount.listCommand);
  storageAccount.command("show <name>").description($("Show a storage account")).option("-s, --subscription <id>", $("the subscription id")).execute(storageAccount.showCommand);
  storageAccount.command("create <name>").description($("Create a storage account")).option("-e, --label <label>", $("the storage account label")).option("-d, --description <description>", $("the storage account description")).option("-l, --location <name>", $("the location")).option("-a, --affinity-group <name>", $("the affinity group")).option("-s, --subscription <id>", $("the subscription id")).option("--type <type>", $("the account type(LRS/ZRS/GRS/RAGRS/PLRS)")).option("--geoReplication", $("deprecated. This option is deprecated and will be removed in a future version. Please use \"--type\" instead")).option("--disable-geoReplication", $("deprecated. This option is deprecated and will be removed in a future version. Please use \"--type\" instead")).execute(storageAccount.createCommand);
  storageAccount.command("set <name>").description($("Update a storage account")).option("-e, --label <label>", $("the storage account label")).option("-d, --description <description>", $("the storage account description")).option("-s, --subscription <id>", $("the subscription id")).option("--type <type>", $("the account type(LRS/GRS/RAGRS)")).option("--geoReplication", $("deprecated. This option is deprecated and will be removed in a future version. Please use \"--type\" instead")).option("--disable-geoReplication", $("deprecated. This option is deprecated and will be removed in a future version. Please use \"--type\" instead")).execute(storageAccount.updateCommand);
  storageAccount.command("delete <name>").description($("Delete a storage account")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <id>", $("the subscription id")).execute(storageAccount.deleteCommand);
  keys.command("list <name>").description($("List the keys for a storage account")).option("-s, --subscription <id>", $("the subscription id")).execute(keys.listCommand);
  keys.command("renew <name>").description($("Renew a key for a storage account from your account")).option("--primary", $("Update the primary key")).option("--secondary", $("Update the secondary key")).option("-s, --subscription <id>", $("the subscription id")).execute(keys.renewCommand);
  connectionString.command("show <name>").description($("Show the connection string for your account")).option("--use-http", $("Use http as default endpoints protocol")).option("--blob-endpoint <blobEndpoint>", $("the blob endpoint")).option("--queue-endpoint <queueEndpoint>", $("the queue endpoint")).option("--table-endpoint <tableEndpoint>", $("the table endpoint")).option("--file-endpoint <fileEndpoint>", $("the file endpoint")).option("-s, --subscription <id>", $("the subscription id")).execute(connectionString.showCommand);
};